
LoopingLeni.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00002ad0  00002b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ca  0080024c  0080024c  00002cb0  2**0
                  ALLOC
  3 .debug_aranges 00000858  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001606  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000086a4  00000000  00000000  00004b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001cae  00000000  00000000  0000d1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005400  00000000  00000000  0000ee60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ec0  00000000  00000000  00014260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000290c  00000000  00000000  00015120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004e37  00000000  00000000  00017a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000888  00000000  00000000  0001c863  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	if (numTimer >= MAX_TIMERS) {
		return false;
	}

	return enabled[numTimer];
}
       0:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__dtors_end>
  this->multi_char_pos = 0;
  this->scroll_enabled = false;
  this->score = 0;
  this->turbo = 0;
  this->step_count = 0;
}
       4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>

int LoopingLouie::getLost(int id) {
	return this->players[id].lost;
}

void LoopingLouie::lostChip(int id) {
       8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
//  readInputs();
}

void disableButtons() {
  BUTTONS_ENABLED = false;
}
       c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}
      10:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
      14:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      18:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
      1c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
      20:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      24:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      28:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      2c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      30:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      34:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      38:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      3c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      40:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_16>
      44:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      48:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      4c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      50:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      54:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      58:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      5c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      60:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
      64:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>

00000068 <_ZL8font_8x8>:
	...
      70:	00 60 fa fa 60 00 00 00 00 e0 e0 00 e0 e0 00 00     .`..`...........
      80:	28 fe fe 28 fe fe 28 00 24 74 d6 d6 5c 48 00 00     (..(..(.$t..\H..
      90:	62 66 0c 18 30 66 46 00 0c 5e f2 ba ec 5e 12 00     bf..0fF..^...^..
      a0:	20 e0 c0 00 00 00 00 00 00 38 7c c6 82 00 00 00      ........8|.....
      b0:	00 82 c6 7c 38 00 00 00 10 54 7c 38 38 7c 54 10     ...|8....T|88|T.
      c0:	10 10 7c 7c 10 10 00 00 00 05 07 06 00 00 00 00     ..||............
      d0:	10 10 10 10 10 10 00 00 00 00 06 06 00 00 00 00     ................
      e0:	06 0c 18 30 60 c0 80 00 7c fe 9a b2 fe 7c 00 00     ...0`...|....|..
      f0:	42 42 fe fe 02 02 00 00 46 ce 9a 92 f6 66 00 00     BB......F....f..
     100:	44 c6 92 92 fe 6c 00 00 18 38 68 c8 fe fe 08 00     D....l...8h.....
     110:	e4 e6 a2 a2 be 9c 00 00 3c 7e d2 92 9e 0c 00 00     ........<~......
     120:	c0 c6 8e 98 f0 e0 00 00 6c fe 92 92 fe 6c 00 00     ........l....l..
     130:	60 f2 92 96 fc 78 00 00 00 00 36 36 00 00 00 00     `....x....66....
     140:	00 05 37 36 00 00 00 00 10 38 6c c6 82 00 00 00     ..76.....8l.....
     150:	28 28 28 28 28 28 00 00 00 82 c6 6c 38 10 00 00     ((((((.....l8...
     160:	40 c0 8a 9a f0 60 00 00 7c fe 82 ba ba f8 78 00     @....`..|.....x.
     170:	3e 7e c8 c8 7e 3e 00 00 82 fe fe 92 92 fe 6c 00     >~..~>........l.
     180:	38 7c c6 82 82 c6 44 00 82 fe fe 82 c6 fe 38 00     8|....D.......8.
     190:	82 fe fe 92 ba 82 c6 00 82 fe fe 92 b8 80 c0 00     ................
     1a0:	38 7c c6 82 8a ce 4e 00 fe fe 10 10 fe fe 00 00     8|....N.........
     1b0:	00 82 fe fe 82 00 00 00 0c 0e 02 82 fe fc 80 00     ................
     1c0:	82 fe fe 10 38 ee c6 00 82 fe fe 82 02 06 0e 00     ....8...........
     1d0:	fe fe 60 30 60 fe fe 00 fe fe 60 30 18 fe fe 00     ..`0`.....`0....
     1e0:	38 7c c6 82 c6 7c 38 00 82 fe fe 92 90 f0 60 00     8|...|8.......`.
     1f0:	78 fc 84 8e fe 7a 00 00 82 fe fe 98 9c f6 62 00     x....z........b.
     200:	64 e6 b2 9a de 4c 00 00 c0 82 fe fe 82 c0 00 00     d....L..........
     210:	fe fe 02 02 fe fe 00 00 f8 fc 06 06 fc f8 00 00     ................
     220:	fe fe 0c 18 0c fe fe 00 c6 ee 38 10 38 ee c6 00     ..........8.8...
     230:	e0 f2 1e 1e f2 e0 00 00 e6 ce 9a b2 e2 c6 8e 00     ................
     240:	00 fe fe 82 82 00 00 00 80 c0 60 30 18 0c 06 00     ..........`0....
     250:	00 82 82 fe fe 00 00 00 10 30 60 c0 60 30 10 00     .........0`.`0..
     260:	01 01 01 01 01 01 01 01 00 00 c0 e0 20 00 00 00     ............ ...
     270:	04 2e 2a 2a 3c 1e 02 00 82 fc fe 22 22 3e 1c 00     ..**<......"">..
     280:	1c 3e 22 22 36 14 00 00 0c 1e 12 92 fc fe 02 00     .>""6...........
     290:	1c 3e 2a 2a 3a 18 00 00 12 7e fe 92 c0 40 00 00     .>**:....~...@..
     2a0:	19 3d 25 25 1f 3e 20 00 82 fe fe 10 20 3e 1e 00     .=%%.> ..... >..
     2b0:	00 22 be be 02 00 00 00 02 23 21 bf be 00 00 00     .".......#!.....
     2c0:	82 fe fe 08 1c 36 22 00 00 82 fe fe 02 00 00 00     .....6".........
     2d0:	3e 3e 30 18 30 3e 1e 00 3e 3e 20 20 3e 1e 00 00     >>0.0>..>>  >...
     2e0:	1c 3e 22 22 3e 1c 00 00 21 3f 1f 25 24 3c 18 00     .>"">...!?.%$<..
     2f0:	18 3c 24 25 1f 3f 21 00 22 3e 1e 22 38 18 00 00     .<$%.?!.">."8...
     300:	12 3a 2a 2a 2e 24 00 00 00 20 7c fe 22 24 00 00     .:**.$... |."$..
     310:	3c 3e 02 02 3c 3e 02 00 38 3c 06 06 3c 38 00 00     <>..<>..8<..<8..
     320:	3c 3e 06 0c 06 3e 3c 00 22 36 1c 08 1c 36 22 00     <>...><."6...6".
     330:	39 3d 05 05 3f 3e 00 00 32 26 2e 3a 32 26 00 00     9=..?>..2&.:2&..
     340:	10 10 7c ee 82 82 00 00 00 00 00 ee ee 00 00 00     ..|.............
     350:	82 82 ee 7c 10 10 00 00 00 62 64 04 04 64 62 00     ...|.....bd..db.
     360:	1e 3e 62 c2 62 3e 1e 00 00 62 64 04 04 64 62 00     .>b.b>...bd..db.
     370:	00 62 64 04 04 64 62 00                             .bd..db.

00000378 <_ZL8font_3x5>:
     378:	f8 88 f8 00 00 f8 b8 a8 e8 88 a8 f8 e0 20 f8 e8     ............. ..
     388:	a8 b8 f8 a8 b8 80 80 f8 f8 a8 f8 e0 a0 f8           ..............

00000396 <port_to_mode_PGM>:
     396:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000003a0 <port_to_output_PGM>:
     3a0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000003aa <port_to_input_PGM>:
     3aa:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000003b4 <digital_pin_to_port_PGM>:
     3b4:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     3c4:	03 03 03 03                                         ....

000003c8 <digital_pin_to_bit_mask_PGM>:
     3c8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     3d8:	04 08 10 20                                         ... 

000003dc <digital_pin_to_timer_PGM>:
     3dc:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     3ec:	00 00 00 00                                         ....

000003f0 <__ctors_start>:
     3f0:	b9 08       	sbc	r11, r9

000003f2 <__ctors_end>:
     3f2:	b2 08       	sbc	r11, r2

000003f4 <__dtors_end>:
     3f4:	11 24       	eor	r1, r1
     3f6:	1f be       	out	0x3f, r1	; 63
     3f8:	cf ef       	ldi	r28, 0xFF	; 255
     3fa:	d8 e0       	ldi	r29, 0x08	; 8
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	cd bf       	out	0x3d, r28	; 61

00000400 <__do_copy_data>:
     400:	12 e0       	ldi	r17, 0x02	; 2
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	b1 e0       	ldi	r27, 0x01	; 1
     406:	e0 ed       	ldi	r30, 0xD0	; 208
     408:	fa e2       	ldi	r31, 0x2A	; 42
     40a:	02 c0       	rjmp	.+4      	; 0x410 <.do_copy_data_start>

0000040c <.do_copy_data_loop>:
     40c:	05 90       	lpm	r0, Z+
     40e:	0d 92       	st	X+, r0

00000410 <.do_copy_data_start>:
     410:	ac 34       	cpi	r26, 0x4C	; 76
     412:	b1 07       	cpc	r27, r17
     414:	d9 f7       	brne	.-10     	; 0x40c <.do_copy_data_loop>

00000416 <__do_clear_bss>:
     416:	16 e0       	ldi	r17, 0x06	; 6
     418:	ac e4       	ldi	r26, 0x4C	; 76
     41a:	b2 e0       	ldi	r27, 0x02	; 2
     41c:	01 c0       	rjmp	.+2      	; 0x420 <.do_clear_bss_start>

0000041e <.do_clear_bss_loop>:
     41e:	1d 92       	st	X+, r1

00000420 <.do_clear_bss_start>:
     420:	a6 31       	cpi	r26, 0x16	; 22
     422:	b1 07       	cpc	r27, r17
     424:	e1 f7       	brne	.-8      	; 0x41e <.do_clear_bss_loop>

00000426 <__do_global_ctors>:
     426:	13 e0       	ldi	r17, 0x03	; 3
     428:	c2 ef       	ldi	r28, 0xF2	; 242
     42a:	d3 e0       	ldi	r29, 0x03	; 3
     42c:	04 c0       	rjmp	.+8      	; 0x436 <.do_global_ctors_start>

0000042e <.do_global_ctors_loop>:
     42e:	22 97       	sbiw	r28, 0x02	; 2
     430:	fe 01       	movw	r30, r28
     432:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__tablejump__>

00000436 <.do_global_ctors_start>:
     436:	c0 3f       	cpi	r28, 0xF0	; 240
     438:	d1 07       	cpc	r29, r17
     43a:	c9 f7       	brne	.-14     	; 0x42e <.do_global_ctors_loop>
     43c:	0e 94 13 10 	call	0x2026	; 0x2026 <main>
     440:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__do_global_dtors>

00000444 <__bad_interrupt>:
     444:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000448 <do_random>:
     448:	a0 e0       	ldi	r26, 0x00	; 0
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	ea e2       	ldi	r30, 0x2A	; 42
     44e:	f2 e0       	ldi	r31, 0x02	; 2
     450:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__prologue_saves__+0x10>
     454:	ec 01       	movw	r28, r24
     456:	a8 80       	ld	r10, Y
     458:	b9 80       	ldd	r11, Y+1	; 0x01
     45a:	ca 80       	ldd	r12, Y+2	; 0x02
     45c:	db 80       	ldd	r13, Y+3	; 0x03
     45e:	a1 14       	cp	r10, r1
     460:	b1 04       	cpc	r11, r1
     462:	c1 04       	cpc	r12, r1
     464:	d1 04       	cpc	r13, r1
     466:	41 f4       	brne	.+16     	; 0x478 <do_random+0x30>
     468:	84 e2       	ldi	r24, 0x24	; 36
     46a:	a8 2e       	mov	r10, r24
     46c:	89 ed       	ldi	r24, 0xD9	; 217
     46e:	b8 2e       	mov	r11, r24
     470:	8b e5       	ldi	r24, 0x5B	; 91
     472:	c8 2e       	mov	r12, r24
     474:	87 e0       	ldi	r24, 0x07	; 7
     476:	d8 2e       	mov	r13, r24
     478:	c6 01       	movw	r24, r12
     47a:	b5 01       	movw	r22, r10
     47c:	2d e1       	ldi	r18, 0x1D	; 29
     47e:	33 ef       	ldi	r19, 0xF3	; 243
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	0e 94 ef 14 	call	0x29de	; 0x29de <__divmodsi4>
     488:	27 ea       	ldi	r18, 0xA7	; 167
     48a:	31 e4       	ldi	r19, 0x41	; 65
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	0e 94 9b 14 	call	0x2936	; 0x2936 <__mulsi3>
     494:	7b 01       	movw	r14, r22
     496:	8c 01       	movw	r16, r24
     498:	c6 01       	movw	r24, r12
     49a:	b5 01       	movw	r22, r10
     49c:	2d e1       	ldi	r18, 0x1D	; 29
     49e:	33 ef       	ldi	r19, 0xF3	; 243
     4a0:	41 e0       	ldi	r20, 0x01	; 1
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	0e 94 ef 14 	call	0x29de	; 0x29de <__divmodsi4>
     4a8:	ca 01       	movw	r24, r20
     4aa:	b9 01       	movw	r22, r18
     4ac:	2c ee       	ldi	r18, 0xEC	; 236
     4ae:	34 ef       	ldi	r19, 0xF4	; 244
     4b0:	4f ef       	ldi	r20, 0xFF	; 255
     4b2:	5f ef       	ldi	r21, 0xFF	; 255
     4b4:	0e 94 9b 14 	call	0x2936	; 0x2936 <__mulsi3>
     4b8:	6e 0d       	add	r22, r14
     4ba:	7f 1d       	adc	r23, r15
     4bc:	80 1f       	adc	r24, r16
     4be:	91 1f       	adc	r25, r17
     4c0:	97 ff       	sbrs	r25, 7
     4c2:	04 c0       	rjmp	.+8      	; 0x4cc <do_random+0x84>
     4c4:	61 50       	subi	r22, 0x01	; 1
     4c6:	70 40       	sbci	r23, 0x00	; 0
     4c8:	80 40       	sbci	r24, 0x00	; 0
     4ca:	90 48       	sbci	r25, 0x80	; 128
     4cc:	68 83       	st	Y, r22
     4ce:	79 83       	std	Y+1, r23	; 0x01
     4d0:	8a 83       	std	Y+2, r24	; 0x02
     4d2:	9b 83       	std	Y+3, r25	; 0x03
     4d4:	9b 01       	movw	r18, r22
     4d6:	ac 01       	movw	r20, r24
     4d8:	5f 77       	andi	r21, 0x7F	; 127
     4da:	b9 01       	movw	r22, r18
     4dc:	ca 01       	movw	r24, r20
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	ea e0       	ldi	r30, 0x0A	; 10
     4e4:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__epilogue_restores__+0x10>

000004e8 <random_r>:
     4e8:	0e 94 24 02 	call	0x448	; 0x448 <do_random>
     4ec:	08 95       	ret

000004ee <random>:
     4ee:	82 e2       	ldi	r24, 0x22	; 34
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	0e 94 24 02 	call	0x448	; 0x448 <do_random>
     4f6:	08 95       	ret

000004f8 <srandom>:
     4f8:	60 93 22 02 	sts	0x0222, r22
     4fc:	70 93 23 02 	sts	0x0223, r23
     500:	80 93 24 02 	sts	0x0224, r24
     504:	90 93 25 02 	sts	0x0225, r25
     508:	08 95       	ret

0000050a <strcpy>:
     50a:	fb 01       	movw	r30, r22
     50c:	dc 01       	movw	r26, r24
     50e:	01 90       	ld	r0, Z+
     510:	0d 92       	st	X+, r0
     512:	00 20       	and	r0, r0
     514:	e1 f7       	brne	.-8      	; 0x50e <strcpy+0x4>
     516:	08 95       	ret

00000518 <_ZN11SimpleTimer6enableEi>:

void SimpleTimer::enable(int numTimer) {
     518:	fc 01       	movw	r30, r24
	if (numTimer >= MAX_TIMERS) {
     51a:	6a 30       	cpi	r22, 0x0A	; 10
     51c:	71 05       	cpc	r23, r1
     51e:	34 f4       	brge	.+12     	; 0x52c <_ZN11SimpleTimer6enableEi+0x14>
		return;
	}

	enabled[numTimer] = true;
     520:	e6 0f       	add	r30, r22
     522:	f7 1f       	adc	r31, r23
     524:	e4 57       	subi	r30, 0x74	; 116
     526:	ff 4f       	sbci	r31, 0xFF	; 255
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 83       	st	Z, r24
     52c:	08 95       	ret

0000052e <_ZN11SimpleTimer7disableEi>:
}

void SimpleTimer::disable(int numTimer) {
     52e:	fc 01       	movw	r30, r24
	if (numTimer >= MAX_TIMERS) {
     530:	6a 30       	cpi	r22, 0x0A	; 10
     532:	71 05       	cpc	r23, r1
     534:	2c f4       	brge	.+10     	; 0x540 <_ZN11SimpleTimer7disableEi+0x12>
		return;
	}

	enabled[numTimer] = false;
     536:	e6 0f       	add	r30, r22
     538:	f7 1f       	adc	r31, r23
     53a:	e4 57       	subi	r30, 0x74	; 116
     53c:	ff 4f       	sbci	r31, 0xFF	; 255
     53e:	10 82       	st	Z, r1
     540:	08 95       	ret

00000542 <_ZN11SimpleTimer8setTimerElPFvvEi>:

	// no free slots found
	return -1;
}

int SimpleTimer::setTimer(long d, timer_callback f, int n) {
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	7c 01       	movw	r14, r24
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
	int i;

	// all slots are used
	if (numTimers >= MAX_TIMERS) {
     550:	8a ea       	ldi	r24, 0xAA	; 170
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	e8 0e       	add	r14, r24
     556:	f9 1e       	adc	r15, r25
     558:	f7 01       	movw	r30, r14
     55a:	80 81       	ld	r24, Z
     55c:	91 81       	ldd	r25, Z+1	; 0x01
     55e:	e6 e5       	ldi	r30, 0x56	; 86
     560:	ff ef       	ldi	r31, 0xFF	; 255
     562:	ee 0e       	add	r14, r30
     564:	ff 1e       	adc	r15, r31
     566:	0a 97       	sbiw	r24, 0x0a	; 10
     568:	0c f0       	brlt	.+2      	; 0x56c <_ZN11SimpleTimer8setTimerElPFvvEi+0x2a>
     56a:	48 c0       	rjmp	.+144    	; 0x5fc <_ZN11SimpleTimer8setTimerElPFvvEi+0xba>
     56c:	f7 01       	movw	r30, r14
     56e:	b8 96       	adiw	r30, 0x28	; 40
     570:	c0 e0       	ldi	r28, 0x00	; 0
     572:	d0 e0       	ldi	r29, 0x00	; 0
		return -1;
	}

	// return the first slot with no callback (i.e. free)
	for (i = 0; i < MAX_TIMERS; i++) {
		if (callbacks[i] == 0) {
     574:	80 81       	ld	r24, Z
     576:	91 81       	ldd	r25, Z+1	; 0x01
     578:	89 2b       	or	r24, r25
     57a:	09 f4       	brne	.+2      	; 0x57e <_ZN11SimpleTimer8setTimerElPFvvEi+0x3c>
     57c:	49 c0       	rjmp	.+146    	; 0x610 <_ZN11SimpleTimer8setTimerElPFvvEi+0xce>
	if (numTimers >= MAX_TIMERS) {
		return -1;
	}

	// return the first slot with no callback (i.e. free)
	for (i = 0; i < MAX_TIMERS; i++) {
     57e:	21 96       	adiw	r28, 0x01	; 1
     580:	32 96       	adiw	r30, 0x02	; 2
     582:	ca 30       	cpi	r28, 0x0A	; 10
     584:	d1 05       	cpc	r29, r1
     586:	b1 f7       	brne	.-20     	; 0x574 <_ZN11SimpleTimer8setTimerElPFvvEi+0x32>
     588:	39 c0       	rjmp	.+114    	; 0x5fc <_ZN11SimpleTimer8setTimerElPFvvEi+0xba>

	if (f == NULL) {
		return -1;
	}

	delays[freeTimer] = d;
     58a:	fe 01       	movw	r30, r28
     58c:	3f 96       	adiw	r30, 0x0f	; 15
     58e:	ee 0f       	add	r30, r30
     590:	ff 1f       	adc	r31, r31
     592:	ee 0f       	add	r30, r30
     594:	ff 1f       	adc	r31, r31
     596:	ee 0d       	add	r30, r14
     598:	ff 1d       	adc	r31, r15
     59a:	40 83       	st	Z, r20
     59c:	51 83       	std	Z+1, r21	; 0x01
     59e:	62 83       	std	Z+2, r22	; 0x02
     5a0:	73 83       	std	Z+3, r23	; 0x03
	callbacks[freeTimer] = f;
     5a2:	fe 01       	movw	r30, r28
     5a4:	74 96       	adiw	r30, 0x14	; 20
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	ee 0d       	add	r30, r14
     5ac:	ff 1d       	adc	r31, r15
     5ae:	31 83       	std	Z+1, r19	; 0x01
     5b0:	20 83       	st	Z, r18
	maxNumRuns[freeTimer] = n;
     5b2:	fe 01       	movw	r30, r28
     5b4:	f2 96       	adiw	r30, 0x32	; 50
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	ee 0d       	add	r30, r14
     5bc:	ff 1d       	adc	r31, r15
     5be:	11 83       	std	Z+1, r17	; 0x01
     5c0:	00 83       	st	Z, r16
	enabled[freeTimer] = true;
     5c2:	f7 01       	movw	r30, r14
     5c4:	ec 0f       	add	r30, r28
     5c6:	fd 1f       	adc	r31, r29
     5c8:	e4 57       	subi	r30, 0x74	; 116
     5ca:	ff 4f       	sbci	r31, 0xFF	; 255
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	80 83       	st	Z, r24
#include "SimpleTimer.h"

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() {
	return millis();
     5d0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <millis>

	delays[freeTimer] = d;
	callbacks[freeTimer] = f;
	maxNumRuns[freeTimer] = n;
	enabled[freeTimer] = true;
	prev_millis[freeTimer] = elapsed();
     5d4:	fe 01       	movw	r30, r28
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	ee 0d       	add	r30, r14
     5e0:	ff 1d       	adc	r31, r15
     5e2:	60 83       	st	Z, r22
     5e4:	71 83       	std	Z+1, r23	; 0x01
     5e6:	82 83       	std	Z+2, r24	; 0x02
     5e8:	93 83       	std	Z+3, r25	; 0x03

	numTimers++;
     5ea:	f7 01       	movw	r30, r14
     5ec:	e6 55       	subi	r30, 0x56	; 86
     5ee:	ff 4f       	sbci	r31, 0xFF	; 255
     5f0:	80 81       	ld	r24, Z
     5f2:	91 81       	ldd	r25, Z+1	; 0x01
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	91 83       	std	Z+1, r25	; 0x01
     5f8:	80 83       	st	Z, r24
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <_ZN11SimpleTimer8setTimerElPFvvEi+0xbe>

	return freeTimer;
     5fc:	cf ef       	ldi	r28, 0xFF	; 255
     5fe:	df ef       	ldi	r29, 0xFF	; 255
}
     600:	ce 01       	movw	r24, r28
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	08 95       	ret
	freeTimer = findFirstFreeSlot();
	if (freeTimer < 0) {
		return -1;
	}

	if (f == NULL) {
     610:	21 15       	cp	r18, r1
     612:	31 05       	cpc	r19, r1
     614:	09 f0       	breq	.+2      	; 0x618 <_ZN11SimpleTimer8setTimerElPFvvEi+0xd6>
     616:	b9 cf       	rjmp	.-142    	; 0x58a <_ZN11SimpleTimer8setTimerElPFvvEi+0x48>
     618:	f1 cf       	rjmp	.-30     	; 0x5fc <_ZN11SimpleTimer8setTimerElPFvvEi+0xba>

0000061a <_ZN11SimpleTimer10setTimeoutElPFvvE>:

int SimpleTimer::setInterval(long d, timer_callback f) {
	return setTimer(d, f, RUN_FOREVER);
}

int SimpleTimer::setTimeout(long d, timer_callback f) {
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
	return setTimer(d, f, RUN_ONCE);
     61e:	01 e0       	ldi	r16, 0x01	; 1
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN11SimpleTimer8setTimerElPFvvEi>
}
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	08 95       	ret

0000062c <_ZN11SimpleTimer11setIntervalElPFvvE>:
	numTimers++;

	return freeTimer;
}

int SimpleTimer::setInterval(long d, timer_callback f) {
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
	return setTimer(d, f, RUN_FOREVER);
     630:	00 e0       	ldi	r16, 0x00	; 0
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	0e 94 a1 02 	call	0x542	; 0x542 <_ZN11SimpleTimer8setTimerElPFvvEi>
}
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	08 95       	ret

0000063e <_ZN11SimpleTimer3runEv>:
	}

	numTimers = 0;
}

void SimpleTimer::run() {
     63e:	2f 92       	push	r2
     640:	3f 92       	push	r3
     642:	4f 92       	push	r4
     644:	5f 92       	push	r5
     646:	6f 92       	push	r6
     648:	7f 92       	push	r7
     64a:	8f 92       	push	r8
     64c:	9f 92       	push	r9
     64e:	af 92       	push	r10
     650:	bf 92       	push	r11
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	6c 01       	movw	r12, r24
#include "SimpleTimer.h"

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() {
	return millis();
     664:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <millis>
     668:	1b 01       	movw	r2, r22
     66a:	2c 01       	movw	r4, r24
     66c:	f6 01       	movw	r30, r12
     66e:	ea 56       	subi	r30, 0x6A	; 106
     670:	ff 4f       	sbci	r31, 0xFF	; 255
     672:	b6 01       	movw	r22, r12
     674:	3c e8       	ldi	r19, 0x8C	; 140
     676:	63 2e       	mov	r6, r19
     678:	71 2c       	mov	r7, r1
     67a:	6c 0c       	add	r6, r12
     67c:	7d 1c       	adc	r7, r13
     67e:	e6 01       	movw	r28, r12
     680:	cc 59       	subi	r28, 0x9C	; 156
     682:	df 4f       	sbci	r29, 0xFF	; 255
     684:	43 01       	movw	r8, r6
     686:	aa 24       	eor	r10, r10
     688:	bb 24       	eor	r11, r11
	// get current time
	current_millis = elapsed();

	for (i = 0; i < MAX_TIMERS; i++) {

		toBeCalled[i] = DEFCALL_DONTRUN;
     68a:	11 82       	std	Z+1, r1	; 0x01
     68c:	10 82       	st	Z, r1

		// no callback == no timer, i.e. jump over empty slots
		if (callbacks[i]) {
     68e:	ee 56       	subi	r30, 0x6E	; 110
     690:	f0 40       	sbci	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	e2 59       	subi	r30, 0x92	; 146
     698:	ff 4f       	sbci	r31, 0xFF	; 255
     69a:	89 2b       	or	r24, r25
     69c:	09 f4       	brne	.+2      	; 0x6a0 <_ZN11SimpleTimer3runEv+0x62>
     69e:	40 c0       	rjmp	.+128    	; 0x720 <_ZN11SimpleTimer3runEv+0xe2>

			// is it time to process this timer ?
			// see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

			if (current_millis - prev_millis[i] >= delays[i]) {
     6a0:	db 01       	movw	r26, r22
     6a2:	ed 90       	ld	r14, X+
     6a4:	fd 90       	ld	r15, X+
     6a6:	0d 91       	ld	r16, X+
     6a8:	1c 91       	ld	r17, X
     6aa:	13 97       	sbiw	r26, 0x03	; 3
     6ac:	dc 96       	adiw	r26, 0x3c	; 60
     6ae:	2d 91       	ld	r18, X+
     6b0:	3d 91       	ld	r19, X+
     6b2:	4d 91       	ld	r20, X+
     6b4:	5c 91       	ld	r21, X
     6b6:	df 97       	sbiw	r26, 0x3f	; 63
     6b8:	d2 01       	movw	r26, r4
     6ba:	c1 01       	movw	r24, r2
     6bc:	8e 19       	sub	r24, r14
     6be:	9f 09       	sbc	r25, r15
     6c0:	a0 0b       	sbc	r26, r16
     6c2:	b1 0b       	sbc	r27, r17
     6c4:	82 17       	cp	r24, r18
     6c6:	93 07       	cpc	r25, r19
     6c8:	a4 07       	cpc	r26, r20
     6ca:	b5 07       	cpc	r27, r21
     6cc:	48 f1       	brcs	.+82     	; 0x720 <_ZN11SimpleTimer3runEv+0xe2>

				// update time
				//prev_millis[i] = current_millis;
				prev_millis[i] += delays[i];
     6ce:	2e 0d       	add	r18, r14
     6d0:	3f 1d       	adc	r19, r15
     6d2:	40 1f       	adc	r20, r16
     6d4:	51 1f       	adc	r21, r17
     6d6:	db 01       	movw	r26, r22
     6d8:	2d 93       	st	X+, r18
     6da:	3d 93       	st	X+, r19
     6dc:	4d 93       	st	X+, r20
     6de:	5c 93       	st	X, r21
     6e0:	13 97       	sbiw	r26, 0x03	; 3

				// check if the timer callback has to be executed
				if (enabled[i]) {
     6e2:	d4 01       	movw	r26, r8
     6e4:	8c 91       	ld	r24, X
     6e6:	88 23       	and	r24, r24
     6e8:	d9 f0       	breq	.+54     	; 0x720 <_ZN11SimpleTimer3runEv+0xe2>

					// "run forever" timers must always be executed
					if (maxNumRuns[i] == RUN_FOREVER) {
     6ea:	28 81       	ld	r18, Y
     6ec:	39 81       	ldd	r19, Y+1	; 0x01
     6ee:	21 15       	cp	r18, r1
     6f0:	31 05       	cpc	r19, r1
     6f2:	19 f4       	brne	.+6      	; 0x6fa <_ZN11SimpleTimer3runEv+0xbc>
						toBeCalled[i] = DEFCALL_RUNONLY;
     6f4:	41 e0       	ldi	r20, 0x01	; 1
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	11 c0       	rjmp	.+34     	; 0x71c <_ZN11SimpleTimer3runEv+0xde>
					}
					// other timers get executed the specified number of times
					else if (numRuns[i] < maxNumRuns[i]) {
     6fa:	8c 89       	ldd	r24, Y+20	; 0x14
     6fc:	9d 89       	ldd	r25, Y+21	; 0x15
     6fe:	82 17       	cp	r24, r18
     700:	93 07       	cpc	r25, r19
     702:	74 f4       	brge	.+28     	; 0x720 <_ZN11SimpleTimer3runEv+0xe2>
						toBeCalled[i] = DEFCALL_RUNONLY;
     704:	a1 e0       	ldi	r26, 0x01	; 1
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	b1 83       	std	Z+1, r27	; 0x01
     70a:	a0 83       	st	Z, r26
						numRuns[i]++;
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	9d 8b       	std	Y+21, r25	; 0x15
     710:	8c 8b       	std	Y+20, r24	; 0x14

						// after the last run, delete the timer
						if (numRuns[i] >= maxNumRuns[i]) {
     712:	82 17       	cp	r24, r18
     714:	93 07       	cpc	r25, r19
     716:	24 f0       	brlt	.+8      	; 0x720 <_ZN11SimpleTimer3runEv+0xe2>
							toBeCalled[i] = DEFCALL_RUNANDDEL;
     718:	42 e0       	ldi	r20, 0x02	; 2
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	51 83       	std	Z+1, r21	; 0x01
     71e:	40 83       	st	Z, r20
	unsigned long current_millis;

	// get current time
	current_millis = elapsed();

	for (i = 0; i < MAX_TIMERS; i++) {
     720:	08 94       	sec
     722:	a1 1c       	adc	r10, r1
     724:	b1 1c       	adc	r11, r1
     726:	32 96       	adiw	r30, 0x02	; 2
     728:	6c 5f       	subi	r22, 0xFC	; 252
     72a:	7f 4f       	sbci	r23, 0xFF	; 255
     72c:	08 94       	sec
     72e:	81 1c       	adc	r8, r1
     730:	91 1c       	adc	r9, r1
     732:	22 96       	adiw	r28, 0x02	; 2
     734:	5a e0       	ldi	r21, 0x0A	; 10
     736:	a5 16       	cp	r10, r21
     738:	b1 04       	cpc	r11, r1
     73a:	09 f0       	breq	.+2      	; 0x73e <_ZN11SimpleTimer3runEv+0x100>
     73c:	a6 cf       	rjmp	.-180    	; 0x68a <_ZN11SimpleTimer3runEv+0x4c>
     73e:	e6 01       	movw	r28, r12
     740:	a8 96       	adiw	r28, 0x28	; 40
     742:	2c e3       	ldi	r18, 0x3C	; 60
     744:	e2 2e       	mov	r14, r18
     746:	f1 2c       	mov	r15, r1
     748:	ec 0c       	add	r14, r12
     74a:	fd 1c       	adc	r15, r13
     74c:	86 01       	movw	r16, r12
     74e:	08 58       	subi	r16, 0x88	; 136
     750:	1f 4f       	sbci	r17, 0xFF	; 255
	if (timerId >= MAX_TIMERS) {
		return;
	}

	// nothing to delete if no timers are in use
	if (numTimers == 0) {
     752:	8a ea       	ldi	r24, 0xAA	; 170
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	c8 0e       	add	r12, r24
     758:	d9 1e       	adc	r13, r25
				}
			}
		}
	}

	for (i = 0; i < MAX_TIMERS; i++) {
     75a:	57 01       	movw	r10, r14
		switch (toBeCalled[i]) {
     75c:	d8 01       	movw	r26, r16
     75e:	5e 96       	adiw	r26, 0x1e	; 30
     760:	8d 91       	ld	r24, X+
     762:	9c 91       	ld	r25, X
     764:	5f 97       	sbiw	r26, 0x1f	; 31
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	91 05       	cpc	r25, r1
     76a:	19 f0       	breq	.+6      	; 0x772 <_ZN11SimpleTimer3runEv+0x134>
     76c:	02 97       	sbiw	r24, 0x02	; 2
     76e:	19 f5       	brne	.+70     	; 0x7b6 <_ZN11SimpleTimer3runEv+0x178>
     770:	04 c0       	rjmp	.+8      	; 0x77a <_ZN11SimpleTimer3runEv+0x13c>
		case DEFCALL_DONTRUN:
			break;

		case DEFCALL_RUNONLY:
			(*callbacks[i])();
     772:	e8 81       	ld	r30, Y
     774:	f9 81       	ldd	r31, Y+1	; 0x01
     776:	09 95       	icall
     778:	1e c0       	rjmp	.+60     	; 0x7b6 <_ZN11SimpleTimer3runEv+0x178>
			break;

		case DEFCALL_RUNANDDEL:
			(*callbacks[i])();
     77a:	e8 81       	ld	r30, Y
     77c:	f9 81       	ldd	r31, Y+1	; 0x01
     77e:	09 95       	icall
	if (timerId >= MAX_TIMERS) {
		return;
	}

	// nothing to delete if no timers are in use
	if (numTimers == 0) {
     780:	f6 01       	movw	r30, r12
     782:	20 81       	ld	r18, Z
     784:	31 81       	ldd	r19, Z+1	; 0x01
     786:	21 15       	cp	r18, r1
     788:	31 05       	cpc	r19, r1
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <_ZN11SimpleTimer3runEv+0x178>
		return;
	}

	// don't decrease the number of timers if the
	// specified slot is already empty
	if (callbacks[timerId] != NULL) {
     78c:	88 81       	ld	r24, Y
     78e:	99 81       	ldd	r25, Y+1	; 0x01
     790:	89 2b       	or	r24, r25
     792:	89 f0       	breq	.+34     	; 0x7b6 <_ZN11SimpleTimer3runEv+0x178>
		callbacks[timerId] = 0;
     794:	19 82       	std	Y+1, r1	; 0x01
     796:	18 82       	st	Y, r1
		enabled[timerId] = false;
     798:	d3 01       	movw	r26, r6
     79a:	1c 92       	st	X, r1
		delays[timerId] = 0;
     79c:	f7 01       	movw	r30, r14
     79e:	10 82       	st	Z, r1
     7a0:	11 82       	std	Z+1, r1	; 0x01
     7a2:	12 82       	std	Z+2, r1	; 0x02
     7a4:	13 82       	std	Z+3, r1	; 0x03
		numRuns[timerId] = 0;
     7a6:	d8 01       	movw	r26, r16
     7a8:	1d 92       	st	X+, r1
     7aa:	1c 92       	st	X, r1

		// update number of timers
		numTimers--;
     7ac:	21 50       	subi	r18, 0x01	; 1
     7ae:	30 40       	sbci	r19, 0x00	; 0
     7b0:	f6 01       	movw	r30, r12
     7b2:	31 83       	std	Z+1, r19	; 0x01
     7b4:	20 83       	st	Z, r18
     7b6:	22 96       	adiw	r28, 0x02	; 2
     7b8:	08 94       	sec
     7ba:	61 1c       	adc	r6, r1
     7bc:	71 1c       	adc	r7, r1
     7be:	44 e0       	ldi	r20, 0x04	; 4
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	e4 0e       	add	r14, r20
     7c4:	f5 1e       	adc	r15, r21
     7c6:	0e 5f       	subi	r16, 0xFE	; 254
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		}
	}

	for (i = 0; i < MAX_TIMERS; i++) {
     7ca:	ca 15       	cp	r28, r10
     7cc:	db 05       	cpc	r29, r11
     7ce:	31 f6       	brne	.-116    	; 0x75c <_ZN11SimpleTimer3runEv+0x11e>
			(*callbacks[i])();
			deleteTimer(i);
			break;
		}
	}
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	bf 90       	pop	r11
     7e2:	af 90       	pop	r10
     7e4:	9f 90       	pop	r9
     7e6:	8f 90       	pop	r8
     7e8:	7f 90       	pop	r7
     7ea:	6f 90       	pop	r6
     7ec:	5f 90       	pop	r5
     7ee:	4f 90       	pop	r4
     7f0:	3f 90       	pop	r3
     7f2:	2f 90       	pop	r2
     7f4:	08 95       	ret

000007f6 <_ZN11SimpleTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() {
	return millis();
}

SimpleTimer::SimpleTimer() {
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	ec 01       	movw	r28, r24
#include "SimpleTimer.h"

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() {
	return millis();
     800:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <millis>
     804:	ae 01       	movw	r20, r28
     806:	44 57       	subi	r20, 0x74	; 116
     808:	5f 4f       	sbci	r21, 0xFF	; 255
     80a:	fe 01       	movw	r30, r28
     80c:	b8 96       	adiw	r30, 0x28	; 40
     80e:	8e 01       	movw	r16, r28
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0

SimpleTimer::SimpleTimer() {
	unsigned long current_millis = elapsed();

	for (int i = 0; i < MAX_TIMERS; i++) {
		enabled[i] = false;
     814:	da 01       	movw	r26, r20
     816:	1d 92       	st	X+, r1
     818:	ad 01       	movw	r20, r26
		callbacks[i] = 0; // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
     81a:	11 82       	std	Z+1, r1	; 0x01
     81c:	10 82       	st	Z, r1
		prev_millis[i] = current_millis;
     81e:	d8 01       	movw	r26, r16
     820:	6d 93       	st	X+, r22
     822:	7d 93       	st	X+, r23
     824:	8d 93       	st	X+, r24
     826:	9d 93       	st	X+, r25
     828:	8d 01       	movw	r16, r26
		numRuns[i] = 0;
     82a:	e0 5b       	subi	r30, 0xB0	; 176
     82c:	ff 4f       	sbci	r31, 0xFF	; 255
     82e:	11 82       	std	Z+1, r1	; 0x01
     830:	10 82       	st	Z, r1
}

SimpleTimer::SimpleTimer() {
	unsigned long current_millis = elapsed();

	for (int i = 0; i < MAX_TIMERS; i++) {
     832:	2f 5f       	subi	r18, 0xFF	; 255
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	ee 54       	subi	r30, 0x4E	; 78
     838:	f0 40       	sbci	r31, 0x00	; 0
     83a:	2a 30       	cpi	r18, 0x0A	; 10
     83c:	31 05       	cpc	r19, r1
     83e:	51 f7       	brne	.-44     	; 0x814 <_ZN11SimpleTimerC1Ev+0x1e>
		callbacks[i] = 0; // if the callback pointer is zero, the slot is free, i.e. doesn't "contain" any timer
		prev_millis[i] = current_millis;
		numRuns[i] = 0;
	}

	numTimers = 0;
     840:	c6 55       	subi	r28, 0x56	; 86
     842:	df 4f       	sbci	r29, 0xFF	; 255
     844:	19 82       	std	Y+1, r1	; 0x01
     846:	18 82       	st	Y, r1
}
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <_ZN12MatrixDriverC1Ev>:
#include "MatrixDriver.h"
#include "Font.h"

const int ICON_SMILEY = 97;

MatrixDriver::MatrixDriver() {
     852:	fc 01       	movw	r30, r24
  this->current_char = ' ';
     854:	e0 58       	subi	r30, 0x80	; 128
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	80 e2       	ldi	r24, 0x20	; 32
     85a:	81 93       	st	Z+, r24
  this->next_char = ' ';
     85c:	81 93       	st	Z+, r24
  this->single_column = 0;
     85e:	11 92       	st	Z+, r1
     860:	11 92       	st	Z+, r1
  this->multi_column = 0;
     862:	11 92       	st	Z+, r1
     864:	11 92       	st	Z+, r1
  this->full_column = 0;
     866:	11 92       	st	Z+, r1
     868:	11 92       	st	Z+, r1
  this->single_text_length = 0;
     86a:	11 92       	st	Z+, r1
     86c:	11 92       	st	Z+, r1
  this->multi_text_length = 0;
     86e:	11 92       	st	Z+, r1
     870:	11 92       	st	Z+, r1
  this->single_loop_count = 0;
     872:	11 92       	st	Z+, r1
     874:	11 92       	st	Z+, r1
  this->loops = 0;
     876:	11 92       	st	Z+, r1
     878:	11 92       	st	Z+, r1
  this->position = 0;
     87a:	11 92       	st	Z+, r1
     87c:	11 92       	st	Z+, r1
  this->mode = 0;
     87e:	11 92       	st	Z+, r1
     880:	11 92       	st	Z+, r1
  this->next_mode = 0;
     882:	11 92       	st	Z+, r1
     884:	11 92       	st	Z+, r1
  this->single_char_pos = 0;
     886:	11 92       	st	Z+, r1
     888:	11 92       	st	Z+, r1
  this->multi_char_pos = 0;
     88a:	11 82       	std	Z+1, r1	; 0x01
     88c:	10 82       	st	Z, r1
  this->scroll_enabled = false;
     88e:	34 96       	adiw	r30, 0x04	; 4
     890:	11 92       	st	Z+, r1
  this->score = 0;
     892:	11 92       	st	Z+, r1
     894:	11 92       	st	Z+, r1
  this->turbo = 0;
     896:	11 82       	std	Z+1, r1	; 0x01
     898:	10 82       	st	Z, r1
  this->step_count = 0;
     89a:	35 97       	sbiw	r30, 0x05	; 5
     89c:	11 82       	std	Z+1, r1	; 0x01
     89e:	10 82       	st	Z, r1
}
     8a0:	08 95       	ret

000008a2 <_ZN12MatrixDriver15setPlayerStatusEii>:
  this->next_char = ' ';
  this->setCurrentChars();
  this->fillDisplay();
}

void MatrixDriver::setPlayerStatus(int score, int turbo) {
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	ec 01       	movw	r28, r24
     8ac:	9b 01       	movw	r18, r22
     8ae:	8a 01       	movw	r16, r20
  if (this->mode != 1) {
     8b0:	fc 01       	movw	r30, r24
     8b2:	ee 56       	subi	r30, 0x6E	; 110
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <_ZN12MatrixDriver15setPlayerStatusEii+0x1e>
     8be:	6e c0       	rjmp	.+220    	; 0x99c <__stack+0x9d>
    this->scroll_enabled = false;
     8c0:	c4 56       	subi	r28, 0x64	; 100
     8c2:	df 4f       	sbci	r29, 0xFF	; 255
     8c4:	19 92       	st	Y+, r1
    this->mode = 3;
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	91 83       	std	Z+1, r25	; 0x01
     8cc:	80 83       	st	Z, r24
    this->score = score;
     8ce:	69 93       	st	Y+, r22
     8d0:	79 93       	st	Y+, r23
    this->turbo = turbo;
     8d2:	59 83       	std	Y+1, r21	; 0x01
     8d4:	48 83       	st	Y, r20
     8d6:	cf 59       	subi	r28, 0x9F	; 159
     8d8:	d0 40       	sbci	r29, 0x00	; 0

    for (int c = 2; c >= 0; c--) {
      this->display[c + 5] = pgm_read_byte(&font_3x5[score / 10][2 - c]);
     8da:	cb 01       	movw	r24, r22
     8dc:	6a e0       	ldi	r22, 0x0A	; 10
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	0e 94 ba 14 	call	0x2974	; 0x2974 <__divmodhi4>
     8e4:	fb 01       	movw	r30, r22
      this->display[c] = pgm_read_byte(&font_3x5[score % 10][2 - c]);
     8e6:	c9 01       	movw	r24, r18
     8e8:	6a e0       	ldi	r22, 0x0A	; 10
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	0e 94 ba 14 	call	0x2974	; 0x2974 <__divmodhi4>
     8f0:	9c 01       	movw	r18, r24
     8f2:	de 01       	movw	r26, r28
     8f4:	a6 58       	subi	r26, 0x86	; 134
     8f6:	bf 4f       	sbci	r27, 0xFF	; 255
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
    this->mode = 3;
    this->score = score;
    this->turbo = turbo;

    for (int c = 2; c >= 0; c--) {
      this->display[c + 5] = pgm_read_byte(&font_3x5[score / 10][2 - c]);
     8fc:	af 01       	movw	r20, r30
     8fe:	44 0f       	add	r20, r20
     900:	55 1f       	adc	r21, r21
     902:	4e 0f       	add	r20, r30
     904:	5f 1f       	adc	r21, r31
      this->display[c] = pgm_read_byte(&font_3x5[score % 10][2 - c]);
     906:	b9 01       	movw	r22, r18
     908:	66 0f       	add	r22, r22
     90a:	77 1f       	adc	r23, r23
     90c:	62 0f       	add	r22, r18
     90e:	73 1f       	adc	r23, r19
    this->mode = 3;
    this->score = score;
    this->turbo = turbo;

    for (int c = 2; c >= 0; c--) {
      this->display[c + 5] = pgm_read_byte(&font_3x5[score / 10][2 - c]);
     910:	fc 01       	movw	r30, r24
     912:	e4 0f       	add	r30, r20
     914:	f5 1f       	adc	r31, r21
     916:	e8 58       	subi	r30, 0x88	; 136
     918:	fc 4f       	sbci	r31, 0xFC	; 252
     91a:	e4 91       	lpm	r30, Z+
     91c:	15 96       	adiw	r26, 0x05	; 5
     91e:	ec 93       	st	X, r30
     920:	15 97       	sbiw	r26, 0x05	; 5
      this->display[c] = pgm_read_byte(&font_3x5[score % 10][2 - c]);
     922:	fc 01       	movw	r30, r24
     924:	e6 0f       	add	r30, r22
     926:	f7 1f       	adc	r31, r23
     928:	e8 58       	subi	r30, 0x88	; 136
     92a:	fc 4f       	sbci	r31, 0xFC	; 252
     92c:	e4 91       	lpm	r30, Z+
     92e:	ec 93       	st	X, r30
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	11 97       	sbiw	r26, 0x01	; 1
    this->scroll_enabled = false;
    this->mode = 3;
    this->score = score;
    this->turbo = turbo;

    for (int c = 2; c >= 0; c--) {
     934:	83 30       	cpi	r24, 0x03	; 3
     936:	91 05       	cpc	r25, r1
     938:	59 f7       	brne	.-42     	; 0x910 <__stack+0x11>
      this->display[c + 5] = pgm_read_byte(&font_3x5[score / 10][2 - c]);
      this->display[c] = pgm_read_byte(&font_3x5[score % 10][2 - c]);
    }
    this->display[3] = 0;
     93a:	c5 58       	subi	r28, 0x85	; 133
     93c:	df 4f       	sbci	r29, 0xFF	; 255
     93e:	19 92       	st	Y+, r1
    this->display[4] = 0;
     940:	18 82       	st	Y, r1
     942:	cc 57       	subi	r28, 0x7C	; 124
     944:	d0 40       	sbci	r29, 0x00	; 0

    //SET TURBO LEDS
    int t = 7;
    for (; t > 7 - (turbo * 8 / 100); t--) {
     946:	c8 01       	movw	r24, r16
     948:	23 e0       	ldi	r18, 0x03	; 3
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	2a 95       	dec	r18
     950:	e1 f7       	brne	.-8      	; 0x94a <__stack+0x4b>
     952:	6c e9       	ldi	r22, 0x9C	; 156
     954:	7f ef       	ldi	r23, 0xFF	; 255
     956:	0e 94 ba 14 	call	0x2974	; 0x2974 <__divmodhi4>
     95a:	69 5f       	subi	r22, 0xF9	; 249
     95c:	7f 4f       	sbci	r23, 0xFF	; 255
     95e:	fe 01       	movw	r30, r28
     960:	e1 58       	subi	r30, 0x81	; 129
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	27 e0       	ldi	r18, 0x07	; 7
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	06 c0       	rjmp	.+12     	; 0x976 <__stack+0x77>
      bitSet(this->display[t], 1);
     96a:	80 81       	ld	r24, Z
      bitSet(this->display[t], 0);
     96c:	83 60       	ori	r24, 0x03	; 3
     96e:	80 83       	st	Z, r24
    this->display[3] = 0;
    this->display[4] = 0;

    //SET TURBO LEDS
    int t = 7;
    for (; t > 7 - (turbo * 8 / 100); t--) {
     970:	21 50       	subi	r18, 0x01	; 1
     972:	30 40       	sbci	r19, 0x00	; 0
     974:	31 97       	sbiw	r30, 0x01	; 1
     976:	62 17       	cp	r22, r18
     978:	73 07       	cpc	r23, r19
     97a:	bc f3       	brlt	.-18     	; 0x96a <__stack+0x6b>
     97c:	28 58       	subi	r18, 0x88	; 136
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	fe 01       	movw	r30, r28
     982:	e2 0f       	add	r30, r18
     984:	f3 1f       	adc	r31, r19
     986:	28 57       	subi	r18, 0x78	; 120
     988:	30 40       	sbci	r19, 0x00	; 0
     98a:	06 c0       	rjmp	.+12     	; 0x998 <__stack+0x99>
      bitSet(this->display[t], 1);
      bitSet(this->display[t], 0);
    }
    for (; t >= 0; t--) {
      bitClear(this->display[t], 1);
     98c:	80 81       	ld	r24, Z
      bitClear(this->display[t], 0);
     98e:	8c 7f       	andi	r24, 0xFC	; 252
     990:	80 83       	st	Z, r24
    int t = 7;
    for (; t > 7 - (turbo * 8 / 100); t--) {
      bitSet(this->display[t], 1);
      bitSet(this->display[t], 0);
    }
    for (; t >= 0; t--) {
     992:	21 50       	subi	r18, 0x01	; 1
     994:	30 40       	sbci	r19, 0x00	; 0
     996:	31 97       	sbiw	r30, 0x01	; 1
     998:	37 ff       	sbrs	r19, 7
     99a:	f8 cf       	rjmp	.-16     	; 0x98c <__stack+0x8d>
      bitClear(this->display[t], 1);
      bitClear(this->display[t], 0);
    }
  }
}
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	08 95       	ret

000009a6 <_ZN12MatrixDriver8setTurboEi>:

void MatrixDriver::clearDisplay() {
  this->setStaticText(' ');
}

void MatrixDriver::setTurbo(int turbo) {
     9a6:	fc 01       	movw	r30, r24
     9a8:	ab 01       	movw	r20, r22
  this->turbo = turbo;
     9aa:	e1 56       	subi	r30, 0x61	; 97
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	71 83       	std	Z+1, r23	; 0x01
     9b0:	60 83       	st	Z, r22
  if (this->mode == 3) {
     9b2:	3d 97       	sbiw	r30, 0x0d	; 13
     9b4:	80 81       	ld	r24, Z
     9b6:	91 81       	ldd	r25, Z+1	; 0x01
     9b8:	e2 59       	subi	r30, 0x92	; 146
     9ba:	f0 40       	sbci	r31, 0x00	; 0
     9bc:	03 97       	sbiw	r24, 0x03	; 3
     9be:	49 f4       	brne	.+18     	; 0x9d2 <_ZN12MatrixDriver8setTurboEi+0x2c>
    this->setPlayerStatus(this->score, turbo);
     9c0:	e3 56       	subi	r30, 0x63	; 99
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	60 81       	ld	r22, Z
     9c6:	71 81       	ldd	r23, Z+1	; 0x01
     9c8:	ed 59       	subi	r30, 0x9D	; 157
     9ca:	f0 40       	sbci	r31, 0x00	; 0
     9cc:	cf 01       	movw	r24, r30
     9ce:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN12MatrixDriver15setPlayerStatusEii>
     9d2:	08 95       	ret

000009d4 <_ZN12MatrixDriver15setCurrentCharsEv>:
  }
}

void MatrixDriver::setCurrentChars() {
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	ec 01       	movw	r28, r24
  if (mode == 1) {
     9da:	ce 56       	subi	r28, 0x6E	; 110
     9dc:	df 4f       	sbci	r29, 0xFF	; 255
     9de:	88 81       	ld	r24, Y
     9e0:	99 81       	ldd	r25, Y+1	; 0x01
     9e2:	c2 59       	subi	r28, 0x92	; 146
     9e4:	d0 40       	sbci	r29, 0x00	; 0
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	91 05       	cpc	r25, r1
     9ea:	01 f5       	brne	.+64     	; 0xa2c <_ZN12MatrixDriver15setCurrentCharsEv+0x58>
    this->current_char = this->single_text[this->single_char_pos];
     9ec:	de 01       	movw	r26, r28
     9ee:	a0 58       	subi	r26, 0x80	; 128
     9f0:	bf 4f       	sbci	r27, 0xFF	; 255
     9f2:	ca 56       	subi	r28, 0x6A	; 106
     9f4:	df 4f       	sbci	r29, 0xFF	; 255
     9f6:	28 81       	ld	r18, Y
     9f8:	39 81       	ldd	r19, Y+1	; 0x01
     9fa:	c6 59       	subi	r28, 0x96	; 150
     9fc:	d0 40       	sbci	r29, 0x00	; 0
     9fe:	fe 01       	movw	r30, r28
     a00:	e2 0f       	add	r30, r18
     a02:	f3 1f       	adc	r31, r19
     a04:	80 81       	ld	r24, Z
     a06:	8c 93       	st	X, r24
    if (this->single_char_pos + 1 < this->single_text_length){
     a08:	f9 01       	movw	r30, r18
     a0a:	31 96       	adiw	r30, 0x01	; 1
     a0c:	c8 57       	subi	r28, 0x78	; 120
     a0e:	df 4f       	sbci	r29, 0xFF	; 255
     a10:	88 81       	ld	r24, Y
     a12:	99 81       	ldd	r25, Y+1	; 0x01
     a14:	c8 58       	subi	r28, 0x88	; 136
     a16:	d0 40       	sbci	r29, 0x00	; 0
     a18:	de 01       	movw	r26, r28
     a1a:	af 57       	subi	r26, 0x7F	; 127
     a1c:	bf 4f       	sbci	r27, 0xFF	; 255
     a1e:	e8 17       	cp	r30, r24
     a20:	f9 07       	cpc	r31, r25
     a22:	44 f5       	brge	.+80     	; 0xa74 <_ZN12MatrixDriver15setCurrentCharsEv+0xa0>
      this->next_char = this->single_text[this->single_char_pos + 1];
     a24:	ec 0f       	add	r30, r28
     a26:	fd 1f       	adc	r31, r29
     a28:	80 81       	ld	r24, Z
     a2a:	25 c0       	rjmp	.+74     	; 0xa76 <_ZN12MatrixDriver15setCurrentCharsEv+0xa2>
    else{
      this->next_char = ' ';
    }

  }
  else if (mode == 2) {
     a2c:	02 97       	sbiw	r24, 0x02	; 2
     a2e:	51 f5       	brne	.+84     	; 0xa84 <_ZN12MatrixDriver15setCurrentCharsEv+0xb0>
    if (this->multi_char_pos >= 0) {
     a30:	c8 56       	subi	r28, 0x68	; 104
     a32:	df 4f       	sbci	r29, 0xFF	; 255
     a34:	28 81       	ld	r18, Y
     a36:	39 81       	ldd	r19, Y+1	; 0x01
     a38:	c8 59       	subi	r28, 0x98	; 152
     a3a:	d0 40       	sbci	r29, 0x00	; 0
     a3c:	de 01       	movw	r26, r28
     a3e:	a0 58       	subi	r26, 0x80	; 128
     a40:	bf 4f       	sbci	r27, 0xFF	; 255
     a42:	37 fd       	sbrc	r19, 7
     a44:	1a c0       	rjmp	.+52     	; 0xa7a <_ZN12MatrixDriver15setCurrentCharsEv+0xa6>
      this->current_char = this->multi_text[this->multi_char_pos];
     a46:	fe 01       	movw	r30, r28
     a48:	e2 0f       	add	r30, r18
     a4a:	f3 1f       	adc	r31, r19
     a4c:	84 ad       	ldd	r24, Z+60	; 0x3c
     a4e:	8c 93       	st	X, r24
      if (this->multi_char_pos + 1 < this->multi_text_length){
     a50:	f9 01       	movw	r30, r18
     a52:	31 96       	adiw	r30, 0x01	; 1
     a54:	c6 57       	subi	r28, 0x76	; 118
     a56:	df 4f       	sbci	r29, 0xFF	; 255
     a58:	88 81       	ld	r24, Y
     a5a:	99 81       	ldd	r25, Y+1	; 0x01
     a5c:	ca 58       	subi	r28, 0x8A	; 138
     a5e:	d0 40       	sbci	r29, 0x00	; 0
     a60:	de 01       	movw	r26, r28
     a62:	af 57       	subi	r26, 0x7F	; 127
     a64:	bf 4f       	sbci	r27, 0xFF	; 255
     a66:	e8 17       	cp	r30, r24
     a68:	f9 07       	cpc	r31, r25
     a6a:	24 f4       	brge	.+8      	; 0xa74 <_ZN12MatrixDriver15setCurrentCharsEv+0xa0>
        this->next_char = this->multi_text[this->multi_char_pos + 1];
     a6c:	ec 0f       	add	r30, r28
     a6e:	fd 1f       	adc	r31, r29
     a70:	84 ad       	ldd	r24, Z+60	; 0x3c
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <_ZN12MatrixDriver15setCurrentCharsEv+0xa2>
      }
      else{
        this->next_char =  ' ';
     a74:	80 e2       	ldi	r24, 0x20	; 32
     a76:	8c 93       	st	X, r24
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <_ZN12MatrixDriver15setCurrentCharsEv+0xb0>
      }
    }
    else {
      this->current_char = ' ';
     a7a:	80 e2       	ldi	r24, 0x20	; 32
     a7c:	8c 93       	st	X, r24
      this->next_char = ' ';
     a7e:	cf 57       	subi	r28, 0x7F	; 127
     a80:	df 4f       	sbci	r29, 0xFF	; 255
     a82:	88 83       	st	Y, r24
    }
  }
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <_ZN12MatrixDriver11fillDisplayEv>:

void MatrixDriver::fillDisplay() {
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	dc 01       	movw	r26, r24
  if (this->mode < 3) {
     a92:	ae 56       	subi	r26, 0x6E	; 110
     a94:	bf 4f       	sbci	r27, 0xFF	; 255
     a96:	8d 91       	ld	r24, X+
     a98:	9c 91       	ld	r25, X
     a9a:	11 97       	sbiw	r26, 0x01	; 1
     a9c:	a2 59       	subi	r26, 0x92	; 146
     a9e:	b0 40       	sbci	r27, 0x00	; 0
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	91 05       	cpc	r25, r1
     aa4:	0c f0       	brlt	.+2      	; 0xaa8 <_ZN12MatrixDriver11fillDisplayEv+0x1e>
     aa6:	5f c0       	rjmp	.+190    	; 0xb66 <_ZN12MatrixDriver11fillDisplayEv+0xdc>
    int char_pos = 0;
    int max = 0;
    if (this->mode == 1) {
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	91 05       	cpc	r25, r1
     aac:	41 f4       	brne	.+16     	; 0xabe <_ZN12MatrixDriver11fillDisplayEv+0x34>
      char_pos = this->single_column;
     aae:	ae 57       	subi	r26, 0x7E	; 126
     ab0:	bf 4f       	sbci	r27, 0xFF	; 255
     ab2:	2d 91       	ld	r18, X+
     ab4:	3c 91       	ld	r19, X
     ab6:	11 97       	sbiw	r26, 0x01	; 1
     ab8:	a2 58       	subi	r26, 0x82	; 130
     aba:	b0 40       	sbci	r27, 0x00	; 0
     abc:	0e c0       	rjmp	.+28     	; 0xada <_ZN12MatrixDriver11fillDisplayEv+0x50>
      max = this->single_column;
    }
    else if (this->mode == 2) {
     abe:	02 97       	sbiw	r24, 0x02	; 2
     ac0:	29 f0       	breq	.+10     	; 0xacc <_ZN12MatrixDriver11fillDisplayEv+0x42>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	08 c0       	rjmp	.+16     	; 0xadc <_ZN12MatrixDriver11fillDisplayEv+0x52>
      char_pos = this->multi_column;
     acc:	ac 57       	subi	r26, 0x7C	; 124
     ace:	bf 4f       	sbci	r27, 0xFF	; 255
     ad0:	2d 91       	ld	r18, X+
     ad2:	3c 91       	ld	r19, X
     ad4:	11 97       	sbiw	r26, 0x01	; 1
     ad6:	a4 58       	subi	r26, 0x84	; 132
     ad8:	b0 40       	sbci	r27, 0x00	; 0
     ada:	a9 01       	movw	r20, r18
     adc:	ed 01       	movw	r28, r26
     ade:	c1 58       	subi	r28, 0x81	; 129
     ae0:	df 4f       	sbci	r29, 0xFF	; 255
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	90 e0       	ldi	r25, 0x00	; 0
      max = 0;
    }

    int c = 7;
    for (; c >= max; c--) {
      this->display[c] = pgm_read_byte(&font_8x8[this->current_char - ' '][char_pos]);
     ae6:	bd 01       	movw	r22, r26
     ae8:	60 58       	subi	r22, 0x80	; 128
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	16 c0       	rjmp	.+44     	; 0xb1a <_ZN12MatrixDriver11fillDisplayEv+0x90>
     aee:	fb 01       	movw	r30, r22
     af0:	10 81       	ld	r17, Z
     af2:	e1 2f       	mov	r30, r17
     af4:	ff 27       	eor	r31, r31
     af6:	e7 fd       	sbrc	r30, 7
     af8:	f0 95       	com	r31
     afa:	b0 97       	sbiw	r30, 0x20	; 32
     afc:	13 e0       	ldi	r17, 0x03	; 3
     afe:	ee 0f       	add	r30, r30
     b00:	ff 1f       	adc	r31, r31
     b02:	1a 95       	dec	r17
     b04:	e1 f7       	brne	.-8      	; 0xafe <_ZN12MatrixDriver11fillDisplayEv+0x74>
     b06:	e2 0f       	add	r30, r18
     b08:	f3 1f       	adc	r31, r19
     b0a:	e8 59       	subi	r30, 0x98	; 152
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	e4 91       	lpm	r30, Z+
     b10:	e8 83       	st	Y, r30
      char_pos++;
     b12:	2f 5f       	subi	r18, 0xFF	; 255
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
      char_pos = 0;
      max = 0;
    }

    int c = 7;
    for (; c >= max; c--) {
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	21 97       	sbiw	r28, 0x01	; 1
     b1a:	84 17       	cp	r24, r20
     b1c:	95 07       	cpc	r25, r21
     b1e:	3c f7       	brge	.-50     	; 0xaee <_ZN12MatrixDriver11fillDisplayEv+0x64>
     b20:	88 58       	subi	r24, 0x88	; 136
     b22:	9f 4f       	sbci	r25, 0xFF	; 255
     b24:	ed 01       	movw	r28, r26
     b26:	c8 0f       	add	r28, r24
     b28:	d9 1f       	adc	r29, r25
     b2a:	88 57       	subi	r24, 0x78	; 120
     b2c:	90 40       	sbci	r25, 0x00	; 0
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
      this->display[c] = pgm_read_byte(&font_8x8[this->current_char - ' '][char_pos]);
      char_pos++;
    }
    char_pos = 0;
    for (; c >= 0; c--) {
      this->display[c] = pgm_read_byte(&font_8x8[this->next_char - ' '][char_pos]);
     b32:	af 57       	subi	r26, 0x7F	; 127
     b34:	bf 4f       	sbci	r27, 0xFF	; 255
     b36:	14 c0       	rjmp	.+40     	; 0xb60 <_ZN12MatrixDriver11fillDisplayEv+0xd6>
     b38:	ec 91       	ld	r30, X
     b3a:	ff 27       	eor	r31, r31
     b3c:	e7 fd       	sbrc	r30, 7
     b3e:	f0 95       	com	r31
     b40:	b0 97       	sbiw	r30, 0x20	; 32
     b42:	73 e0       	ldi	r23, 0x03	; 3
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	7a 95       	dec	r23
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <_ZN12MatrixDriver11fillDisplayEv+0xba>
     b4c:	e2 0f       	add	r30, r18
     b4e:	f3 1f       	adc	r31, r19
     b50:	e8 59       	subi	r30, 0x98	; 152
     b52:	ff 4f       	sbci	r31, 0xFF	; 255
     b54:	e4 91       	lpm	r30, Z+
     b56:	e8 83       	st	Y, r30
      char_pos++;
     b58:	2f 5f       	subi	r18, 0xFF	; 255
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    for (; c >= max; c--) {
      this->display[c] = pgm_read_byte(&font_8x8[this->current_char - ' '][char_pos]);
      char_pos++;
    }
    char_pos = 0;
    for (; c >= 0; c--) {
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	21 97       	sbiw	r28, 0x01	; 1
     b60:	97 ff       	sbrs	r25, 7
     b62:	ea cf       	rjmp	.-44     	; 0xb38 <_ZN12MatrixDriver11fillDisplayEv+0xae>
     b64:	0c c0       	rjmp	.+24     	; 0xb7e <_ZN12MatrixDriver11fillDisplayEv+0xf4>
      this->display[c] = pgm_read_byte(&font_8x8[this->next_char - ' '][char_pos]);
      char_pos++;
    }
  }
  else {
    this->setPlayerStatus(this->score, this->turbo);
     b66:	a3 56       	subi	r26, 0x63	; 99
     b68:	bf 4f       	sbci	r27, 0xFF	; 255
     b6a:	6d 91       	ld	r22, X+
     b6c:	7d 91       	ld	r23, X+
     b6e:	4d 91       	ld	r20, X+
     b70:	5c 91       	ld	r21, X
     b72:	11 97       	sbiw	r26, 0x01	; 1
     b74:	af 59       	subi	r26, 0x9F	; 159
     b76:	b0 40       	sbci	r27, 0x00	; 0
     b78:	cd 01       	movw	r24, r26
     b7a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN12MatrixDriver15setPlayerStatusEii>
  }

}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	08 95       	ret

00000b86 <_ZN12MatrixDriver13setStaticTextEc>:
  this->multi_char_pos = -1 * this->position;
  this->setCurrentChars();
  this->fillDisplay();
}

void MatrixDriver::setStaticText(char c) {
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	8c 01       	movw	r16, r24
  this->scroll_enabled = false;
     b8c:	04 56       	subi	r16, 0x64	; 100
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	f8 01       	movw	r30, r16
     b92:	10 82       	st	Z, r1
  this->mode = 0;
     b94:	0a 50       	subi	r16, 0x0A	; 10
     b96:	10 40       	sbci	r17, 0x00	; 0
     b98:	f8 01       	movw	r30, r16
     b9a:	11 82       	std	Z+1, r1	; 0x01
     b9c:	10 82       	st	Z, r1
  this->current_char = c;
     b9e:	02 51       	subi	r16, 0x12	; 18
     ba0:	10 40       	sbci	r17, 0x00	; 0
     ba2:	f8 01       	movw	r30, r16
     ba4:	61 93       	st	Z+, r22
     ba6:	8f 01       	movw	r16, r30
  this->next_char = ' ';
     ba8:	80 e2       	ldi	r24, 0x20	; 32
     baa:	80 83       	st	Z, r24
     bac:	01 58       	subi	r16, 0x81	; 129
     bae:	10 40       	sbci	r17, 0x00	; 0
  this->setCurrentChars();
     bb0:	c8 01       	movw	r24, r16
     bb2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN12MatrixDriver15setCurrentCharsEv>
  this->fillDisplay();
     bb6:	c8 01       	movw	r24, r16
     bb8:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN12MatrixDriver11fillDisplayEv>
}
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <_ZN12MatrixDriver11setPositionEi>:
  }

}

void MatrixDriver::setPosition(int pos) {
  this->position = pos;
     bc2:	fc 01       	movw	r30, r24
     bc4:	e0 57       	subi	r30, 0x70	; 112
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	71 83       	std	Z+1, r23	; 0x01
     bca:	60 83       	st	Z, r22
}
     bcc:	08 95       	ret

00000bce <_ZN12MatrixDriver6scrollEv>:
void MatrixDriver::enableMultiScrolling() {
  this->mode = 2;
  this->scroll_enabled = true;
}

void MatrixDriver::scroll() {
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	ec 01       	movw	r28, r24
  if (this->mode != 2){
     bd4:	bc 01       	movw	r22, r24
     bd6:	6e 56       	subi	r22, 0x6E	; 110
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	fb 01       	movw	r30, r22
     bdc:	40 81       	ld	r20, Z
     bde:	51 81       	ldd	r21, Z+1	; 0x01
     be0:	42 30       	cpi	r20, 0x02	; 2
     be2:	51 05       	cpc	r21, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <_ZN12MatrixDriver6scrollEv+0x1a>
     be6:	44 c0       	rjmp	.+136    	; 0xc70 <_ZN12MatrixDriver6scrollEv+0xa2>
    this->single_column++;
     be8:	fc 01       	movw	r30, r24
     bea:	ee 57       	subi	r30, 0x7E	; 126
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	80 81       	ld	r24, Z
     bf0:	91 81       	ldd	r25, Z+1	; 0x01
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
//    this->single_column++;
    if (this->single_column >= 8) {
     bf8:	08 97       	sbiw	r24, 0x08	; 8
     bfa:	0c f4       	brge	.+2      	; 0xbfe <_ZN12MatrixDriver6scrollEv+0x30>
     bfc:	68 c0       	rjmp	.+208    	; 0xcce <_ZN12MatrixDriver6scrollEv+0x100>
      this->single_column = 0;
     bfe:	11 82       	std	Z+1, r1	; 0x01
     c00:	10 82       	st	Z, r1
      this->single_char_pos++;
     c02:	de 01       	movw	r26, r28
     c04:	aa 56       	subi	r26, 0x6A	; 106
     c06:	bf 4f       	sbci	r27, 0xFF	; 255
     c08:	8d 91       	ld	r24, X+
     c0a:	9c 91       	ld	r25, X
     c0c:	11 97       	sbiw	r26, 0x01	; 1
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	11 96       	adiw	r26, 0x01	; 1
     c12:	9c 93       	st	X, r25
     c14:	8e 93       	st	-X, r24
      if (this->single_char_pos >= this->single_text_length) {
     c16:	c8 57       	subi	r28, 0x78	; 120
     c18:	df 4f       	sbci	r29, 0xFF	; 255
     c1a:	28 81       	ld	r18, Y
     c1c:	39 81       	ldd	r19, Y+1	; 0x01
     c1e:	c8 58       	subi	r28, 0x88	; 136
     c20:	d0 40       	sbci	r29, 0x00	; 0
     c22:	82 17       	cp	r24, r18
     c24:	93 07       	cpc	r25, r19
     c26:	04 f1       	brlt	.+64     	; 0xc68 <_ZN12MatrixDriver6scrollEv+0x9a>
        this->loops++;
     c28:	fe 01       	movw	r30, r28
     c2a:	e2 57       	subi	r30, 0x72	; 114
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	20 81       	ld	r18, Z
     c30:	31 81       	ldd	r19, Z+1	; 0x01
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	31 83       	std	Z+1, r19	; 0x01
     c38:	20 83       	st	Z, r18
        this->single_char_pos = 0;
     c3a:	1d 92       	st	X+, r1
     c3c:	1c 92       	st	X, r1
        if (this->mode == 1 && this->loops >= this->single_loop_count) {
     c3e:	41 30       	cpi	r20, 0x01	; 1
     c40:	51 05       	cpc	r21, r1
     c42:	91 f4       	brne	.+36     	; 0xc68 <_ZN12MatrixDriver6scrollEv+0x9a>
     c44:	c4 57       	subi	r28, 0x74	; 116
     c46:	df 4f       	sbci	r29, 0xFF	; 255
     c48:	88 81       	ld	r24, Y
     c4a:	99 81       	ldd	r25, Y+1	; 0x01
     c4c:	cc 58       	subi	r28, 0x8C	; 140
     c4e:	d0 40       	sbci	r29, 0x00	; 0
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	4c f0       	brlt	.+18     	; 0xc68 <_ZN12MatrixDriver6scrollEv+0x9a>
          this->mode = this->next_mode;
     c56:	cc 56       	subi	r28, 0x6C	; 108
     c58:	df 4f       	sbci	r29, 0xFF	; 255
     c5a:	88 81       	ld	r24, Y
     c5c:	99 81       	ldd	r25, Y+1	; 0x01
     c5e:	c4 59       	subi	r28, 0x94	; 148
     c60:	d0 40       	sbci	r29, 0x00	; 0
     c62:	fb 01       	movw	r30, r22
     c64:	91 83       	std	Z+1, r25	; 0x01
     c66:	80 83       	st	Z, r24
        }
      }
      this->setCurrentChars();
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN12MatrixDriver15setCurrentCharsEv>
     c6e:	2f c0       	rjmp	.+94     	; 0xcce <_ZN12MatrixDriver6scrollEv+0x100>
    }
  }
  else if(this->step_count % 2 == 0){
     c70:	c6 56       	subi	r28, 0x66	; 102
     c72:	df 4f       	sbci	r29, 0xFF	; 255
     c74:	88 81       	ld	r24, Y
     c76:	ca 59       	subi	r28, 0x9A	; 154
     c78:	d0 40       	sbci	r29, 0x00	; 0
     c7a:	80 fd       	sbrc	r24, 0
     c7c:	28 c0       	rjmp	.+80     	; 0xcce <_ZN12MatrixDriver6scrollEv+0x100>
    this->multi_column++;
     c7e:	fe 01       	movw	r30, r28
     c80:	ec 57       	subi	r30, 0x7C	; 124
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
    if (this->multi_column >= 8) {
     c8e:	08 97       	sbiw	r24, 0x08	; 8
     c90:	c4 f0       	brlt	.+48     	; 0xcc2 <_ZN12MatrixDriver6scrollEv+0xf4>
      this->multi_column = 0;
     c92:	11 82       	std	Z+1, r1	; 0x01
     c94:	10 82       	st	Z, r1
      this->multi_char_pos++;
     c96:	fe 01       	movw	r30, r28
     c98:	e8 56       	subi	r30, 0x68	; 104
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	80 81       	ld	r24, Z
     c9e:	91 81       	ldd	r25, Z+1	; 0x01
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	91 83       	std	Z+1, r25	; 0x01
     ca4:	80 83       	st	Z, r24
      if (this->multi_char_pos >= this->multi_text_length) {
     ca6:	c6 57       	subi	r28, 0x76	; 118
     ca8:	df 4f       	sbci	r29, 0xFF	; 255
     caa:	28 81       	ld	r18, Y
     cac:	39 81       	ldd	r19, Y+1	; 0x01
     cae:	ca 58       	subi	r28, 0x8A	; 138
     cb0:	d0 40       	sbci	r29, 0x00	; 0
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	14 f0       	brlt	.+4      	; 0xcbc <_ZN12MatrixDriver6scrollEv+0xee>
        this->multi_char_pos = 0;
     cb8:	11 82       	std	Z+1, r1	; 0x01
     cba:	10 82       	st	Z, r1
      }
      this->setCurrentChars();
     cbc:	ce 01       	movw	r24, r28
     cbe:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN12MatrixDriver15setCurrentCharsEv>
    }
    this->step_count = 0;
     cc2:	c6 56       	subi	r28, 0x66	; 102
     cc4:	df 4f       	sbci	r29, 0xFF	; 255
     cc6:	19 82       	std	Y+1, r1	; 0x01
     cc8:	18 82       	st	Y, r1
     cca:	ca 59       	subi	r28, 0x9A	; 154
     ccc:	d0 40       	sbci	r29, 0x00	; 0
  }
  if (scroll_enabled) {
     cce:	c4 56       	subi	r28, 0x64	; 100
     cd0:	df 4f       	sbci	r29, 0xFF	; 255
     cd2:	88 81       	ld	r24, Y
     cd4:	cc 59       	subi	r28, 0x9C	; 156
     cd6:	d0 40       	sbci	r29, 0x00	; 0
     cd8:	88 23       	and	r24, r24
     cda:	19 f0       	breq	.+6      	; 0xce2 <_ZN12MatrixDriver6scrollEv+0x114>
    this->fillDisplay();
     cdc:	ce 01       	movw	r24, r28
     cde:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN12MatrixDriver11fillDisplayEv>
  }
  this->step_count++;
     ce2:	fe 01       	movw	r30, r28
     ce4:	e6 56       	subi	r30, 0x66	; 102
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	80 83       	st	Z, r24
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <_ZN12MatrixDriver9getColumnEi>:

byte MatrixDriver::getColumn(int c) {
     cf8:	fb 01       	movw	r30, r22
     cfa:	e8 0f       	add	r30, r24
     cfc:	f9 1f       	adc	r31, r25
     cfe:	e8 58       	subi	r30, 0x88	; 136
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
  return this->display[c];
}
     d02:	80 81       	ld	r24, Z
     d04:	08 95       	ret

00000d06 <_ZN12MatrixDriver17setMultiScrollingEPci>:
  this->single_char_pos = 0;
  this->setCurrentChars();
  this->fillDisplay();
}

void MatrixDriver::setMultiScrolling(char *text, int size) {
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	8c 01       	movw	r16, r24
     d10:	7a 01       	movw	r14, r20
  this->scroll_enabled = true;
     d12:	04 56       	subi	r16, 0x64	; 100
     d14:	1f 4f       	sbci	r17, 0xFF	; 255
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	d8 01       	movw	r26, r16
     d1a:	8c 93       	st	X, r24
  this->mode = 2;
     d1c:	0a 50       	subi	r16, 0x0A	; 10
     d1e:	10 40       	sbci	r17, 0x00	; 0
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	f8 01       	movw	r30, r16
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	80 83       	st	Z, r24
     d2a:	02 59       	subi	r16, 0x92	; 146
     d2c:	10 40       	sbci	r17, 0x00	; 0
  strcpy(this->multi_text, text);
     d2e:	c8 01       	movw	r24, r16
     d30:	cc 96       	adiw	r24, 0x3c	; 60
     d32:	0e 94 85 02 	call	0x50a	; 0x50a <strcpy>
  this->multi_text_length = size - 1;
     d36:	06 57       	subi	r16, 0x76	; 118
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	08 94       	sec
     d3c:	e1 08       	sbc	r14, r1
     d3e:	f1 08       	sbc	r15, r1
     d40:	d8 01       	movw	r26, r16
     d42:	ed 92       	st	X+, r14
     d44:	fc 92       	st	X, r15
     d46:	0a 58       	subi	r16, 0x8A	; 138
     d48:	10 40       	sbci	r17, 0x00	; 0
  this->multi_char_pos = -1 * this->position;
     d4a:	f8 01       	movw	r30, r16
     d4c:	e8 56       	subi	r30, 0x68	; 104
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	00 57       	subi	r16, 0x70	; 112
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	d8 01       	movw	r26, r16
     d56:	8d 91       	ld	r24, X+
     d58:	9c 91       	ld	r25, X
     d5a:	00 59       	subi	r16, 0x90	; 144
     d5c:	10 40       	sbci	r17, 0x00	; 0
     d5e:	90 95       	com	r25
     d60:	81 95       	neg	r24
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	91 83       	std	Z+1, r25	; 0x01
     d66:	80 83       	st	Z, r24
  this->setCurrentChars();
     d68:	c8 01       	movw	r24, r16
     d6a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN12MatrixDriver15setCurrentCharsEv>
  this->fillDisplay();
     d6e:	c8 01       	movw	r24, r16
     d70:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN12MatrixDriver11fillDisplayEv>
}
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	08 95       	ret

00000d7e <_ZN12MatrixDriver18setSingleScrollingEPcii>:

void MatrixDriver::showPosition() {
  this->setStaticNumber(this->position);
}

void MatrixDriver::setSingleScrolling(char *text, int size, int loops) {
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	ec 01       	movw	r28, r24
     d88:	8a 01       	movw	r16, r20
  if (this->mode != 1 ){
     d8a:	ce 56       	subi	r28, 0x6E	; 110
     d8c:	df 4f       	sbci	r29, 0xFF	; 255
     d8e:	88 81       	ld	r24, Y
     d90:	99 81       	ldd	r25, Y+1	; 0x01
     d92:	c2 59       	subi	r28, 0x92	; 146
     d94:	d0 40       	sbci	r29, 0x00	; 0
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	91 05       	cpc	r25, r1
     d9a:	31 f0       	breq	.+12     	; 0xda8 <_ZN12MatrixDriver18setSingleScrollingEPcii+0x2a>
    this->next_mode = this->mode;
     d9c:	cc 56       	subi	r28, 0x6C	; 108
     d9e:	df 4f       	sbci	r29, 0xFF	; 255
     da0:	99 83       	std	Y+1, r25	; 0x01
     da2:	88 83       	st	Y, r24
     da4:	c4 59       	subi	r28, 0x94	; 148
     da6:	d0 40       	sbci	r29, 0x00	; 0
  }
  this->mode = 1;
     da8:	ce 56       	subi	r28, 0x6E	; 110
     daa:	df 4f       	sbci	r29, 0xFF	; 255
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	99 83       	std	Y+1, r25	; 0x01
     db2:	88 83       	st	Y, r24
  this->loops = 0;
     db4:	24 97       	sbiw	r28, 0x04	; 4
     db6:	19 82       	std	Y+1, r1	; 0x01
     db8:	18 82       	st	Y, r1
  this->single_loop_count = loops;
     dba:	3a 93       	st	-Y, r19
     dbc:	2a 93       	st	-Y, r18
  this->scroll_enabled = true;
     dbe:	60 96       	adiw	r28, 0x10	; 16
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	88 83       	st	Y, r24
     dc4:	cc 59       	subi	r28, 0x9C	; 156
     dc6:	d0 40       	sbci	r29, 0x00	; 0
  strcpy(this->single_text, text);
     dc8:	ce 01       	movw	r24, r28
     dca:	0e 94 85 02 	call	0x50a	; 0x50a <strcpy>
  this->single_text_length = size - 1;
     dce:	c8 57       	subi	r28, 0x78	; 120
     dd0:	df 4f       	sbci	r29, 0xFF	; 255
     dd2:	01 50       	subi	r16, 0x01	; 1
     dd4:	10 40       	sbci	r17, 0x00	; 0
     dd6:	19 83       	std	Y+1, r17	; 0x01
     dd8:	08 83       	st	Y, r16
  this->single_char_pos = 0;
     dda:	2e 96       	adiw	r28, 0x0e	; 14
     ddc:	19 82       	std	Y+1, r1	; 0x01
     dde:	18 82       	st	Y, r1
     de0:	c6 59       	subi	r28, 0x96	; 150
     de2:	d0 40       	sbci	r29, 0x00	; 0
  this->setCurrentChars();
     de4:	ce 01       	movw	r24, r28
     de6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN12MatrixDriver15setCurrentCharsEv>
  this->fillDisplay();
     dea:	ce 01       	movw	r24, r28
     dec:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN12MatrixDriver11fillDisplayEv>
}
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	08 95       	ret

00000dfa <_ZN12LoopingLouie8getTurboEi>:
		return true;
	}
	return false;
}

int LoopingLouie::getTurbo(int id) {
     dfa:	fb 01       	movw	r30, r22
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	e6 0f       	add	r30, r22
     e02:	f7 1f       	adc	r31, r23
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	ee 0f       	add	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	e8 0f       	add	r30, r24
     e0e:	f9 1f       	adc	r31, r25
	return this->players[id].turbo_load;
}
     e10:	85 81       	ldd	r24, Z+5	; 0x05
     e12:	96 81       	ldd	r25, Z+6	; 0x06
     e14:	08 95       	ret

00000e16 <_ZN12LoopingLouie7getLostEi>:

int LoopingLouie::getLost(int id) {
     e16:	fb 01       	movw	r30, r22
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	e6 0f       	add	r30, r22
     e1e:	f7 1f       	adc	r31, r23
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	e8 0f       	add	r30, r24
     e2a:	f9 1f       	adc	r31, r25
	return this->players[id].lost;
}
     e2c:	83 81       	ldd	r24, Z+3	; 0x03
     e2e:	94 81       	ldd	r25, Z+4	; 0x04
     e30:	08 95       	ret

00000e32 <_ZN12LoopingLouie12resetPlayersEv>:
void LoopingLouie::lostChip(int id) {
	this->players[id].chip_count--;
	this->players[id].pending_chip = true;
}

void LoopingLouie::resetPlayers() {
     e32:	dc 01       	movw	r26, r24
     e34:	fc 01       	movw	r30, r24
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
  for (int i = 0; i < this->player_count; i++) {
    this->players[i].turbo_load = 100;
     e3a:	44 e6       	ldi	r20, 0x64	; 100
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <_ZN12LoopingLouie12resetPlayersEv+0x18>
     e40:	56 83       	std	Z+6, r21	; 0x06
     e42:	45 83       	std	Z+5, r20	; 0x05
	this->players[id].chip_count--;
	this->players[id].pending_chip = true;
}

void LoopingLouie::resetPlayers() {
  for (int i = 0; i < this->player_count; i++) {
     e44:	2f 5f       	subi	r18, 0xFF	; 255
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	3c 96       	adiw	r30, 0x0c	; 12
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	11 97       	sbiw	r26, 0x01	; 1
     e50:	28 17       	cp	r18, r24
     e52:	39 07       	cpc	r19, r25
     e54:	ac f3       	brlt	.-22     	; 0xe40 <_ZN12LoopingLouie12resetPlayersEv+0xe>
    this->players[i].turbo_load = 100;
  }
}
     e56:	08 95       	ret

00000e58 <_ZN12LoopingLouie9raiseLostEi>:
void LoopingLouie::deactivatePlayer(int id) {
	this->players[id].active = false;
}

void LoopingLouie::raiseLost(int id) {
	this->players[id].lost++;
     e58:	fb 01       	movw	r30, r22
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	e6 0f       	add	r30, r22
     e60:	f7 1f       	adc	r31, r23
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	e8 0f       	add	r30, r24
     e6c:	f9 1f       	adc	r31, r25
     e6e:	83 81       	ldd	r24, Z+3	; 0x03
     e70:	94 81       	ldd	r25, Z+4	; 0x04
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	94 83       	std	Z+4, r25	; 0x04
     e76:	83 83       	std	Z+3, r24	; 0x03
}
     e78:	08 95       	ret

00000e7a <_ZN12LoopingLouie8useTurboEi>:
			}
		}
	}
}

boolean LoopingLouie::useTurbo(int id) {
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
	if (this->players[id].turbo_load == 100) {
     e7e:	eb 01       	movw	r28, r22
     e80:	cc 0f       	add	r28, r28
     e82:	dd 1f       	adc	r29, r29
     e84:	c6 0f       	add	r28, r22
     e86:	d7 1f       	adc	r29, r23
     e88:	cc 0f       	add	r28, r28
     e8a:	dd 1f       	adc	r29, r29
     e8c:	cc 0f       	add	r28, r28
     e8e:	dd 1f       	adc	r29, r29
     e90:	c8 0f       	add	r28, r24
     e92:	d9 1f       	adc	r29, r25
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	84 36       	cpi	r24, 0x64	; 100
     e9a:	91 05       	cpc	r25, r1
     e9c:	11 f0       	breq	.+4      	; 0xea2 <_ZN12LoopingLouie8useTurboEi+0x28>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <_ZN12LoopingLouie8useTurboEi+0x3a>
		this->players[id].last_turbo = millis();
     ea2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <millis>
     ea6:	6f 83       	std	Y+7, r22	; 0x07
     ea8:	78 87       	std	Y+8, r23	; 0x08
     eaa:	89 87       	std	Y+9, r24	; 0x09
     eac:	9a 87       	std	Y+10, r25	; 0x0a
		this->players[id].turbo_load = 0;
     eae:	1e 82       	std	Y+6, r1	; 0x06
     eb0:	1d 82       	std	Y+5, r1	; 0x05
     eb2:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}
	return false;
}
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <_ZN12LoopingLouieC1Ei>:
const double turbo_reload = 10000;
const int MAX_CHIPS = 3;

//Player players[8];

LoopingLouie::LoopingLouie(int player_count) {
     eba:	af 92       	push	r10
     ebc:	bf 92       	push	r11
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	fc 01       	movw	r30, r24
     ed0:	7b 01       	movw	r14, r22
  this->player_count = player_count;
     ed2:	71 83       	std	Z+1, r23	; 0x01
     ed4:	60 83       	st	Z, r22
     ed6:	ec 01       	movw	r28, r24
     ed8:	00 e0       	ldi	r16, 0x00	; 0
     eda:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0; i < player_count; i++) {
		players[i] = (Player ) { false, 0, 100, millis(), 3, false};
     edc:	44 e6       	ldi	r20, 0x64	; 100
     ede:	a4 2e       	mov	r10, r20
     ee0:	b1 2c       	mov	r11, r1
     ee2:	33 e0       	ldi	r19, 0x03	; 3
     ee4:	c3 2e       	mov	r12, r19
     ee6:	d1 2c       	mov	r13, r1
     ee8:	11 c0       	rjmp	.+34     	; 0xf0c <_ZN12LoopingLouieC1Ei+0x52>
     eea:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <millis>
     eee:	1a 82       	std	Y+2, r1	; 0x02
     ef0:	1c 82       	std	Y+4, r1	; 0x04
     ef2:	1b 82       	std	Y+3, r1	; 0x03
     ef4:	be 82       	std	Y+6, r11	; 0x06
     ef6:	ad 82       	std	Y+5, r10	; 0x05
     ef8:	6f 83       	std	Y+7, r22	; 0x07
     efa:	78 87       	std	Y+8, r23	; 0x08
     efc:	89 87       	std	Y+9, r24	; 0x09
     efe:	9a 87       	std	Y+10, r25	; 0x0a
     f00:	dc 86       	std	Y+12, r13	; 0x0c
     f02:	cb 86       	std	Y+11, r12	; 0x0b
     f04:	1d 86       	std	Y+13, r1	; 0x0d

//Player players[8];

LoopingLouie::LoopingLouie(int player_count) {
  this->player_count = player_count;
	for (int i = 0; i < player_count; i++) {
     f06:	0f 5f       	subi	r16, 0xFF	; 255
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
     f0a:	2c 96       	adiw	r28, 0x0c	; 12
     f0c:	0e 15       	cp	r16, r14
     f0e:	1f 05       	cpc	r17, r15
     f10:	64 f3       	brlt	.-40     	; 0xeea <_ZN12LoopingLouieC1Ei+0x30>
		players[i] = (Player ) { false, 0, 100, millis(), 3, false};
	}
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	bf 90       	pop	r11
     f24:	af 90       	pop	r10
     f26:	08 95       	ret

00000f28 <_ZN12LoopingLouie17updateTurboStatesEv>:

void LoopingLouie::updateTurboStates() {
     f28:	6f 92       	push	r6
     f2a:	7f 92       	push	r7
     f2c:	8f 92       	push	r8
     f2e:	9f 92       	push	r9
     f30:	af 92       	push	r10
     f32:	bf 92       	push	r11
     f34:	cf 92       	push	r12
     f36:	df 92       	push	r13
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	18 2f       	mov	r17, r24
     f46:	09 2f       	mov	r16, r25
	long now = millis();
     f48:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <millis>
     f4c:	4b 01       	movw	r8, r22
     f4e:	5c 01       	movw	r10, r24
     f50:	21 2f       	mov	r18, r17
     f52:	30 2f       	mov	r19, r16
     f54:	c9 01       	movw	r24, r18
     f56:	ec 01       	movw	r28, r24
     f58:	cc 24       	eor	r12, r12
     f5a:	dd 24       	eor	r13, r13
	for (int i = 0; i < 8; i++) {
		if (this->players[i].turbo_load < 100) {
			long diff = now - this->players[i].last_turbo;
			if (diff > turbo_reload) {
				this->players[i].turbo_load = 100;
     f5c:	74 e6       	ldi	r23, 0x64	; 100
     f5e:	67 2e       	mov	r6, r23
     f60:	71 2c       	mov	r7, r1
}

void LoopingLouie::updateTurboStates() {
	long now = millis();
	for (int i = 0; i < 8; i++) {
		if (this->players[i].turbo_load < 100) {
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	84 36       	cpi	r24, 0x64	; 100
     f68:	91 05       	cpc	r25, r1
     f6a:	7c f5       	brge	.+94     	; 0xfca <_ZN12LoopingLouie17updateTurboStatesEv+0xa2>
			long diff = now - this->players[i].last_turbo;
			if (diff > turbo_reload) {
     f6c:	8f 81       	ldd	r24, Y+7	; 0x07
     f6e:	98 85       	ldd	r25, Y+8	; 0x08
     f70:	a9 85       	ldd	r26, Y+9	; 0x09
     f72:	ba 85       	ldd	r27, Y+10	; 0x0a
     f74:	a5 01       	movw	r20, r10
     f76:	94 01       	movw	r18, r8
     f78:	28 1b       	sub	r18, r24
     f7a:	39 0b       	sbc	r19, r25
     f7c:	4a 0b       	sbc	r20, r26
     f7e:	5b 0b       	sbc	r21, r27
     f80:	ca 01       	movw	r24, r20
     f82:	b9 01       	movw	r22, r18
     f84:	0e 94 42 13 	call	0x2684	; 0x2684 <__floatsisf>
     f88:	7b 01       	movw	r14, r22
     f8a:	8c 01       	movw	r16, r24
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e4       	ldi	r19, 0x40	; 64
     f90:	4c e1       	ldi	r20, 0x1C	; 28
     f92:	56 e4       	ldi	r21, 0x46	; 70
     f94:	0e 94 34 14 	call	0x2868	; 0x2868 <__gesf2>
     f98:	18 16       	cp	r1, r24
     f9a:	1c f4       	brge	.+6      	; 0xfa2 <_ZN12LoopingLouie17updateTurboStatesEv+0x7a>
				this->players[i].turbo_load = 100;
     f9c:	7e 82       	std	Y+6, r7	; 0x06
     f9e:	6d 82       	std	Y+5, r6	; 0x05
     fa0:	14 c0       	rjmp	.+40     	; 0xfca <_ZN12LoopingLouie17updateTurboStatesEv+0xa2>
			} else {
				this->players[i].turbo_load = ceil((diff / turbo_reload * 100));
     fa2:	c8 01       	movw	r24, r16
     fa4:	b7 01       	movw	r22, r14
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e4       	ldi	r19, 0x40	; 64
     faa:	4c e1       	ldi	r20, 0x1C	; 28
     fac:	56 e4       	ldi	r21, 0x46	; 70
     fae:	0e 94 a7 12 	call	0x254e	; 0x254e <__divsf3>
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	48 ec       	ldi	r20, 0xC8	; 200
     fb8:	52 e4       	ldi	r21, 0x42	; 66
     fba:	0e 94 38 14 	call	0x2870	; 0x2870 <__mulsf3>
     fbe:	0e 94 94 12 	call	0x2528	; 0x2528 <ceil>
     fc2:	0e 94 0f 13 	call	0x261e	; 0x261e <__fixsfsi>
     fc6:	7e 83       	std	Y+6, r23	; 0x06
     fc8:	6d 83       	std	Y+5, r22	; 0x05
	}
}

void LoopingLouie::updateTurboStates() {
	long now = millis();
	for (int i = 0; i < 8; i++) {
     fca:	08 94       	sec
     fcc:	c1 1c       	adc	r12, r1
     fce:	d1 1c       	adc	r13, r1
     fd0:	2c 96       	adiw	r28, 0x0c	; 12
     fd2:	38 e0       	ldi	r19, 0x08	; 8
     fd4:	c3 16       	cp	r12, r19
     fd6:	d1 04       	cpc	r13, r1
     fd8:	21 f6       	brne	.-120    	; 0xf62 <_ZN12LoopingLouie17updateTurboStatesEv+0x3a>
			} else {
				this->players[i].turbo_load = ceil((diff / turbo_reload * 100));
			}
		}
	}
}
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	bf 90       	pop	r11
     fec:	af 90       	pop	r10
     fee:	9f 90       	pop	r9
     ff0:	8f 90       	pop	r8
     ff2:	7f 90       	pop	r7
     ff4:	6f 90       	pop	r6
     ff6:	08 95       	ret

00000ff8 <_ZNK10QueueArrayIiE4exitEPKc>:
  printer = &p;
}

// exit report method in case of error.
template<typename T>
void QueueArray<T>::exit (const char * m) const {
     ff8:	fc 01       	movw	r30, r24
  // print the message if there is a printer.
  if (printer)
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	11 f0       	breq	.+4      	; 0x1006 <_ZNK10QueueArrayIiE4exitEPKc+0xe>
    printer->println (m);
    1002:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <_ZN5Print7printlnEPKc>

// led blinking method in case of error.
template<typename T>
void QueueArray<T>::blink () const {
  // set led pin as output.
  pinMode (ledPin, OUTPUT);
    1006:	8d e0       	ldi	r24, 0x0D	; 13
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <pinMode>

  // continue looping until hardware reset.
  while (true) {
    digitalWrite (ledPin, HIGH); // sets the LED on.
    100e:	8d e0       	ldi	r24, 0x0D	; 13
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
    delay (250);                 // pauses 1/4 of second.
    1016:	6a ef       	ldi	r22, 0xFA	; 250
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <delay>
    digitalWrite (ledPin, LOW);  // sets the LED off.
    1022:	8d e0       	ldi	r24, 0x0D	; 13
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
    delay (250);                 // pauses 1/4 of second.
    102a:	6a ef       	ldi	r22, 0xFA	; 250
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 78 10 	call	0x20f0	; 0x20f0 <delay>
    1036:	eb cf       	rjmp	.-42     	; 0x100e <_ZNK10QueueArrayIiE4exitEPKc+0x16>

00001038 <_ZN10QueueArrayIiEC1Ev>:
    int tail;        // the tail of the queue.
};

// init the queue (constructor).
template<typename T>
QueueArray<T>::QueueArray () {
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ec 01       	movw	r28, r24
  size = 0;       // set the size of queue to zero.
    103e:	1d 82       	std	Y+5, r1	; 0x05
    1040:	1c 82       	std	Y+4, r1	; 0x04
  items = 0;      // set the number of items of queue to zero.
    1042:	1f 82       	std	Y+7, r1	; 0x07
    1044:	1e 82       	std	Y+6, r1	; 0x06

  head = 0;       // set the head of the queue to zero.
    1046:	19 86       	std	Y+9, r1	; 0x09
    1048:	18 86       	std	Y+8, r1	; 0x08
  tail = 0;       // set the tail of the queue to zero.
    104a:	1b 86       	std	Y+11, r1	; 0x0b
    104c:	1a 86       	std	Y+10, r1	; 0x0a

  printer = NULL; // set the printer of queue to point nowhere.
    104e:	19 82       	std	Y+1, r1	; 0x01
    1050:	18 82       	st	Y, r1

  // allocate enough memory for the array.
  contents = (T *) malloc (sizeof (T) * initialSize);
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <malloc>
    105a:	9b 83       	std	Y+3, r25	; 0x03
    105c:	8a 83       	std	Y+2, r24	; 0x02

  // if there is a memory allocation error.
  if (contents == NULL)
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	29 f4       	brne	.+10     	; 0x106c <_ZN10QueueArrayIiEC1Ev+0x34>
    exit ("QUEUE: insufficient memory to initialize queue.");
    1062:	ce 01       	movw	r24, r28
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	71 e0       	ldi	r23, 0x01	; 1
    1068:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZNK10QueueArrayIiE4exitEPKc>

  // set the initial size of the queue.
  size = initialSize;
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9d 83       	std	Y+5, r25	; 0x05
    1072:	8c 83       	std	Y+4, r24	; 0x04
}
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <_Z41__static_initialization_and_destruction_0ii>:
    }
    else if ((player_input & B00000001) && game_state == GAME_CHECK_PLAYERS){
      player_status[p] = CHIP_INACTIVE;
    }
  }
}
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	91 05       	cpc	r25, r1
    107e:	79 f5       	brne	.+94     	; 0x10de <_Z41__static_initialization_and_destruction_0ii+0x64>
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	09 f0       	breq	.+2      	; 0x1088 <_Z41__static_initialization_and_destruction_0ii+0xe>
    1086:	6d c0       	rjmp	.+218    	; 0x1162 <_Z41__static_initialization_and_destruction_0ii+0xe8>
int game_state = GAME_BOOT;

int random_speed_timer;
int random_direction_timer;

QueueArray<int> chip_pending;
    1088:	87 e5       	ldi	r24, 0x57	; 87
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	0e 94 1c 08 	call	0x1038	; 0x1038 <_ZN10QueueArrayIiEC1Ev>
QueueArray<int> game_lost;
    1090:	83 e6       	ldi	r24, 0x63	; 99
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	0e 94 1c 08 	call	0x1038	; 0x1038 <_ZN10QueueArrayIiEC1Ev>
int CHIP_ACTIVE = 1;
int CHIP_PENDING = 2;
int CHIP_LOST = 3;
int CHIP_INACTIVE = 4;

int player_status[DISPLAY_COUNT] = { CHIP_INACTIVE };
    1098:	80 91 44 02 	lds	r24, 0x0244
    109c:	90 91 45 02 	lds	r25, 0x0245
    10a0:	90 93 70 02 	sts	0x0270, r25
    10a4:	80 93 6f 02 	sts	0x026F, r24

// SET PROG VARS
MatrixDriver displays[DISPLAY_COUNT];
    10a8:	87 e7       	ldi	r24, 0x77	; 119
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	0e 94 29 04 	call	0x852	; 0x852 <_ZN12MatrixDriverC1Ev>
    10b0:	88 e1       	ldi	r24, 0x18	; 24
    10b2:	93 e0       	ldi	r25, 0x03	; 3
    10b4:	0e 94 29 04 	call	0x852	; 0x852 <_ZN12MatrixDriverC1Ev>
    10b8:	89 eb       	ldi	r24, 0xB9	; 185
    10ba:	93 e0       	ldi	r25, 0x03	; 3
    10bc:	0e 94 29 04 	call	0x852	; 0x852 <_ZN12MatrixDriverC1Ev>
    10c0:	8a e5       	ldi	r24, 0x5A	; 90
    10c2:	94 e0       	ldi	r25, 0x04	; 4
    10c4:	0e 94 29 04 	call	0x852	; 0x852 <_ZN12MatrixDriverC1Ev>

// GAME
LoopingLouie game(DISPLAY_COUNT);
    10c8:	8b ef       	ldi	r24, 0xFB	; 251
    10ca:	94 e0       	ldi	r25, 0x04	; 4
    10cc:	64 e0       	ldi	r22, 0x04	; 4
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    10d0:	0e 94 5d 07 	call	0xeba	; 0xeba <_ZN12LoopingLouieC1Ei>
// CHIP CHECKER
long chip_check[DISPLAY_COUNT] = { 0 };

// SCHEDULER
//looper scheduler;
SimpleTimer scheduler;
    10d4:	8d e5       	ldi	r24, 0x5D	; 93
    10d6:	95 e0       	ldi	r25, 0x05	; 5
    10d8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_ZN11SimpleTimerC1Ev>
    10dc:	08 95       	ret
    10de:	89 2b       	or	r24, r25
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    10e2:	3f c0       	rjmp	.+126    	; 0x1162 <_Z41__static_initialization_and_destruction_0ii+0xe8>
    10e4:	6f 5f       	subi	r22, 0xFF	; 255
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	e1 f5       	brne	.+120    	; 0x1162 <_Z41__static_initialization_and_destruction_0ii+0xe8>

// clear the queue (destructor).
template<typename T>
QueueArray<T>::~QueueArray () {
  free (contents); // deallocate the array of the queue.
    10ea:	80 91 65 02 	lds	r24, 0x0265
    10ee:	90 91 66 02 	lds	r25, 0x0266
    10f2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <free>

  contents = NULL; // set queue's array pointer to nowhere.
    10f6:	10 92 66 02 	sts	0x0266, r1
    10fa:	10 92 65 02 	sts	0x0265, r1
  printer = NULL;  // set the printer of queue to point nowhere.
    10fe:	10 92 64 02 	sts	0x0264, r1
    1102:	10 92 63 02 	sts	0x0263, r1

  size = 0;        // set the size of queue to zero.
    1106:	10 92 68 02 	sts	0x0268, r1
    110a:	10 92 67 02 	sts	0x0267, r1
  items = 0;       // set the number of items of queue to zero.
    110e:	10 92 6a 02 	sts	0x026A, r1
    1112:	10 92 69 02 	sts	0x0269, r1

  head = 0;        // set the head of the queue to zero.
    1116:	10 92 6c 02 	sts	0x026C, r1
    111a:	10 92 6b 02 	sts	0x026B, r1
  tail = 0;        // set the tail of the queue to zero.
    111e:	10 92 6e 02 	sts	0x026E, r1
    1122:	10 92 6d 02 	sts	0x026D, r1
}

// clear the queue (destructor).
template<typename T>
QueueArray<T>::~QueueArray () {
  free (contents); // deallocate the array of the queue.
    1126:	80 91 59 02 	lds	r24, 0x0259
    112a:	90 91 5a 02 	lds	r25, 0x025A
    112e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <free>

  contents = NULL; // set queue's array pointer to nowhere.
    1132:	10 92 5a 02 	sts	0x025A, r1
    1136:	10 92 59 02 	sts	0x0259, r1
  printer = NULL;  // set the printer of queue to point nowhere.
    113a:	10 92 58 02 	sts	0x0258, r1
    113e:	10 92 57 02 	sts	0x0257, r1

  size = 0;        // set the size of queue to zero.
    1142:	10 92 5c 02 	sts	0x025C, r1
    1146:	10 92 5b 02 	sts	0x025B, r1
  items = 0;       // set the number of items of queue to zero.
    114a:	10 92 5e 02 	sts	0x025E, r1
    114e:	10 92 5d 02 	sts	0x025D, r1

  head = 0;        // set the head of the queue to zero.
    1152:	10 92 60 02 	sts	0x0260, r1
    1156:	10 92 5f 02 	sts	0x025F, r1
  tail = 0;        // set the tail of the queue to zero.
    115a:	10 92 62 02 	sts	0x0262, r1
    115e:	10 92 61 02 	sts	0x0261, r1
    1162:	08 95       	ret

00001164 <_GLOBAL__D_CLOCK_PIN>:
    }
    else if ((player_input & B00000001) && game_state == GAME_CHECK_PLAYERS){
      player_status[p] = CHIP_INACTIVE;
    }
  }
}
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	6f ef       	ldi	r22, 0xFF	; 255
    116a:	7f ef       	ldi	r23, 0xFF	; 255
    116c:	0e 94 3d 08 	call	0x107a	; 0x107a <_Z41__static_initialization_and_destruction_0ii>
    1170:	08 95       	ret

00001172 <_GLOBAL__I_CLOCK_PIN>:
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	6f ef       	ldi	r22, 0xFF	; 255
    1178:	7f ef       	ldi	r23, 0xFF	; 255
    117a:	0e 94 3d 08 	call	0x107a	; 0x107a <_Z41__static_initialization_and_destruction_0ii>
    117e:	08 95       	ret

00001180 <_ZN10QueueArrayIiE6resizeEi>:
}

// resize the size of the queue.
template<typename T>
void QueueArray<T>::resize (const int s) {
    1180:	af 92       	push	r10
    1182:	bf 92       	push	r11
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	ec 01       	movw	r28, r24
    1196:	6b 01       	movw	r12, r22
  // defensive issue.
  if (s <= 0)
    1198:	16 16       	cp	r1, r22
    119a:	17 06       	cpc	r1, r23
    119c:	24 f0       	brlt	.+8      	; 0x11a6 <_ZN10QueueArrayIiE6resizeEi+0x26>
    exit ("QUEUE: error due to undesirable size for queue size.");
    119e:	60 e3       	ldi	r22, 0x30	; 48
    11a0:	71 e0       	ldi	r23, 0x01	; 1
    11a2:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZNK10QueueArrayIiE4exitEPKc>

  // allocate enough memory for the temporary array.
  T * temp = (T *) malloc (sizeof (T) * s);
    11a6:	c6 01       	movw	r24, r12
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <malloc>
    11b0:	f8 2e       	mov	r15, r24
    11b2:	e9 2e       	mov	r14, r25
    11b4:	08 2f       	mov	r16, r24
    11b6:	19 2f       	mov	r17, r25

  // if there is a memory allocation error.
  if (temp == NULL)
    11b8:	01 15       	cp	r16, r1
    11ba:	11 05       	cpc	r17, r1
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <_ZN10QueueArrayIiE6resizeEi+0x48>
    exit ("QUEUE: insufficient memory to initialize temporary queue.");
    11be:	ce 01       	movw	r24, r28
    11c0:	65 e6       	ldi	r22, 0x65	; 101
    11c2:	71 e0       	ldi	r23, 0x01	; 1
    11c4:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZNK10QueueArrayIiE4exitEPKc>
  
  // copy the items from the old queue to the new one.
  for (int i = 0; i < items; i++)
    11c8:	ae 80       	ldd	r10, Y+6	; 0x06
    11ca:	bf 80       	ldd	r11, Y+7	; 0x07
    11cc:	8f 2d       	mov	r24, r15
    11ce:	9e 2d       	mov	r25, r14
    11d0:	9c 01       	movw	r18, r24
    11d2:	79 01       	movw	r14, r18
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <_ZN10QueueArrayIiE6resizeEi+0x82>
    temp[i] = contents[(head + i) % size];
    11da:	88 85       	ldd	r24, Y+8	; 0x08
    11dc:	99 85       	ldd	r25, Y+9	; 0x09
    11de:	6c 81       	ldd	r22, Y+4	; 0x04
    11e0:	7d 81       	ldd	r23, Y+5	; 0x05
    11e2:	82 0f       	add	r24, r18
    11e4:	93 1f       	adc	r25, r19
    11e6:	0e 94 ba 14 	call	0x2974	; 0x2974 <__divmodhi4>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	e8 0f       	add	r30, r24
    11f0:	f9 1f       	adc	r31, r25
    11f2:	80 81       	ld	r24, Z
    11f4:	91 81       	ldd	r25, Z+1	; 0x01
    11f6:	f7 01       	movw	r30, r14
    11f8:	81 93       	st	Z+, r24
    11fa:	91 93       	st	Z+, r25
    11fc:	7f 01       	movw	r14, r30
  // if there is a memory allocation error.
  if (temp == NULL)
    exit ("QUEUE: insufficient memory to initialize temporary queue.");
  
  // copy the items from the old queue to the new one.
  for (int i = 0; i < items; i++)
    11fe:	2f 5f       	subi	r18, 0xFF	; 255
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	ea 81       	ldd	r30, Y+2	; 0x02
    1204:	fb 81       	ldd	r31, Y+3	; 0x03
    1206:	2a 15       	cp	r18, r10
    1208:	3b 05       	cpc	r19, r11
    120a:	3c f3       	brlt	.-50     	; 0x11da <_ZN10QueueArrayIiE6resizeEi+0x5a>
    temp[i] = contents[(head + i) % size];

  // deallocate the old array of the queue.
  free (contents);
    120c:	cf 01       	movw	r24, r30
    120e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <free>

  // copy the pointer of the new queue.
  contents = temp;
    1212:	1b 83       	std	Y+3, r17	; 0x03
    1214:	0a 83       	std	Y+2, r16	; 0x02

  // set the head and tail of the new queue.
  head = 0; tail = items;
    1216:	19 86       	std	Y+9, r1	; 0x09
    1218:	18 86       	std	Y+8, r1	; 0x08
    121a:	8e 81       	ldd	r24, Y+6	; 0x06
    121c:	9f 81       	ldd	r25, Y+7	; 0x07
    121e:	9b 87       	std	Y+11, r25	; 0x0b
    1220:	8a 87       	std	Y+10, r24	; 0x0a

  // set the new size of the queue.
  size = s;
    1222:	dd 82       	std	Y+5, r13	; 0x05
    1224:	cc 82       	std	Y+4, r12	; 0x04
}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	bf 90       	pop	r11
    1238:	af 90       	pop	r10
    123a:	08 95       	ret

0000123c <_Z19setMultiDisplayTextPci>:
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    displays[i].setPlayerStatus(game.getLost(i), game.getTurbo(i));
  }
}

void setMultiDisplayText(char *text, int size) {
    123c:	cf 92       	push	r12
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	7c 01       	movw	r14, r24
    124e:	8b 01       	movw	r16, r22
    1250:	c0 e0       	ldi	r28, 0x00	; 0
    1252:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    displays[i].setSingleScrolling(text, size, 1);
    1254:	61 ea       	ldi	r22, 0xA1	; 161
    1256:	c6 2e       	mov	r12, r22
    1258:	d1 2c       	mov	r13, r1
    125a:	cc 9d       	mul	r28, r12
    125c:	c0 01       	movw	r24, r0
    125e:	cd 9d       	mul	r28, r13
    1260:	90 0d       	add	r25, r0
    1262:	dc 9d       	mul	r29, r12
    1264:	90 0d       	add	r25, r0
    1266:	11 24       	eor	r1, r1
    1268:	89 58       	subi	r24, 0x89	; 137
    126a:	9d 4f       	sbci	r25, 0xFD	; 253
    126c:	b7 01       	movw	r22, r14
    126e:	a8 01       	movw	r20, r16
    1270:	21 e0       	ldi	r18, 0x01	; 1
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN12MatrixDriver18setSingleScrollingEPcii>
    displays[i].setPlayerStatus(game.getLost(i), game.getTurbo(i));
  }
}

void setMultiDisplayText(char *text, int size) {
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    1278:	21 96       	adiw	r28, 0x01	; 1
    127a:	c4 30       	cpi	r28, 0x04	; 4
    127c:	d1 05       	cpc	r29, r1
    127e:	69 f7       	brne	.-38     	; 0x125a <_Z19setMultiDisplayTextPci+0x1e>
    displays[i].setSingleScrolling(text, size, 1);
//    displays[i].setMultiScrolling(text);
  }
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	08 95       	ret

00001292 <_Z10checkChipsv>:

void stopMotor() {
  analogWrite(SPEED_PIN, 0);
}

void checkChips() {
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29

// pop an item from the queue.
template<typename T>
T QueueArray<T>::pop () {
  // check if the queue is empty.
  if (isEmpty ())
    129a:	80 91 5d 02 	lds	r24, 0x025D
    129e:	90 91 5e 02 	lds	r25, 0x025E
    12a2:	89 2b       	or	r24, r25
    12a4:	31 f4       	brne	.+12     	; 0x12b2 <_Z10checkChipsv+0x20>
    exit ("QUEUE: can't pop item from queue: queue is empty.");
    12a6:	87 e5       	ldi	r24, 0x57	; 87
    12a8:	92 e0       	ldi	r25, 0x02	; 2
    12aa:	6f e9       	ldi	r22, 0x9F	; 159
    12ac:	71 e0       	ldi	r23, 0x01	; 1
    12ae:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZNK10QueueArrayIiE4exitEPKc>

  // fetch the item from the array.
  T item = contents[head++];
    12b2:	80 91 5f 02 	lds	r24, 0x025F
    12b6:	90 91 60 02 	lds	r25, 0x0260
    12ba:	9c 01       	movw	r18, r24
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	e0 91 59 02 	lds	r30, 0x0259
    12c4:	f0 91 5a 02 	lds	r31, 0x025A
    12c8:	e2 0f       	add	r30, r18
    12ca:	f3 1f       	adc	r31, r19
    12cc:	c0 81       	ld	r28, Z
    12ce:	d1 81       	ldd	r29, Z+1	; 0x01
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	90 93 60 02 	sts	0x0260, r25
    12d6:	80 93 5f 02 	sts	0x025F, r24

  // decrease the items.
  items--;
    12da:	20 91 5d 02 	lds	r18, 0x025D
    12de:	30 91 5e 02 	lds	r19, 0x025E
    12e2:	21 50       	subi	r18, 0x01	; 1
    12e4:	30 40       	sbci	r19, 0x00	; 0
    12e6:	30 93 5e 02 	sts	0x025E, r19
    12ea:	20 93 5d 02 	sts	0x025D, r18

  // wrap-around index.
  if (head == size) head = 0;
    12ee:	e0 91 5b 02 	lds	r30, 0x025B
    12f2:	f0 91 5c 02 	lds	r31, 0x025C
    12f6:	8e 17       	cp	r24, r30
    12f8:	9f 07       	cpc	r25, r31
    12fa:	21 f4       	brne	.+8      	; 0x1304 <_Z10checkChipsv+0x72>
    12fc:	10 92 60 02 	sts	0x0260, r1
    1300:	10 92 5f 02 	sts	0x025F, r1

  // shrink size of array if necessary.
  if (!isEmpty () && (items <= size / 4))
    1304:	21 15       	cp	r18, r1
    1306:	31 05       	cpc	r19, r1
    1308:	89 f0       	breq	.+34     	; 0x132c <_Z10checkChipsv+0x9a>
    130a:	cf 01       	movw	r24, r30
    130c:	64 e0       	ldi	r22, 0x04	; 4
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	0e 94 ba 14 	call	0x2974	; 0x2974 <__divmodhi4>
    1314:	62 17       	cp	r22, r18
    1316:	73 07       	cpc	r23, r19
    1318:	4c f0       	brlt	.+18     	; 0x132c <_Z10checkChipsv+0x9a>
    resize (size / 2);
    131a:	cf 01       	movw	r24, r30
    131c:	62 e0       	ldi	r22, 0x02	; 2
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	0e 94 ba 14 	call	0x2974	; 0x2974 <__divmodhi4>
    1324:	87 e5       	ldi	r24, 0x57	; 87
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN10QueueArrayIiE6resizeEi>
  int p = chip_pending.pop();
  player_status[p] = CHIP_LOST;
    132c:	fe 01       	movw	r30, r28
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	e1 59       	subi	r30, 0x91	; 145
    1334:	fd 4f       	sbci	r31, 0xFD	; 253
    1336:	80 91 42 02 	lds	r24, 0x0242
    133a:	90 91 43 02 	lds	r25, 0x0243
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
  displays[p].setPlayerStatus(game.getLost(p), game.getTurbo(p));
    1342:	8b ef       	ldi	r24, 0xFB	; 251
    1344:	94 e0       	ldi	r25, 0x04	; 4
    1346:	be 01       	movw	r22, r28
    1348:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN12LoopingLouie7getLostEi>
    134c:	8c 01       	movw	r16, r24
    134e:	8b ef       	ldi	r24, 0xFB	; 251
    1350:	94 e0       	ldi	r25, 0x04	; 4
    1352:	be 01       	movw	r22, r28
    1354:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN12LoopingLouie8getTurboEi>
    1358:	ac 01       	movw	r20, r24
    135a:	81 ea       	ldi	r24, 0xA1	; 161
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9c 01       	movw	r18, r24
    1360:	c2 9f       	mul	r28, r18
    1362:	c0 01       	movw	r24, r0
    1364:	c3 9f       	mul	r28, r19
    1366:	90 0d       	add	r25, r0
    1368:	d2 9f       	mul	r29, r18
    136a:	90 0d       	add	r25, r0
    136c:	11 24       	eor	r1, r1
    136e:	89 58       	subi	r24, 0x89	; 137
    1370:	9d 4f       	sbci	r25, 0xFD	; 253
    1372:	b8 01       	movw	r22, r16
    1374:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN12MatrixDriver15setPlayerStatusEii>
}
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	08 95       	ret

00001382 <_Z18updatePlayerStatusv>:
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    displays[i].setTurbo(game.getTurbo(i));
  }
}

void updatePlayerStatus() {
    1382:	ef 92       	push	r14
    1384:	ff 92       	push	r15
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	c0 e0       	ldi	r28, 0x00	; 0
    1390:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    displays[i].setPlayerStatus(game.getLost(i), game.getTurbo(i));
    1392:	f1 ea       	ldi	r31, 0xA1	; 161
    1394:	ef 2e       	mov	r14, r31
    1396:	f1 2c       	mov	r15, r1
    1398:	8b ef       	ldi	r24, 0xFB	; 251
    139a:	94 e0       	ldi	r25, 0x04	; 4
    139c:	be 01       	movw	r22, r28
    139e:	0e 94 0b 07 	call	0xe16	; 0xe16 <_ZN12LoopingLouie7getLostEi>
    13a2:	8c 01       	movw	r16, r24
    13a4:	8b ef       	ldi	r24, 0xFB	; 251
    13a6:	94 e0       	ldi	r25, 0x04	; 4
    13a8:	be 01       	movw	r22, r28
    13aa:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN12LoopingLouie8getTurboEi>
    13ae:	ac 01       	movw	r20, r24
    13b0:	ce 9d       	mul	r28, r14
    13b2:	c0 01       	movw	r24, r0
    13b4:	cf 9d       	mul	r28, r15
    13b6:	90 0d       	add	r25, r0
    13b8:	de 9d       	mul	r29, r14
    13ba:	90 0d       	add	r25, r0
    13bc:	11 24       	eor	r1, r1
    13be:	89 58       	subi	r24, 0x89	; 137
    13c0:	9d 4f       	sbci	r25, 0xFD	; 253
    13c2:	b8 01       	movw	r22, r16
    13c4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_ZN12MatrixDriver15setPlayerStatusEii>
    displays[i].setTurbo(game.getTurbo(i));
  }
}

void updatePlayerStatus() {
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    13c8:	21 96       	adiw	r28, 0x01	; 1
    13ca:	c4 30       	cpi	r28, 0x04	; 4
    13cc:	d1 05       	cpc	r29, r1
    13ce:	21 f7       	brne	.-56     	; 0x1398 <_Z18updatePlayerStatusv+0x16>
    displays[i].setPlayerStatus(game.getLost(i), game.getTurbo(i));
  }
}
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	08 95       	ret

000013de <_Z13enableButtonsv>:
void disableButtons() {
  BUTTONS_ENABLED = false;
}

void enableButtons() {
  updatePlayerStatus();
    13de:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18updatePlayerStatusv>
  BUTTONS_ENABLED = true;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	80 93 50 02 	sts	0x0250, r24
}
    13e8:	08 95       	ret

000013ea <_Z9startGamev>:
  random_speed_timer = scheduler.setInterval(2000, randomSpeed);
  random_direction_timer = scheduler.setInterval(3000, randomDirection);
}

void startGame(){
  enableButtons();
    13ea:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z13enableButtonsv>
  updatePlayerStatus();
    13ee:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18updatePlayerStatusv>
//  game_state = GAME_ACTIVE;
}
    13f2:	08 95       	ret

000013f4 <_Z9stopMotorv>:
  scheduler.disable(random_direction_timer);
  analogWrite(SPEED_PIN, TURBO_SPEED);
}

void stopMotor() {
  analogWrite(SPEED_PIN, 0);
    13f4:	80 91 2e 02 	lds	r24, 0x022E
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	0e 94 0c 11 	call	0x2218	; 0x2218 <analogWrite>
}
    1400:	08 95       	ret

00001402 <_Z11looserFoundi>:
void startRound(){
  game_state = GAME_ACTIVE;
  setNormalSpeed();
}

void looserFound(int p) {
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	2a 97       	sbiw	r28, 0x0a	; 10
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	8c 01       	movw	r16, r24
  game_state = GAME_STOPPED;
    141c:	83 e0       	ldi	r24, 0x03	; 3
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	90 93 52 02 	sts	0x0252, r25
    1424:	80 93 51 02 	sts	0x0251, r24
  }
//  readInputs();
}

void disableButtons() {
  BUTTONS_ENABLED = false;
    1428:	10 92 50 02 	sts	0x0250, r1
}

void looserFound(int p) {
  game_state = GAME_STOPPED;
  disableButtons();
  player_status[p] = CHIP_ACTIVE;
    142c:	f8 01       	movw	r30, r16
    142e:	ee 0f       	add	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	e1 59       	subi	r30, 0x91	; 145
    1434:	fd 4f       	sbci	r31, 0xFD	; 253
    1436:	80 91 3e 02 	lds	r24, 0x023E
    143a:	90 91 3f 02 	lds	r25, 0x023F
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	80 83       	st	Z, r24
  stopMotor();
    1442:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <_Z9stopMotorv>
  game.raiseLost(p);
    1446:	8b ef       	ldi	r24, 0xFB	; 251
    1448:	94 e0       	ldi	r25, 0x04	; 4
    144a:	b8 01       	movw	r22, r16
    144c:	0e 94 2c 07 	call	0xe58	; 0xe58 <_ZN12LoopingLouie9raiseLostEi>
  game.resetPlayers();
    1450:	8b ef       	ldi	r24, 0xFB	; 251
    1452:	94 e0       	ldi	r25, 0x04	; 4
    1454:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN12LoopingLouie12resetPlayersEv>
  updatePlayerStatus();
    1458:	0e 94 c1 09 	call	0x1382	; 0x1382 <_Z18updatePlayerStatusv>
  char text[10] = "LOOSER #";
    145c:	de 01       	movw	r26, r28
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	e1 ed       	ldi	r30, 0xD1	; 209
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	89 e0       	ldi	r24, 0x09	; 9
    1466:	01 90       	ld	r0, Z+
    1468:	0d 92       	st	X+, r0
    146a:	81 50       	subi	r24, 0x01	; 1
    146c:	e1 f7       	brne	.-8      	; 0x1466 <_Z11looserFoundi+0x64>
  text[8] = (char) p + 49;
    146e:	80 2f       	mov	r24, r16
    1470:	8f 5c       	subi	r24, 0xCF	; 207
    1472:	89 87       	std	Y+9, r24	; 0x09
  text[9] = ' ';
    1474:	80 e2       	ldi	r24, 0x20	; 32
    1476:	8a 87       	std	Y+10, r24	; 0x0a
  setMultiDisplayText(text, sizeof(text));
    1478:	ce 01       	movw	r24, r28
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	6a e0       	ldi	r22, 0x0A	; 10
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z19setMultiDisplayTextPci>
  scheduler.setTimeout(5000, enableButtons);
    1484:	8d e5       	ldi	r24, 0x5D	; 93
    1486:	95 e0       	ldi	r25, 0x05	; 5
    1488:	48 e8       	ldi	r20, 0x88	; 136
    148a:	53 e1       	ldi	r21, 0x13	; 19
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	2f ee       	ldi	r18, 0xEF	; 239
    1492:	39 e0       	ldi	r19, 0x09	; 9
    1494:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN11SimpleTimer10setTimeoutElPFvvE>
}
    1498:	2a 96       	adiw	r28, 0x0a	; 10
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <_Z10startMotorv>:
  }
  startMotor();
}

void startMotor(){
  if (game_state == GAME_ACTIVE){
    14ae:	80 91 51 02 	lds	r24, 0x0251
    14b2:	90 91 52 02 	lds	r25, 0x0252
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	29 f5       	brne	.+74     	; 0x1504 <_Z10startMotorv+0x56>
    if (motor_direction == 1){
    14ba:	80 91 38 02 	lds	r24, 0x0238
    14be:	90 91 39 02 	lds	r25, 0x0239
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	49 f4       	brne	.+18     	; 0x14da <_Z10startMotorv+0x2c>
      digitalWrite(DIRECTION_PIN_1, HIGH);
    14c8:	80 91 30 02 	lds	r24, 0x0230
    14cc:	61 e0       	ldi	r22, 0x01	; 1
    14ce:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
      digitalWrite(DIRECTION_PIN_2, LOW);
    14d2:	80 91 32 02 	lds	r24, 0x0232
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	0b c0       	rjmp	.+22     	; 0x14f0 <_Z10startMotorv+0x42>
    }
    else if(motor_direction == -1){
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	51 f4       	brne	.+20     	; 0x14f4 <_Z10startMotorv+0x46>
      digitalWrite(DIRECTION_PIN_1, LOW);
    14e0:	80 91 30 02 	lds	r24, 0x0230
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
      digitalWrite(DIRECTION_PIN_2, HIGH);
    14ea:	80 91 32 02 	lds	r24, 0x0232
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
    }
    analogWrite(SPEED_PIN, motor_speed);
    14f4:	60 91 4c 02 	lds	r22, 0x024C
    14f8:	70 91 4d 02 	lds	r23, 0x024D
    14fc:	80 91 2e 02 	lds	r24, 0x022E
    1500:	0e 94 0c 11 	call	0x2218	; 0x2218 <analogWrite>
    1504:	08 95       	ret

00001506 <_Z13setTurboSpeedv>:
  startMotor();
  scheduler.enable(random_speed_timer);
  scheduler.enable(random_direction_timer);
}

void setTurboSpeed() {
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
  scheduler.disable(random_speed_timer);
    150a:	0d e5       	ldi	r16, 0x5D	; 93
    150c:	15 e0       	ldi	r17, 0x05	; 5
    150e:	60 91 53 02 	lds	r22, 0x0253
    1512:	70 91 54 02 	lds	r23, 0x0254
    1516:	c8 01       	movw	r24, r16
    1518:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN11SimpleTimer7disableEi>
  scheduler.disable(random_direction_timer);
    151c:	60 91 55 02 	lds	r22, 0x0255
    1520:	70 91 56 02 	lds	r23, 0x0256
    1524:	c8 01       	movw	r24, r16
    1526:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN11SimpleTimer7disableEi>
  analogWrite(SPEED_PIN, TURBO_SPEED);
    152a:	60 91 36 02 	lds	r22, 0x0236
    152e:	70 91 37 02 	lds	r23, 0x0237
    1532:	80 91 2e 02 	lds	r24, 0x022E
    1536:	0e 94 0c 11 	call	0x2218	; 0x2218 <analogWrite>
}
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	08 95       	ret

00001540 <_Z10readInputsv>:
  text[9] = ' ';
  setMultiDisplayText(text, sizeof(text));
  scheduler.setTimeout(5000, enableButtons);
}

void readInputs() {
    1540:	2f 92       	push	r2
    1542:	3f 92       	push	r3
    1544:	4f 92       	push	r4
    1546:	5f 92       	push	r5
    1548:	6f 92       	push	r6
    154a:	7f 92       	push	r7
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	68 97       	sbiw	r28, 0x18	; 24
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
  if (!BUTTONS_ENABLED)
    1572:	80 91 50 02 	lds	r24, 0x0250
    1576:	88 23       	and	r24, r24
    1578:	09 f4       	brne	.+2      	; 0x157c <_Z10readInputsv+0x3c>
    157a:	63 c1       	rjmp	.+710    	; 0x1842 <_Z10readInputsv+0x302>
    return;
  // send strobe
  digitalWrite(STROBE_PIN, HIGH);
    157c:	80 91 2a 02 	lds	r24, 0x022A
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
  digitalWrite(STROBE_PIN, LOW);
    1586:	80 91 2a 02 	lds	r24, 0x022A
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
    1590:	3f e6       	ldi	r19, 0x6F	; 111
    1592:	e3 2e       	mov	r14, r19
    1594:	32 e0       	ldi	r19, 0x02	; 2
    1596:	f3 2e       	mov	r15, r19
    1598:	aa 24       	eor	r10, r10
    159a:	bb 24       	eor	r11, r11

  for (int p = 0; p < DISPLAY_COUNT; p++) {
    byte player_input = 0;
    for (int b = 0; b < 8; b++) {
      if (digitalRead(INPUT_PIN)) {
        player_input = player_input | (1 << b);
    159c:	21 e0       	ldi	r18, 0x01	; 1
    159e:	22 2e       	mov	r2, r18
    15a0:	31 2c       	mov	r3, r1
    }
    else if ((player_input & B00000001) && game_state == GAME_ACTIVE) {
      //LICHTSCHRANKE
      if (player_status[p] != CHIP_PENDING){
        if (player_status[p] == CHIP_ACTIVE) {
          displays[p].setStaticText('~');
    15a2:	91 ea       	ldi	r25, 0xA1	; 161
    15a4:	49 2e       	mov	r4, r25
    15a6:	51 2c       	mov	r5, r1
      }
      return;
    }
    else if (~player_input & B00000100) {
      //BLUE BUTTON
      game_state = GAME_CHECK_PLAYERS;
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	68 2e       	mov	r6, r24
    15ac:	71 2c       	mov	r7, r1
      char text[] = " GO! GO! GO! ";
    15ae:	0b e0       	ldi	r16, 0x0B	; 11
    15b0:	80 2e       	mov	r8, r16
    15b2:	91 2c       	mov	r9, r1
    15b4:	8c 0e       	add	r8, r28
    15b6:	9d 1e       	adc	r9, r29
    15b8:	40 c1       	rjmp	.+640    	; 0x183a <_Z10readInputsv+0x2fa>
  digitalWrite(STROBE_PIN, LOW);

  for (int p = 0; p < DISPLAY_COUNT; p++) {
    byte player_input = 0;
    for (int b = 0; b < 8; b++) {
      if (digitalRead(INPUT_PIN)) {
    15ba:	80 91 2c 02 	lds	r24, 0x022C
    15be:	0e 94 ff 11 	call	0x23fe	; 0x23fe <digitalRead>
    15c2:	89 2b       	or	r24, r25
    15c4:	41 f0       	breq	.+16     	; 0x15d6 <_Z10readInputsv+0x96>
        player_input = player_input | (1 << b);
    15c6:	c1 01       	movw	r24, r2
    15c8:	00 2e       	mov	r0, r16
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <_Z10readInputsv+0x90>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <_Z10readInputsv+0x8c>
    15d4:	d8 2a       	or	r13, r24
      }
      digitalWrite(CLOCK_PIN, HIGH);
    15d6:	80 91 26 02 	lds	r24, 0x0226
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
      digitalWrite(CLOCK_PIN, LOW);
    15e0:	80 91 26 02 	lds	r24, 0x0226
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
  digitalWrite(STROBE_PIN, HIGH);
  digitalWrite(STROBE_PIN, LOW);

  for (int p = 0; p < DISPLAY_COUNT; p++) {
    byte player_input = 0;
    for (int b = 0; b < 8; b++) {
    15ea:	0f 5f       	subi	r16, 0xFF	; 255
    15ec:	1f 4f       	sbci	r17, 0xFF	; 255
    15ee:	08 30       	cpi	r16, 0x08	; 8
    15f0:	11 05       	cpc	r17, r1
    15f2:	19 f7       	brne	.-58     	; 0x15ba <_Z10readInputsv+0x7a>
      }
      digitalWrite(CLOCK_PIN, HIGH);
      digitalWrite(CLOCK_PIN, LOW);
    }

    if ((~player_input & B00000010) &&  player_status[p] == CHIP_ACTIVE && game_state == GAME_ACTIVE) {
    15f4:	4d 2d       	mov	r20, r13
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	d1 fc       	sbrc	r13, 1
    15fa:	59 c0       	rjmp	.+178    	; 0x16ae <_Z10readInputsv+0x16e>
    15fc:	f7 01       	movw	r30, r14
    15fe:	20 81       	ld	r18, Z
    1600:	31 81       	ldd	r19, Z+1	; 0x01
    1602:	80 91 3e 02 	lds	r24, 0x023E
    1606:	90 91 3f 02 	lds	r25, 0x023F
    160a:	28 17       	cp	r18, r24
    160c:	39 07       	cpc	r19, r25
    160e:	09 f0       	breq	.+2      	; 0x1612 <_Z10readInputsv+0xd2>
    1610:	4e c0       	rjmp	.+156    	; 0x16ae <_Z10readInputsv+0x16e>
    1612:	80 91 51 02 	lds	r24, 0x0251
    1616:	90 91 52 02 	lds	r25, 0x0252
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	09 f0       	breq	.+2      	; 0x1620 <_Z10readInputsv+0xe0>
    161e:	47 c0       	rjmp	.+142    	; 0x16ae <_Z10readInputsv+0x16e>
      //TURBO
      if (game.useTurbo(p)) {
    1620:	8b ef       	ldi	r24, 0xFB	; 251
    1622:	94 e0       	ldi	r25, 0x04	; 4
    1624:	b5 01       	movw	r22, r10
    1626:	0e 94 3d 07 	call	0xe7a	; 0xe7a <_ZN12LoopingLouie8useTurboEi>
    162a:	88 23       	and	r24, r24
    162c:	09 f4       	brne	.+2      	; 0x1630 <_Z10readInputsv+0xf0>
    162e:	09 c1       	rjmp	.+530    	; 0x1842 <_Z10readInputsv+0x302>
  }
//  readInputs();
}

void disableButtons() {
  BUTTONS_ENABLED = false;
    1630:	10 92 50 02 	sts	0x0250, r1

    if ((~player_input & B00000010) &&  player_status[p] == CHIP_ACTIVE && game_state == GAME_ACTIVE) {
      //TURBO
      if (game.useTurbo(p)) {
        disableButtons();
        setTurboSpeed();
    1634:	0e 94 83 0a 	call	0x1506	; 0x1506 <_Z13setTurboSpeedv>
        scheduler.setTimeout(TURBO_DURATION, enableButtons);
    1638:	40 91 3a 02 	lds	r20, 0x023A
    163c:	50 91 3b 02 	lds	r21, 0x023B
    1640:	66 27       	eor	r22, r22
    1642:	57 fd       	sbrc	r21, 7
    1644:	60 95       	com	r22
    1646:	76 2f       	mov	r23, r22
    1648:	8d e5       	ldi	r24, 0x5D	; 93
    164a:	95 e0       	ldi	r25, 0x05	; 5
    164c:	2f ee       	ldi	r18, 0xEF	; 239
    164e:	39 e0       	ldi	r19, 0x09	; 9
    1650:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN11SimpleTimer10setTimeoutElPFvvE>
        scheduler.setTimeout(TURBO_DURATION, setNormalSpeed);
    1654:	40 91 3a 02 	lds	r20, 0x023A
    1658:	50 91 3b 02 	lds	r21, 0x023B
    165c:	66 27       	eor	r22, r22
    165e:	57 fd       	sbrc	r21, 7
    1660:	60 95       	com	r22
    1662:	76 2f       	mov	r23, r22
    1664:	8d e5       	ldi	r24, 0x5D	; 93
    1666:	95 e0       	ldi	r25, 0x05	; 5
    1668:	29 e3       	ldi	r18, 0x39	; 57
    166a:	3c e0       	ldi	r19, 0x0C	; 12
    166c:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN11SimpleTimer10setTimeoutElPFvvE>
        char text[] = " !TURBO! ";
    1670:	de 01       	movw	r26, r28
    1672:	11 96       	adiw	r26, 0x01	; 1
    1674:	eb ed       	ldi	r30, 0xDB	; 219
    1676:	f1 e0       	ldi	r31, 0x01	; 1
    1678:	8a e0       	ldi	r24, 0x0A	; 10
    167a:	01 90       	ld	r0, Z+
    167c:	0d 92       	st	X+, r0
    167e:	81 50       	subi	r24, 0x01	; 1
    1680:	e1 f7       	brne	.-8      	; 0x167a <_Z10readInputsv+0x13a>
        displays[p].setSingleScrolling(text, sizeof(text), 1);
    1682:	81 ea       	ldi	r24, 0xA1	; 161
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9c 01       	movw	r18, r24
    1688:	a2 9e       	mul	r10, r18
    168a:	c0 01       	movw	r24, r0
    168c:	a3 9e       	mul	r10, r19
    168e:	90 0d       	add	r25, r0
    1690:	b2 9e       	mul	r11, r18
    1692:	90 0d       	add	r25, r0
    1694:	11 24       	eor	r1, r1
    1696:	89 58       	subi	r24, 0x89	; 137
    1698:	9d 4f       	sbci	r25, 0xFD	; 253
    169a:	be 01       	movw	r22, r28
    169c:	6f 5f       	subi	r22, 0xFF	; 255
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	4a e0       	ldi	r20, 0x0A	; 10
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	21 e0       	ldi	r18, 0x01	; 1
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_ZN12MatrixDriver18setSingleScrollingEPcii>
    16ac:	ca c0       	rjmp	.+404    	; 0x1842 <_Z10readInputsv+0x302>
      }
      return;
    }
    else if (~player_input & B00000100) {
    16ae:	42 fd       	sbrc	r20, 2
    16b0:	1a c0       	rjmp	.+52     	; 0x16e6 <_Z10readInputsv+0x1a6>
      //BLUE BUTTON
      game_state = GAME_CHECK_PLAYERS;
    16b2:	70 92 52 02 	sts	0x0252, r7
    16b6:	60 92 51 02 	sts	0x0251, r6
      char text[] = " GO! GO! GO! ";
    16ba:	d4 01       	movw	r26, r8
    16bc:	e5 ee       	ldi	r30, 0xE5	; 229
    16be:	f1 e0       	ldi	r31, 0x01	; 1
    16c0:	8e e0       	ldi	r24, 0x0E	; 14
    16c2:	01 90       	ld	r0, Z+
    16c4:	0d 92       	st	X+, r0
    16c6:	81 50       	subi	r24, 0x01	; 1
    16c8:	e1 f7       	brne	.-8      	; 0x16c2 <_Z10readInputsv+0x182>
      setMultiDisplayText(text, sizeof(text));
    16ca:	c4 01       	movw	r24, r8
    16cc:	6e e0       	ldi	r22, 0x0E	; 14
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	0e 94 1e 09 	call	0x123c	; 0x123c <_Z19setMultiDisplayTextPci>
      scheduler.setTimeout(2500, startRound);
    16d4:	8d e5       	ldi	r24, 0x5D	; 93
    16d6:	95 e0       	ldi	r25, 0x05	; 5
    16d8:	44 ec       	ldi	r20, 0xC4	; 196
    16da:	59 e0       	ldi	r21, 0x09	; 9
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	28 e5       	ldi	r18, 0x58	; 88
    16e2:	3c e0       	ldi	r19, 0x0C	; 12
    16e4:	78 c0       	rjmp	.+240    	; 0x17d6 <_Z10readInputsv+0x296>
    }
    else if ((player_input & B00000001) && game_state == GAME_ACTIVE) {
    16e6:	9a 01       	movw	r18, r20
    16e8:	21 70       	andi	r18, 0x01	; 1
    16ea:	30 70       	andi	r19, 0x00	; 0
    16ec:	40 ff       	sbrs	r20, 0
    16ee:	81 c0       	rjmp	.+258    	; 0x17f2 <_Z10readInputsv+0x2b2>
    16f0:	80 91 51 02 	lds	r24, 0x0251
    16f4:	90 91 52 02 	lds	r25, 0x0252
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	09 f0       	breq	.+2      	; 0x16fe <_Z10readInputsv+0x1be>
    16fc:	7a c0       	rjmp	.+244    	; 0x17f2 <_Z10readInputsv+0x2b2>
      //LICHTSCHRANKE
      if (player_status[p] != CHIP_PENDING){
    16fe:	f7 01       	movw	r30, r14
    1700:	20 81       	ld	r18, Z
    1702:	31 81       	ldd	r19, Z+1	; 0x01
    1704:	80 91 40 02 	lds	r24, 0x0240
    1708:	90 91 41 02 	lds	r25, 0x0241
    170c:	28 17       	cp	r18, r24
    170e:	39 07       	cpc	r19, r25
    1710:	09 f4       	brne	.+2      	; 0x1714 <_Z10readInputsv+0x1d4>
    1712:	88 c0       	rjmp	.+272    	; 0x1824 <_Z10readInputsv+0x2e4>
        if (player_status[p] == CHIP_ACTIVE) {
    1714:	80 91 3e 02 	lds	r24, 0x023E
    1718:	90 91 3f 02 	lds	r25, 0x023F
    171c:	28 17       	cp	r18, r24
    171e:	39 07       	cpc	r19, r25
    1720:	09 f0       	breq	.+2      	; 0x1724 <_Z10readInputsv+0x1e4>
    1722:	5c c0       	rjmp	.+184    	; 0x17dc <_Z10readInputsv+0x29c>
          displays[p].setStaticText('~');
    1724:	a4 9c       	mul	r10, r4
    1726:	c0 01       	movw	r24, r0
    1728:	a5 9c       	mul	r10, r5
    172a:	90 0d       	add	r25, r0
    172c:	b4 9c       	mul	r11, r4
    172e:	90 0d       	add	r25, r0
    1730:	11 24       	eor	r1, r1
    1732:	89 58       	subi	r24, 0x89	; 137
    1734:	9d 4f       	sbci	r25, 0xFD	; 253
    1736:	6e e7       	ldi	r22, 0x7E	; 126
    1738:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN12MatrixDriver13setStaticTextEc>
}

// check if the queue is full.
template<typename T>
bool QueueArray<T>::isFull () const {
  return items == size;
    173c:	60 91 5d 02 	lds	r22, 0x025D
    1740:	70 91 5e 02 	lds	r23, 0x025E

// push an item to the queue.
template<typename T>
void QueueArray<T>::push (const T i) {
  // check if the queue is full.
  if (isFull ())
    1744:	80 91 5b 02 	lds	r24, 0x025B
    1748:	90 91 5c 02 	lds	r25, 0x025C
    174c:	68 17       	cp	r22, r24
    174e:	79 07       	cpc	r23, r25
    1750:	31 f4       	brne	.+12     	; 0x175e <_Z10readInputsv+0x21e>
    // double size of array.
    resize (size * 2);
    1752:	66 0f       	add	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	87 e5       	ldi	r24, 0x57	; 87
    1758:	92 e0       	ldi	r25, 0x02	; 2
    175a:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN10QueueArrayIiE6resizeEi>

  // store the item to the array.
  contents[tail++] = i;
    175e:	20 91 61 02 	lds	r18, 0x0261
    1762:	30 91 62 02 	lds	r19, 0x0262
    1766:	c9 01       	movw	r24, r18
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	e0 91 59 02 	lds	r30, 0x0259
    1770:	f0 91 5a 02 	lds	r31, 0x025A
    1774:	e8 0f       	add	r30, r24
    1776:	f9 1f       	adc	r31, r25
    1778:	b1 82       	std	Z+1, r11	; 0x01
    177a:	a0 82       	st	Z, r10
    177c:	2f 5f       	subi	r18, 0xFF	; 255
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	30 93 62 02 	sts	0x0262, r19
    1784:	20 93 61 02 	sts	0x0261, r18
  
  // wrap-around index.
  if (tail == size) tail = 0;
    1788:	80 91 5b 02 	lds	r24, 0x025B
    178c:	90 91 5c 02 	lds	r25, 0x025C
    1790:	28 17       	cp	r18, r24
    1792:	39 07       	cpc	r19, r25
    1794:	21 f4       	brne	.+8      	; 0x179e <_Z10readInputsv+0x25e>
    1796:	10 92 62 02 	sts	0x0262, r1
    179a:	10 92 61 02 	sts	0x0261, r1

  // increase the items.
  items++;
    179e:	80 91 5d 02 	lds	r24, 0x025D
    17a2:	90 91 5e 02 	lds	r25, 0x025E
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	90 93 5e 02 	sts	0x025E, r25
    17ac:	80 93 5d 02 	sts	0x025D, r24
          chip_pending.push(p);
          player_status[p] = CHIP_PENDING;
    17b0:	80 91 40 02 	lds	r24, 0x0240
    17b4:	90 91 41 02 	lds	r25, 0x0241
    17b8:	f7 01       	movw	r30, r14
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
          scheduler.setTimeout(CHIP_LOST_DELAY, checkChips);
    17be:	40 91 3c 02 	lds	r20, 0x023C
    17c2:	50 91 3d 02 	lds	r21, 0x023D
    17c6:	66 27       	eor	r22, r22
    17c8:	57 fd       	sbrc	r21, 7
    17ca:	60 95       	com	r22
    17cc:	76 2f       	mov	r23, r22
    17ce:	8d e5       	ldi	r24, 0x5D	; 93
    17d0:	95 e0       	ldi	r25, 0x05	; 5
    17d2:	29 e4       	ldi	r18, 0x49	; 73
    17d4:	39 e0       	ldi	r19, 0x09	; 9
    17d6:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN11SimpleTimer10setTimeoutElPFvvE>
    17da:	24 c0       	rjmp	.+72     	; 0x1824 <_Z10readInputsv+0x2e4>
        }
        else if (player_status[p] == CHIP_LOST) {
    17dc:	80 91 42 02 	lds	r24, 0x0242
    17e0:	90 91 43 02 	lds	r25, 0x0243
    17e4:	28 17       	cp	r18, r24
    17e6:	39 07       	cpc	r19, r25
    17e8:	e9 f4       	brne	.+58     	; 0x1824 <_Z10readInputsv+0x2e4>
          looserFound(p);
    17ea:	c5 01       	movw	r24, r10
    17ec:	0e 94 01 0a 	call	0x1402	; 0x1402 <_Z11looserFoundi>
    17f0:	19 c0       	rjmp	.+50     	; 0x1824 <_Z10readInputsv+0x2e4>
    17f2:	80 91 51 02 	lds	r24, 0x0251
    17f6:	90 91 52 02 	lds	r25, 0x0252
        }
      }
    }
    else if ((~player_input & B00000001) && game_state == GAME_ACTIVE) {
    17fa:	23 2b       	or	r18, r19
    17fc:	51 f4       	brne	.+20     	; 0x1812 <_Z10readInputsv+0x2d2>
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	91 05       	cpc	r25, r1
    1802:	11 f0       	breq	.+4      	; 0x1808 <_Z10readInputsv+0x2c8>
        player_status[p] = CHIP_ACTIVE;
    }
    else if ((~player_input & B00000001) && game_state == GAME_CHECK_PLAYERS){
    1804:	02 97       	sbiw	r24, 0x02	; 2
    1806:	71 f4       	brne	.+28     	; 0x1824 <_Z10readInputsv+0x2e4>
      player_status[p] = CHIP_ACTIVE;
    1808:	80 91 3e 02 	lds	r24, 0x023E
    180c:	90 91 3f 02 	lds	r25, 0x023F
    1810:	06 c0       	rjmp	.+12     	; 0x181e <_Z10readInputsv+0x2de>
    }
    else if ((player_input & B00000001) && game_state == GAME_CHECK_PLAYERS){
    1812:	02 97       	sbiw	r24, 0x02	; 2
    1814:	39 f4       	brne	.+14     	; 0x1824 <_Z10readInputsv+0x2e4>
      player_status[p] = CHIP_INACTIVE;
    1816:	80 91 44 02 	lds	r24, 0x0244
    181a:	90 91 45 02 	lds	r25, 0x0245
    181e:	f7 01       	movw	r30, r14
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	80 83       	st	Z, r24
    return;
  // send strobe
  digitalWrite(STROBE_PIN, HIGH);
  digitalWrite(STROBE_PIN, LOW);

  for (int p = 0; p < DISPLAY_COUNT; p++) {
    1824:	08 94       	sec
    1826:	a1 1c       	adc	r10, r1
    1828:	b1 1c       	adc	r11, r1
    182a:	22 e0       	ldi	r18, 0x02	; 2
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	e2 0e       	add	r14, r18
    1830:	f3 1e       	adc	r15, r19
    1832:	34 e0       	ldi	r19, 0x04	; 4
    1834:	a3 16       	cp	r10, r19
    1836:	b1 04       	cpc	r11, r1
    1838:	21 f0       	breq	.+8      	; 0x1842 <_Z10readInputsv+0x302>
    183a:	00 e0       	ldi	r16, 0x00	; 0
    183c:	10 e0       	ldi	r17, 0x00	; 0
    183e:	dd 24       	eor	r13, r13
    1840:	bc ce       	rjmp	.-648    	; 0x15ba <_Z10readInputsv+0x7a>
    }
    else if ((player_input & B00000001) && game_state == GAME_CHECK_PLAYERS){
      player_status[p] = CHIP_INACTIVE;
    }
  }
}
    1842:	68 96       	adiw	r28, 0x18	; 24
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	ff 90       	pop	r15
    1858:	ef 90       	pop	r14
    185a:	df 90       	pop	r13
    185c:	bf 90       	pop	r11
    185e:	af 90       	pop	r10
    1860:	9f 90       	pop	r9
    1862:	8f 90       	pop	r8
    1864:	7f 90       	pop	r7
    1866:	6f 90       	pop	r6
    1868:	5f 90       	pop	r5
    186a:	4f 90       	pop	r4
    186c:	3f 90       	pop	r3
    186e:	2f 90       	pop	r2
    1870:	08 95       	ret

00001872 <_Z14setNormalSpeedv>:
void enableButtons() {
  updatePlayerStatus();
  BUTTONS_ENABLED = true;
}

void setNormalSpeed() {
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
  motor_speed = NORMAL_SPEED;
    1876:	80 91 34 02 	lds	r24, 0x0234
    187a:	90 91 35 02 	lds	r25, 0x0235
    187e:	90 93 4d 02 	sts	0x024D, r25
    1882:	80 93 4c 02 	sts	0x024C, r24
  startMotor();
    1886:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_Z10startMotorv>
  scheduler.enable(random_speed_timer);
    188a:	0d e5       	ldi	r16, 0x5D	; 93
    188c:	15 e0       	ldi	r17, 0x05	; 5
    188e:	60 91 53 02 	lds	r22, 0x0253
    1892:	70 91 54 02 	lds	r23, 0x0254
    1896:	c8 01       	movw	r24, r16
    1898:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN11SimpleTimer6enableEi>
  scheduler.enable(random_direction_timer);
    189c:	60 91 55 02 	lds	r22, 0x0255
    18a0:	70 91 56 02 	lds	r23, 0x0256
    18a4:	c8 01       	movw	r24, r16
    18a6:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN11SimpleTimer6enableEi>
}
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <_Z10startRoundv>:
  player_status[p] = CHIP_LOST;
  displays[p].setPlayerStatus(game.getLost(p), game.getTurbo(p));
}

void startRound(){
  game_state = GAME_ACTIVE;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	90 93 52 02 	sts	0x0252, r25
    18b8:	80 93 51 02 	sts	0x0251, r24
  setNormalSpeed();
    18bc:	0e 94 39 0c 	call	0x1872	; 0x1872 <_Z14setNormalSpeedv>
}
    18c0:	08 95       	ret

000018c2 <_Z8sendDatav>:
    }
    analogWrite(SPEED_PIN, motor_speed);
  }
}

void sendData() {
    18c2:	8f 92       	push	r8
    18c4:	9f 92       	push	r9
    18c6:	af 92       	push	r10
    18c8:	bf 92       	push	r11
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	ee 24       	eor	r14, r14
    18da:	ff 24       	eor	r15, r15
    digitalWrite(CLOCK_PIN, LOW);
    digitalWrite(DATA_PIN, LOW);
    digitalWrite(STROBE_PIN, LOW);

    for (int j = DISPLAY_COUNT - 1; j >= 0; j--) {
      shiftOut(DATA_PIN, CLOCK_PIN, LSBFIRST, (1 << i));
    18dc:	51 e0       	ldi	r21, 0x01	; 1
    18de:	85 2e       	mov	r8, r21
    18e0:	91 2c       	mov	r9, r1
      shiftOut(DATA_PIN, CLOCK_PIN, LSBFIRST, displays[j].getColumn(i));
    18e2:	41 ea       	ldi	r20, 0xA1	; 161
    18e4:	a4 2e       	mov	r10, r20
    18e6:	b1 2c       	mov	r11, r1
}

void sendData() {
  for (int i = 0; i < DISPLAY_COLUMNS; i++) {
    // set all low
    digitalWrite(CLOCK_PIN, LOW);
    18e8:	80 91 26 02 	lds	r24, 0x0226
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
    digitalWrite(DATA_PIN, LOW);
    18f2:	80 91 28 02 	lds	r24, 0x0228
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
    digitalWrite(STROBE_PIN, LOW);
    18fc:	80 91 2a 02 	lds	r24, 0x022A
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>

    for (int j = DISPLAY_COUNT - 1; j >= 0; j--) {
      shiftOut(DATA_PIN, CLOCK_PIN, LSBFIRST, (1 << i));
    1906:	c4 01       	movw	r24, r8
    1908:	0e 2c       	mov	r0, r14
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <_Z8sendDatav+0x4e>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <_Z8sendDatav+0x4a>
    1914:	d8 2e       	mov	r13, r24
    1916:	c3 e0       	ldi	r28, 0x03	; 3
    1918:	d0 e0       	ldi	r29, 0x00	; 0
    191a:	80 91 28 02 	lds	r24, 0x0228
    191e:	60 91 26 02 	lds	r22, 0x0226
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	2d 2d       	mov	r18, r13
    1926:	0e 94 52 12 	call	0x24a4	; 0x24a4 <shiftOut>
      shiftOut(DATA_PIN, CLOCK_PIN, LSBFIRST, displays[j].getColumn(i));
    192a:	10 91 28 02 	lds	r17, 0x0228
    192e:	00 91 26 02 	lds	r16, 0x0226
    1932:	ca 9d       	mul	r28, r10
    1934:	c0 01       	movw	r24, r0
    1936:	cb 9d       	mul	r28, r11
    1938:	90 0d       	add	r25, r0
    193a:	da 9d       	mul	r29, r10
    193c:	90 0d       	add	r25, r0
    193e:	11 24       	eor	r1, r1
    1940:	89 58       	subi	r24, 0x89	; 137
    1942:	9d 4f       	sbci	r25, 0xFD	; 253
    1944:	b7 01       	movw	r22, r14
    1946:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <_ZN12MatrixDriver9getColumnEi>
    194a:	28 2f       	mov	r18, r24
    194c:	81 2f       	mov	r24, r17
    194e:	60 2f       	mov	r22, r16
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 52 12 	call	0x24a4	; 0x24a4 <shiftOut>
    // set all low
    digitalWrite(CLOCK_PIN, LOW);
    digitalWrite(DATA_PIN, LOW);
    digitalWrite(STROBE_PIN, LOW);

    for (int j = DISPLAY_COUNT - 1; j >= 0; j--) {
    1956:	21 97       	sbiw	r28, 0x01	; 1
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	cf 3f       	cpi	r28, 0xFF	; 255
    195c:	d8 07       	cpc	r29, r24
    195e:	e9 f6       	brne	.-70     	; 0x191a <_Z8sendDatav+0x58>
      shiftOut(DATA_PIN, CLOCK_PIN, LSBFIRST, (1 << i));
      shiftOut(DATA_PIN, CLOCK_PIN, LSBFIRST, displays[j].getColumn(i));
    }
    // send strobe
    digitalWrite(STROBE_PIN, HIGH);
    1960:	80 91 2a 02 	lds	r24, 0x022A
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
    analogWrite(SPEED_PIN, motor_speed);
  }
}

void sendData() {
  for (int i = 0; i < DISPLAY_COLUMNS; i++) {
    196a:	08 94       	sec
    196c:	e1 1c       	adc	r14, r1
    196e:	f1 1c       	adc	r15, r1
    1970:	88 e0       	ldi	r24, 0x08	; 8
    1972:	e8 16       	cp	r14, r24
    1974:	f1 04       	cpc	r15, r1
    1976:	09 f0       	breq	.+2      	; 0x197a <_Z8sendDatav+0xb8>
    1978:	b7 cf       	rjmp	.-146    	; 0x18e8 <_Z8sendDatav+0x26>
    }
    // send strobe
    digitalWrite(STROBE_PIN, HIGH);
  }
//  readInputs();
}
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	ff 90       	pop	r15
    1984:	ef 90       	pop	r14
    1986:	df 90       	pop	r13
    1988:	bf 90       	pop	r11
    198a:	af 90       	pop	r10
    198c:	9f 90       	pop	r9
    198e:	8f 90       	pop	r8
    1990:	08 95       	ret

00001992 <_Z15randomDirectionv>:
void randomSpeed(){
  motor_speed = random(120, 220);
  startMotor();
}

void randomDirection(){
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
  if (motor_direction == 1 && random(0, 100) > DIRECTION_RANDOM){
    1996:	80 91 38 02 	lds	r24, 0x0238
    199a:	90 91 39 02 	lds	r25, 0x0239
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <_Z15randomDirectionv+0x12>
    19a2:	44 c0       	rjmp	.+136    	; 0x1a2c <_Z15randomDirectionv+0x9a>
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	24 e6       	ldi	r18, 0x64	; 100
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_Z6randomll>
    19b8:	61 35       	cpi	r22, 0x51	; 81
    19ba:	71 05       	cpc	r23, r1
    19bc:	81 05       	cpc	r24, r1
    19be:	91 05       	cpc	r25, r1
    19c0:	ac f1       	brlt	.+106    	; 0x1a2c <_Z15randomDirectionv+0x9a>
    motor_direction = -1;
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	9f ef       	ldi	r25, 0xFF	; 255
    19c6:	90 93 39 02 	sts	0x0239, r25
    19ca:	80 93 38 02 	sts	0x0238, r24
    scheduler.setTimeout(random(1000, 2500), randomDirection);
    19ce:	68 ee       	ldi	r22, 0xE8	; 232
    19d0:	73 e0       	ldi	r23, 0x03	; 3
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	24 ec       	ldi	r18, 0xC4	; 196
    19d8:	39 e0       	ldi	r19, 0x09	; 9
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_Z6randomll>
    19e2:	ab 01       	movw	r20, r22
    19e4:	bc 01       	movw	r22, r24
    19e6:	8d e5       	ldi	r24, 0x5D	; 93
    19e8:	95 e0       	ldi	r25, 0x05	; 5
    19ea:	29 ec       	ldi	r18, 0xC9	; 201
    19ec:	3c e0       	ldi	r19, 0x0C	; 12
    19ee:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN11SimpleTimer10setTimeoutElPFvvE>
    19f2:	17 c0       	rjmp	.+46     	; 0x1a22 <_Z15randomDirectionv+0x90>
  }
  else if (motor_direction == 1 && random(0, 100) > RANDOM_STOP){
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	24 e6       	ldi	r18, 0x64	; 100
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_Z6randomll>
    1a08:	67 34       	cpi	r22, 0x47	; 71
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	81 05       	cpc	r24, r1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	a4 f0       	brlt	.+40     	; 0x1a3a <_Z15randomDirectionv+0xa8>
    motor_direction = 1;
    1a12:	d0 93 39 02 	sts	0x0239, r29
    1a16:	c0 93 38 02 	sts	0x0238, r28
    motor_speed = 0;
    1a1a:	10 92 4d 02 	sts	0x024D, r1
    1a1e:	10 92 4c 02 	sts	0x024C, r1
  }
  else{
    motor_direction = 1;
  }
  startMotor();
    1a22:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_Z10startMotorv>
}
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret
void randomDirection(){
  if (motor_direction == 1 && random(0, 100) > DIRECTION_RANDOM){
    motor_direction = -1;
    scheduler.setTimeout(random(1000, 2500), randomDirection);
  }
  else if (motor_direction == 1 && random(0, 100) > RANDOM_STOP){
    1a2c:	c0 91 38 02 	lds	r28, 0x0238
    1a30:	d0 91 39 02 	lds	r29, 0x0239
    1a34:	c1 30       	cpi	r28, 0x01	; 1
    1a36:	d1 05       	cpc	r29, r1
    1a38:	e9 f2       	breq	.-70     	; 0x19f4 <_Z15randomDirectionv+0x62>
    motor_direction = 1;
    motor_speed = 0;
  }
  else{
    motor_direction = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	90 93 39 02 	sts	0x0239, r25
    1a42:	80 93 38 02 	sts	0x0238, r24
    1a46:	ed cf       	rjmp	.-38     	; 0x1a22 <_Z15randomDirectionv+0x90>

00001a48 <_Z11randomSpeedv>:
  }
  timer_count++;
}

void randomSpeed(){
  motor_speed = random(120, 220);
    1a48:	68 e7       	ldi	r22, 0x78	; 120
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	2c ed       	ldi	r18, 0xDC	; 220
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_Z6randomll>
    1a5c:	70 93 4d 02 	sts	0x024D, r23
    1a60:	60 93 4c 02 	sts	0x024C, r22
  startMotor();
    1a64:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_Z10startMotorv>
}
    1a68:	08 95       	ret

00001a6a <loop>:
  }
}

void loop() {
//  scheduler.scheduler();
  scheduler.run();
    1a6a:	8d e5       	ldi	r24, 0x5D	; 93
    1a6c:	95 e0       	ldi	r25, 0x05	; 5
    1a6e:	0e 94 1f 03 	call	0x63e	; 0x63e <_ZN11SimpleTimer3runEv>
  sendData();
    1a72:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <_Z8sendDatav>
  if (timer_count == 5) {
    1a76:	80 91 4e 02 	lds	r24, 0x024E
    1a7a:	90 91 4f 02 	lds	r25, 0x024F
    1a7e:	05 97       	sbiw	r24, 0x05	; 5
    1a80:	31 f4       	brne	.+12     	; 0x1a8e <loop+0x24>
    readInputs();
    1a82:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_Z10readInputsv>
    timer_count = 0;
    1a86:	10 92 4f 02 	sts	0x024F, r1
    1a8a:	10 92 4e 02 	sts	0x024E, r1
  }
  timer_count++;
    1a8e:	80 91 4e 02 	lds	r24, 0x024E
    1a92:	90 91 4f 02 	lds	r25, 0x024F
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	90 93 4f 02 	sts	0x024F, r25
    1a9c:	80 93 4e 02 	sts	0x024E, r24
}
    1aa0:	08 95       	ret

00001aa2 <_Z14scrollDisplaysv>:
    displays[i].setSingleScrolling(text, size, 1);
//    displays[i].setMultiScrolling(text);
  }
}

void scrollDisplays() {
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	c0 e0       	ldi	r28, 0x00	; 0
    1aac:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    displays[i].scroll();
    1aae:	01 ea       	ldi	r16, 0xA1	; 161
    1ab0:	10 e0       	ldi	r17, 0x00	; 0
    1ab2:	c0 9f       	mul	r28, r16
    1ab4:	c0 01       	movw	r24, r0
    1ab6:	c1 9f       	mul	r28, r17
    1ab8:	90 0d       	add	r25, r0
    1aba:	d0 9f       	mul	r29, r16
    1abc:	90 0d       	add	r25, r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	89 58       	subi	r24, 0x89	; 137
    1ac2:	9d 4f       	sbci	r25, 0xFD	; 253
    1ac4:	0e 94 e7 05 	call	0xbce	; 0xbce <_ZN12MatrixDriver6scrollEv>
//    displays[i].setMultiScrolling(text);
  }
}

void scrollDisplays() {
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    1ac8:	21 96       	adiw	r28, 0x01	; 1
    1aca:	c4 30       	cpi	r28, 0x04	; 4
    1acc:	d1 05       	cpc	r29, r1
    1ace:	89 f7       	brne	.-30     	; 0x1ab2 <_Z14scrollDisplaysv+0x10>
    displays[i].scroll();
  }
}
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <_Z17updateTurboStatusv>:
  enableButtons();
  updatePlayerStatus();
//  game_state = GAME_ACTIVE;
}

void updateTurboStatus() {
    1ada:	0f 93       	push	r16
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
  game.updateTurboStates();
    1ae2:	8b ef       	ldi	r24, 0xFB	; 251
    1ae4:	94 e0       	ldi	r25, 0x04	; 4
    1ae6:	0e 94 94 07 	call	0xf28	; 0xf28 <_ZN12LoopingLouie17updateTurboStatesEv>
    1aea:	c0 e0       	ldi	r28, 0x00	; 0
    1aec:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    displays[i].setTurbo(game.getTurbo(i));
    1aee:	01 ea       	ldi	r16, 0xA1	; 161
    1af0:	10 e0       	ldi	r17, 0x00	; 0
    1af2:	8b ef       	ldi	r24, 0xFB	; 251
    1af4:	94 e0       	ldi	r25, 0x04	; 4
    1af6:	be 01       	movw	r22, r28
    1af8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN12LoopingLouie8getTurboEi>
    1afc:	bc 01       	movw	r22, r24
    1afe:	c0 9f       	mul	r28, r16
    1b00:	c0 01       	movw	r24, r0
    1b02:	c1 9f       	mul	r28, r17
    1b04:	90 0d       	add	r25, r0
    1b06:	d0 9f       	mul	r29, r16
    1b08:	90 0d       	add	r25, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	89 58       	subi	r24, 0x89	; 137
    1b0e:	9d 4f       	sbci	r25, 0xFD	; 253
    1b10:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZN12MatrixDriver8setTurboEi>
//  game_state = GAME_ACTIVE;
}

void updateTurboStatus() {
  game.updateTurboStates();
  for (int i = 0; i < DISPLAY_COUNT; i++) {
    1b14:	21 96       	adiw	r28, 0x01	; 1
    1b16:	c4 30       	cpi	r28, 0x04	; 4
    1b18:	d1 05       	cpc	r29, r1
    1b1a:	59 f7       	brne	.-42     	; 0x1af2 <_Z17updateTurboStatusv+0x18>
    displays[i].setTurbo(game.getTurbo(i));
  }
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	08 95       	ret

00001b26 <setup>:

// SCHEDULER
//looper scheduler;
SimpleTimer scheduler;

void setup() {
    1b26:	af 92       	push	r10
    1b28:	bf 92       	push	r11
    1b2a:	cf 92       	push	r12
    1b2c:	df 92       	push	r13
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	af 97       	sbiw	r28, 0x2f	; 47
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
  pinMode(CLOCK_PIN, OUTPUT);
    1b4a:	80 91 26 02 	lds	r24, 0x0226
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <pinMode>
  pinMode(DATA_PIN, OUTPUT);
    1b54:	80 91 28 02 	lds	r24, 0x0228
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <pinMode>
  pinMode(STROBE_PIN, OUTPUT);
    1b5e:	80 91 2a 02 	lds	r24, 0x022A
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <pinMode>
  pinMode(SPEED_PIN, OUTPUT);
    1b68:	80 91 2e 02 	lds	r24, 0x022E
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <pinMode>
  pinMode(DIRECTION_PIN_1, OUTPUT);
    1b72:	80 91 30 02 	lds	r24, 0x0230
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <pinMode>
  pinMode(DIRECTION_PIN_2, OUTPUT);
    1b7c:	80 91 32 02 	lds	r24, 0x0232
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <pinMode>

  pinMode(INPUT_PIN, INPUT);
    1b86:	80 91 2c 02 	lds	r24, 0x022C
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <pinMode>

  char text[] = " <<LOOPING LENI>> Let's get ready to drink!   ";
    1b90:	de 01       	movw	r26, r28
    1b92:	11 96       	adiw	r26, 0x01	; 1
    1b94:	e3 ef       	ldi	r30, 0xF3	; 243
    1b96:	f1 e0       	ldi	r31, 0x01	; 1
    1b98:	8f e2       	ldi	r24, 0x2F	; 47
    1b9a:	01 90       	ld	r0, Z+
    1b9c:	0d 92       	st	X+, r0
    1b9e:	81 50       	subi	r24, 0x01	; 1
    1ba0:	e1 f7       	brne	.-8      	; 0x1b9a <setup+0x74>
    1ba2:	ee 24       	eor	r14, r14
    1ba4:	ff 24       	eor	r15, r15

  for (int i = 0; i < DISPLAY_COUNT; i++) {
    displays[i].setPosition(i);
    1ba6:	61 ea       	ldi	r22, 0xA1	; 161
    1ba8:	a6 2e       	mov	r10, r22
    1baa:	b1 2c       	mov	r11, r1
    displays[i].setMultiScrolling(text, sizeof(text));
    1bac:	6e 01       	movw	r12, r28
    1bae:	08 94       	sec
    1bb0:	c1 1c       	adc	r12, r1
    1bb2:	d1 1c       	adc	r13, r1
  pinMode(INPUT_PIN, INPUT);

  char text[] = " <<LOOPING LENI>> Let's get ready to drink!   ";

  for (int i = 0; i < DISPLAY_COUNT; i++) {
    displays[i].setPosition(i);
    1bb4:	ea 9c       	mul	r14, r10
    1bb6:	80 01       	movw	r16, r0
    1bb8:	eb 9c       	mul	r14, r11
    1bba:	10 0d       	add	r17, r0
    1bbc:	fa 9c       	mul	r15, r10
    1bbe:	10 0d       	add	r17, r0
    1bc0:	11 24       	eor	r1, r1
    1bc2:	09 58       	subi	r16, 0x89	; 137
    1bc4:	1d 4f       	sbci	r17, 0xFD	; 253
    1bc6:	c8 01       	movw	r24, r16
    1bc8:	b7 01       	movw	r22, r14
    1bca:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN12MatrixDriver11setPositionEi>
    displays[i].setMultiScrolling(text, sizeof(text));
    1bce:	c8 01       	movw	r24, r16
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	4f e2       	ldi	r20, 0x2F	; 47
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZN12MatrixDriver17setMultiScrollingEPci>

  pinMode(INPUT_PIN, INPUT);

  char text[] = " <<LOOPING LENI>> Let's get ready to drink!   ";

  for (int i = 0; i < DISPLAY_COUNT; i++) {
    1bda:	08 94       	sec
    1bdc:	e1 1c       	adc	r14, r1
    1bde:	f1 1c       	adc	r15, r1
    1be0:	84 e0       	ldi	r24, 0x04	; 4
    1be2:	e8 16       	cp	r14, r24
    1be4:	f1 04       	cpc	r15, r1
    1be6:	31 f7       	brne	.-52     	; 0x1bb4 <setup+0x8e>
    displays[i].setPosition(i);
    displays[i].setMultiScrolling(text, sizeof(text));
  }
  analogWrite(SPEED_PIN, 0);
    1be8:	80 91 2e 02 	lds	r24, 0x022E
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	70 e0       	ldi	r23, 0x00	; 0
    1bf0:	0e 94 0c 11 	call	0x2218	; 0x2218 <analogWrite>
  digitalWrite(DIRECTION_PIN_1, HIGH);
    1bf4:	80 91 30 02 	lds	r24, 0x0230
    1bf8:	61 e0       	ldi	r22, 0x01	; 1
    1bfa:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
  digitalWrite(DIRECTION_PIN_2, LOW);
    1bfe:	80 91 32 02 	lds	r24, 0x0232
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>


  scheduler.setInterval(30, scrollDisplays);
    1c08:	8d e5       	ldi	r24, 0x5D	; 93
    1c0a:	95 e0       	ldi	r25, 0x05	; 5
    1c0c:	4e e1       	ldi	r20, 0x1E	; 30
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	21 e5       	ldi	r18, 0x51	; 81
    1c16:	3d e0       	ldi	r19, 0x0D	; 13
    1c18:	0e 94 16 03 	call	0x62c	; 0x62c <_ZN11SimpleTimer11setIntervalElPFvvE>
  scheduler.setInterval(250, updateTurboStatus);
    1c1c:	8d e5       	ldi	r24, 0x5D	; 93
    1c1e:	95 e0       	ldi	r25, 0x05	; 5
    1c20:	4a ef       	ldi	r20, 0xFA	; 250
    1c22:	50 e0       	ldi	r21, 0x00	; 0
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	2d e6       	ldi	r18, 0x6D	; 109
    1c2a:	3d e0       	ldi	r19, 0x0D	; 13
    1c2c:	0e 94 16 03 	call	0x62c	; 0x62c <_ZN11SimpleTimer11setIntervalElPFvvE>
  scheduler.setTimeout(21000, startGame);
    1c30:	8d e5       	ldi	r24, 0x5D	; 93
    1c32:	95 e0       	ldi	r25, 0x05	; 5
    1c34:	48 e0       	ldi	r20, 0x08	; 8
    1c36:	52 e5       	ldi	r21, 0x52	; 82
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	25 ef       	ldi	r18, 0xF5	; 245
    1c3e:	39 e0       	ldi	r19, 0x09	; 9
    1c40:	0e 94 0d 03 	call	0x61a	; 0x61a <_ZN11SimpleTimer10setTimeoutElPFvvE>

  //MOTOR SCHEDULE
  random_speed_timer = scheduler.setInterval(2000, randomSpeed);
    1c44:	8d e5       	ldi	r24, 0x5D	; 93
    1c46:	95 e0       	ldi	r25, 0x05	; 5
    1c48:	40 ed       	ldi	r20, 0xD0	; 208
    1c4a:	57 e0       	ldi	r21, 0x07	; 7
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	24 e2       	ldi	r18, 0x24	; 36
    1c52:	3d e0       	ldi	r19, 0x0D	; 13
    1c54:	0e 94 16 03 	call	0x62c	; 0x62c <_ZN11SimpleTimer11setIntervalElPFvvE>
    1c58:	90 93 54 02 	sts	0x0254, r25
    1c5c:	80 93 53 02 	sts	0x0253, r24
  random_direction_timer = scheduler.setInterval(3000, randomDirection);
    1c60:	8d e5       	ldi	r24, 0x5D	; 93
    1c62:	95 e0       	ldi	r25, 0x05	; 5
    1c64:	48 eb       	ldi	r20, 0xB8	; 184
    1c66:	5b e0       	ldi	r21, 0x0B	; 11
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	29 ec       	ldi	r18, 0xC9	; 201
    1c6e:	3c e0       	ldi	r19, 0x0C	; 12
    1c70:	0e 94 16 03 	call	0x62c	; 0x62c <_ZN11SimpleTimer11setIntervalElPFvvE>
    1c74:	90 93 56 02 	sts	0x0256, r25
    1c78:	80 93 55 02 	sts	0x0255, r24
}
    1c7c:	af 96       	adiw	r28, 0x2f	; 47
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	ff 90       	pop	r15
    1c92:	ef 90       	pop	r14
    1c94:	df 90       	pop	r13
    1c96:	cf 90       	pop	r12
    1c98:	bf 90       	pop	r11
    1c9a:	af 90       	pop	r10
    1c9c:	08 95       	ret

00001c9e <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	91 05       	cpc	r25, r1
    1cac:	10 f4       	brcc	.+4      	; 0x1cb2 <malloc+0x14>
    1cae:	62 e0       	ldi	r22, 0x02	; 2
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    1cb2:	e0 91 14 06 	lds	r30, 0x0614
    1cb6:	f0 91 15 06 	lds	r31, 0x0615
    1cba:	a0 e0       	ldi	r26, 0x00	; 0
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	24 c0       	rjmp	.+72     	; 0x1d0c <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	86 17       	cp	r24, r22
    1cca:	97 07       	cpc	r25, r23
    1ccc:	d0 f0       	brcs	.+52     	; 0x1d02 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    1cce:	86 17       	cp	r24, r22
    1cd0:	97 07       	cpc	r25, r23
    1cd2:	71 f4       	brne	.+28     	; 0x1cf0 <malloc+0x52>
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    1cd8:	10 97       	sbiw	r26, 0x00	; 0
    1cda:	29 f0       	breq	.+10     	; 0x1ce6 <malloc+0x48>
				fp2->nx = fp1->nx;
    1cdc:	13 96       	adiw	r26, 0x03	; 3
    1cde:	9c 93       	st	X, r25
    1ce0:	8e 93       	st	-X, r24
    1ce2:	12 97       	sbiw	r26, 0x02	; 2
    1ce4:	2c c0       	rjmp	.+88     	; 0x1d3e <malloc+0xa0>
			else
				__flp = fp1->nx;
    1ce6:	90 93 15 06 	sts	0x0615, r25
    1cea:	80 93 14 06 	sts	0x0614, r24
    1cee:	27 c0       	rjmp	.+78     	; 0x1d3e <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    1cf0:	41 15       	cp	r20, r1
    1cf2:	51 05       	cpc	r21, r1
    1cf4:	19 f0       	breq	.+6      	; 0x1cfc <malloc+0x5e>
    1cf6:	84 17       	cp	r24, r20
    1cf8:	95 07       	cpc	r25, r21
    1cfa:	18 f4       	brcc	.+6      	; 0x1d02 <malloc+0x64>
    1cfc:	ef 01       	movw	r28, r30
    1cfe:	8d 01       	movw	r16, r26
    1d00:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    1d02:	df 01       	movw	r26, r30
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	9c 01       	movw	r18, r24
    1d0a:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    1d0c:	30 97       	sbiw	r30, 0x00	; 0
    1d0e:	d1 f6       	brne	.-76     	; 0x1cc4 <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    1d10:	41 15       	cp	r20, r1
    1d12:	51 05       	cpc	r21, r1
    1d14:	f9 f0       	breq	.+62     	; 0x1d54 <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    1d16:	ca 01       	movw	r24, r20
    1d18:	86 1b       	sub	r24, r22
    1d1a:	97 0b       	sbc	r25, r23
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	91 05       	cpc	r25, r1
    1d20:	80 f4       	brcc	.+32     	; 0x1d42 <malloc+0xa4>
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    1d26:	01 15       	cp	r16, r1
    1d28:	11 05       	cpc	r17, r1
    1d2a:	21 f0       	breq	.+8      	; 0x1d34 <malloc+0x96>
				sfp2->nx = sfp1->nx;
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	93 83       	std	Z+3, r25	; 0x03
    1d30:	82 83       	std	Z+2, r24	; 0x02
    1d32:	04 c0       	rjmp	.+8      	; 0x1d3c <malloc+0x9e>
			else
				__flp = sfp1->nx;
    1d34:	90 93 15 06 	sts	0x0615, r25
    1d38:	80 93 14 06 	sts	0x0614, r24
			return &(sfp1->nx);
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	32 96       	adiw	r30, 0x02	; 2
    1d40:	45 c0       	rjmp	.+138    	; 0x1dcc <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    1d42:	fe 01       	movw	r30, r28
    1d44:	e8 0f       	add	r30, r24
    1d46:	f9 1f       	adc	r31, r25
    1d48:	61 93       	st	Z+, r22
    1d4a:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    1d4c:	02 97       	sbiw	r24, 0x02	; 2
    1d4e:	99 83       	std	Y+1, r25	; 0x01
    1d50:	88 83       	st	Y, r24
    1d52:	3c c0       	rjmp	.+120    	; 0x1dcc <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    1d54:	80 91 12 06 	lds	r24, 0x0612
    1d58:	90 91 13 06 	lds	r25, 0x0613
    1d5c:	89 2b       	or	r24, r25
    1d5e:	41 f4       	brne	.+16     	; 0x1d70 <malloc+0xd2>
		__brkval = __malloc_heap_start;
    1d60:	80 91 48 02 	lds	r24, 0x0248
    1d64:	90 91 49 02 	lds	r25, 0x0249
    1d68:	90 93 13 06 	sts	0x0613, r25
    1d6c:	80 93 12 06 	sts	0x0612, r24
	cp = __malloc_heap_end;
    1d70:	40 91 4a 02 	lds	r20, 0x024A
    1d74:	50 91 4b 02 	lds	r21, 0x024B
	if (cp == 0)
    1d78:	41 15       	cp	r20, r1
    1d7a:	51 05       	cpc	r21, r1
    1d7c:	41 f4       	brne	.+16     	; 0x1d8e <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    1d7e:	4d b7       	in	r20, 0x3d	; 61
    1d80:	5e b7       	in	r21, 0x3e	; 62
    1d82:	80 91 46 02 	lds	r24, 0x0246
    1d86:	90 91 47 02 	lds	r25, 0x0247
    1d8a:	48 1b       	sub	r20, r24
    1d8c:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    1d8e:	20 91 12 06 	lds	r18, 0x0612
    1d92:	30 91 13 06 	lds	r19, 0x0613
    1d96:	24 17       	cp	r18, r20
    1d98:	35 07       	cpc	r19, r21
    1d9a:	b0 f4       	brcc	.+44     	; 0x1dc8 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    1d9c:	ca 01       	movw	r24, r20
    1d9e:	82 1b       	sub	r24, r18
    1da0:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    1da2:	86 17       	cp	r24, r22
    1da4:	97 07       	cpc	r25, r23
    1da6:	80 f0       	brcs	.+32     	; 0x1dc8 <malloc+0x12a>
    1da8:	ab 01       	movw	r20, r22
    1daa:	4e 5f       	subi	r20, 0xFE	; 254
    1dac:	5f 4f       	sbci	r21, 0xFF	; 255
    1dae:	84 17       	cp	r24, r20
    1db0:	95 07       	cpc	r25, r21
    1db2:	50 f0       	brcs	.+20     	; 0x1dc8 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    1db4:	42 0f       	add	r20, r18
    1db6:	53 1f       	adc	r21, r19
    1db8:	50 93 13 06 	sts	0x0613, r21
    1dbc:	40 93 12 06 	sts	0x0612, r20
		fp1->sz = len;
    1dc0:	f9 01       	movw	r30, r18
    1dc2:	61 93       	st	Z+, r22
    1dc4:	71 93       	st	Z+, r23
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <malloc+0x12e>
		return &(fp1->nx);
    1dc8:	e0 e0       	ldi	r30, 0x00	; 0
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    1dcc:	cf 01       	movw	r24, r30
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	08 95       	ret

00001dd8 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	9c 01       	movw	r18, r24
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <free+0xc>
    1de2:	8f c0       	rjmp	.+286    	; 0x1f02 <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    1de4:	ec 01       	movw	r28, r24
    1de6:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    1de8:	1b 82       	std	Y+3, r1	; 0x03
    1dea:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    1dec:	60 91 14 06 	lds	r22, 0x0614
    1df0:	70 91 15 06 	lds	r23, 0x0615
    1df4:	61 15       	cp	r22, r1
    1df6:	71 05       	cpc	r23, r1
    1df8:	81 f4       	brne	.+32     	; 0x1e1a <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    1dfa:	88 81       	ld	r24, Y
    1dfc:	99 81       	ldd	r25, Y+1	; 0x01
    1dfe:	82 0f       	add	r24, r18
    1e00:	93 1f       	adc	r25, r19
    1e02:	20 91 12 06 	lds	r18, 0x0612
    1e06:	30 91 13 06 	lds	r19, 0x0613
    1e0a:	28 17       	cp	r18, r24
    1e0c:	39 07       	cpc	r19, r25
    1e0e:	39 f5       	brne	.+78     	; 0x1e5e <free+0x86>
			__brkval = cpnew;
    1e10:	d0 93 13 06 	sts	0x0613, r29
    1e14:	c0 93 12 06 	sts	0x0612, r28
    1e18:	74 c0       	rjmp	.+232    	; 0x1f02 <free+0x12a>
		else
			__flp = fpnew;
    1e1a:	db 01       	movw	r26, r22
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    1e20:	ac 17       	cp	r26, r28
    1e22:	bd 07       	cpc	r27, r29
    1e24:	08 f1       	brcs	.+66     	; 0x1e68 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    1e26:	bb 83       	std	Y+3, r27	; 0x03
    1e28:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	21 91       	ld	r18, Z+
    1e2e:	31 91       	ld	r19, Z+
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	ae 17       	cp	r26, r30
    1e36:	bf 07       	cpc	r27, r31
    1e38:	79 f4       	brne	.+30     	; 0x1e58 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    1e3a:	8d 91       	ld	r24, X+
    1e3c:	9c 91       	ld	r25, X
    1e3e:	11 97       	sbiw	r26, 0x01	; 1
    1e40:	28 0f       	add	r18, r24
    1e42:	39 1f       	adc	r19, r25
    1e44:	2e 5f       	subi	r18, 0xFE	; 254
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	39 83       	std	Y+1, r19	; 0x01
    1e4a:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    1e4c:	12 96       	adiw	r26, 0x02	; 2
    1e4e:	8d 91       	ld	r24, X+
    1e50:	9c 91       	ld	r25, X
    1e52:	13 97       	sbiw	r26, 0x03	; 3
    1e54:	9b 83       	std	Y+3, r25	; 0x03
    1e56:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    1e58:	41 15       	cp	r20, r1
    1e5a:	51 05       	cpc	r21, r1
    1e5c:	71 f4       	brne	.+28     	; 0x1e7a <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    1e5e:	d0 93 15 06 	sts	0x0615, r29
    1e62:	c0 93 14 06 	sts	0x0614, r28
    1e66:	4d c0       	rjmp	.+154    	; 0x1f02 <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    1e68:	12 96       	adiw	r26, 0x02	; 2
    1e6a:	8d 91       	ld	r24, X+
    1e6c:	9c 91       	ld	r25, X
    1e6e:	13 97       	sbiw	r26, 0x03	; 3
    1e70:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	11 f0       	breq	.+4      	; 0x1e7a <free+0xa2>
    1e76:	dc 01       	movw	r26, r24
    1e78:	d3 cf       	rjmp	.-90     	; 0x1e20 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    1e7a:	da 01       	movw	r26, r20
    1e7c:	13 96       	adiw	r26, 0x03	; 3
    1e7e:	dc 93       	st	X, r29
    1e80:	ce 93       	st	-X, r28
    1e82:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    1e84:	fa 01       	movw	r30, r20
    1e86:	21 91       	ld	r18, Z+
    1e88:	31 91       	ld	r19, Z+
    1e8a:	e2 0f       	add	r30, r18
    1e8c:	f3 1f       	adc	r31, r19
    1e8e:	ce 17       	cp	r28, r30
    1e90:	df 07       	cpc	r29, r31
    1e92:	69 f4       	brne	.+26     	; 0x1eae <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    1e94:	88 81       	ld	r24, Y
    1e96:	99 81       	ldd	r25, Y+1	; 0x01
    1e98:	28 0f       	add	r18, r24
    1e9a:	39 1f       	adc	r19, r25
    1e9c:	2e 5f       	subi	r18, 0xFE	; 254
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	fa 01       	movw	r30, r20
    1ea2:	31 83       	std	Z+1, r19	; 0x01
    1ea4:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eaa:	93 83       	std	Z+3, r25	; 0x03
    1eac:	82 83       	std	Z+2, r24	; 0x02
    1eae:	e0 e0       	ldi	r30, 0x00	; 0
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    1eb2:	db 01       	movw	r26, r22
    1eb4:	12 96       	adiw	r26, 0x02	; 2
    1eb6:	8d 91       	ld	r24, X+
    1eb8:	9c 91       	ld	r25, X
    1eba:	13 97       	sbiw	r26, 0x03	; 3
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	19 f0       	breq	.+6      	; 0x1ec6 <free+0xee>
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	fd 01       	movw	r30, r26
    1ec4:	f6 cf       	rjmp	.-20     	; 0x1eb2 <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    1ec6:	ab 01       	movw	r20, r22
    1ec8:	4e 5f       	subi	r20, 0xFE	; 254
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    1ecc:	db 01       	movw	r26, r22
    1ece:	8d 91       	ld	r24, X+
    1ed0:	9c 91       	ld	r25, X
    1ed2:	84 0f       	add	r24, r20
    1ed4:	95 1f       	adc	r25, r21
    1ed6:	20 91 12 06 	lds	r18, 0x0612
    1eda:	30 91 13 06 	lds	r19, 0x0613
    1ede:	28 17       	cp	r18, r24
    1ee0:	39 07       	cpc	r19, r25
    1ee2:	79 f4       	brne	.+30     	; 0x1f02 <free+0x12a>
		if (fp2 == NULL)
    1ee4:	30 97       	sbiw	r30, 0x00	; 0
    1ee6:	29 f4       	brne	.+10     	; 0x1ef2 <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    1ee8:	10 92 15 06 	sts	0x0615, r1
    1eec:	10 92 14 06 	sts	0x0614, r1
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <free+0x11e>
		else
			fp2->nx = NULL;
    1ef2:	13 82       	std	Z+3, r1	; 0x03
    1ef4:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    1ef6:	42 50       	subi	r20, 0x02	; 2
    1ef8:	50 40       	sbci	r21, 0x00	; 0
    1efa:	50 93 13 06 	sts	0x0613, r21
    1efe:	40 93 12 06 	sts	0x0612, r20
	}
}
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	08 95       	ret

00001f08 <_ZN5Print7printlnEv>:

size_t Print::println(void)
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1f12:	dc 01       	movw	r26, r24
    1f14:	ed 91       	ld	r30, X+
    1f16:	fc 91       	ld	r31, X
    1f18:	01 90       	ld	r0, Z+
    1f1a:	f0 81       	ld	r31, Z
    1f1c:	e0 2d       	mov	r30, r0
    1f1e:	6d e0       	ldi	r22, 0x0D	; 13
    1f20:	09 95       	icall
    1f22:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    1f24:	d8 01       	movw	r26, r16
    1f26:	ed 91       	ld	r30, X+
    1f28:	fc 91       	ld	r31, X
    1f2a:	01 90       	ld	r0, Z+
    1f2c:	f0 81       	ld	r31, Z
    1f2e:	e0 2d       	mov	r30, r0
    1f30:	c8 01       	movw	r24, r16
    1f32:	6a e0       	ldi	r22, 0x0A	; 10
    1f34:	09 95       	icall
    1f36:	9c 01       	movw	r18, r24
    1f38:	2e 0d       	add	r18, r14
    1f3a:	3f 1d       	adc	r19, r15
    1f3c:	c9 01       	movw	r24, r18
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	08 95       	ret

00001f48 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
    1f4e:	61 15       	cp	r22, r1
    1f50:	71 05       	cpc	r23, r1
    1f52:	19 f4       	brne	.+6      	; 0x1f5a <_ZN5Print5writeEPKc+0x12>
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
    1f5a:	db 01       	movw	r26, r22
    1f5c:	0d 90       	ld	r0, X+
    1f5e:	00 20       	and	r0, r0
    1f60:	e9 f7       	brne	.-6      	; 0x1f5c <_ZN5Print5writeEPKc+0x14>
    1f62:	11 97       	sbiw	r26, 0x01	; 1
    1f64:	a6 1b       	sub	r26, r22
    1f66:	b7 0b       	sbc	r27, r23
    1f68:	e8 81       	ld	r30, Y
    1f6a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f6c:	02 80       	ldd	r0, Z+2	; 0x02
    1f6e:	f3 81       	ldd	r31, Z+3	; 0x03
    1f70:	e0 2d       	mov	r30, r0
    1f72:	ad 01       	movw	r20, r26
    1f74:	09 95       	icall
    1f76:	9c 01       	movw	r18, r24
    }
    1f78:	c9 01       	movw	r24, r18
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	08 95       	ret

00001f80 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1f8a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <_ZN5Print5writeEPKc>
    1f8e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1f90:	c7 01       	movw	r24, r14
    1f92:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN5Print7printlnEv>
    1f96:	08 0f       	add	r16, r24
    1f98:	19 1f       	adc	r17, r25
  return n;
}
    1f9a:	c8 01       	movw	r24, r16
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	ff 90       	pop	r15
    1fa2:	ef 90       	pop	r14
    1fa4:	08 95       	ret

00001fa6 <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	7b 01       	movw	r14, r22
    1fb0:	8c 01       	movw	r16, r24
{
  if (howbig == 0) {
    1fb2:	61 15       	cp	r22, r1
    1fb4:	71 05       	cpc	r23, r1
    1fb6:	81 05       	cpc	r24, r1
    1fb8:	91 05       	cpc	r25, r1
    1fba:	29 f4       	brne	.+10     	; 0x1fc6 <_Z6randoml+0x20>
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	0b c0       	rjmp	.+22     	; 0x1fdc <_Z6randoml+0x36>
    return 0;
  }
  return random() % howbig;
    1fc6:	0e 94 77 02 	call	0x4ee	; 0x4ee <random>
    1fca:	a8 01       	movw	r20, r16
    1fcc:	97 01       	movw	r18, r14
    1fce:	0e 94 ef 14 	call	0x29de	; 0x29de <__divmodsi4>
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	da 01       	movw	r26, r20
    1fd8:	9c 01       	movw	r18, r24
    1fda:	ad 01       	movw	r20, r26
}
    1fdc:	b9 01       	movw	r22, r18
    1fde:	ca 01       	movw	r24, r20
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	08 95       	ret

00001fea <_Z6randomll>:

long random(long howsmall, long howbig)
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	7b 01       	movw	r14, r22
    1ff4:	8c 01       	movw	r16, r24
{
  if (howsmall >= howbig) {
    1ff6:	62 17       	cp	r22, r18
    1ff8:	73 07       	cpc	r23, r19
    1ffa:	84 07       	cpc	r24, r20
    1ffc:	95 07       	cpc	r25, r21
    1ffe:	64 f4       	brge	.+24     	; 0x2018 <_Z6randomll+0x2e>
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2000:	26 1b       	sub	r18, r22
    2002:	37 0b       	sbc	r19, r23
    2004:	48 0b       	sbc	r20, r24
    2006:	59 0b       	sbc	r21, r25
    2008:	ca 01       	movw	r24, r20
    200a:	b9 01       	movw	r22, r18
    200c:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <_Z6randoml>
    2010:	e6 0e       	add	r14, r22
    2012:	f7 1e       	adc	r15, r23
    2014:	08 1f       	adc	r16, r24
    2016:	19 1f       	adc	r17, r25
}
    2018:	b7 01       	movw	r22, r14
    201a:	c8 01       	movw	r24, r16
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	08 95       	ret

00002026 <main>:
#include <Arduino.h>

int main(void)
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
{
	init();
    202a:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    202e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2032:	c0 e0       	ldi	r28, 0x00	; 0
    2034:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2036:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <loop>
		if (serialEventRun) serialEventRun();
    203a:	20 97       	sbiw	r28, 0x00	; 0
    203c:	e1 f3       	breq	.-8      	; 0x2036 <main+0x10>
    203e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2042:	f9 cf       	rjmp	.-14     	; 0x2036 <main+0x10>

00002044 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	2f 93       	push	r18
    2050:	3f 93       	push	r19
    2052:	8f 93       	push	r24
    2054:	9f 93       	push	r25
    2056:	af 93       	push	r26
    2058:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    205a:	80 91 0d 06 	lds	r24, 0x060D
    205e:	90 91 0e 06 	lds	r25, 0x060E
    2062:	a0 91 0f 06 	lds	r26, 0x060F
    2066:	b0 91 10 06 	lds	r27, 0x0610
	unsigned char f = timer0_fract;
    206a:	30 91 11 06 	lds	r19, 0x0611

	m += MILLIS_INC;
    206e:	01 96       	adiw	r24, 0x01	; 1
    2070:	a1 1d       	adc	r26, r1
    2072:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2074:	23 2f       	mov	r18, r19
    2076:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2078:	2d 37       	cpi	r18, 0x7D	; 125
    207a:	20 f0       	brcs	.+8      	; 0x2084 <__vector_16+0x40>
		f -= FRACT_MAX;
    207c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	a1 1d       	adc	r26, r1
    2082:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2084:	20 93 11 06 	sts	0x0611, r18
	timer0_millis = m;
    2088:	80 93 0d 06 	sts	0x060D, r24
    208c:	90 93 0e 06 	sts	0x060E, r25
    2090:	a0 93 0f 06 	sts	0x060F, r26
    2094:	b0 93 10 06 	sts	0x0610, r27
	timer0_overflow_count++;
    2098:	80 91 09 06 	lds	r24, 0x0609
    209c:	90 91 0a 06 	lds	r25, 0x060A
    20a0:	a0 91 0b 06 	lds	r26, 0x060B
    20a4:	b0 91 0c 06 	lds	r27, 0x060C
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	a1 1d       	adc	r26, r1
    20ac:	b1 1d       	adc	r27, r1
    20ae:	80 93 09 06 	sts	0x0609, r24
    20b2:	90 93 0a 06 	sts	0x060A, r25
    20b6:	a0 93 0b 06 	sts	0x060B, r26
    20ba:	b0 93 0c 06 	sts	0x060C, r27
}
    20be:	bf 91       	pop	r27
    20c0:	af 91       	pop	r26
    20c2:	9f 91       	pop	r25
    20c4:	8f 91       	pop	r24
    20c6:	3f 91       	pop	r19
    20c8:	2f 91       	pop	r18
    20ca:	0f 90       	pop	r0
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	0f 90       	pop	r0
    20d0:	1f 90       	pop	r1
    20d2:	18 95       	reti

000020d4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    20d4:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    20d6:	f8 94       	cli
	m = timer0_millis;
    20d8:	20 91 0d 06 	lds	r18, 0x060D
    20dc:	30 91 0e 06 	lds	r19, 0x060E
    20e0:	40 91 0f 06 	lds	r20, 0x060F
    20e4:	50 91 10 06 	lds	r21, 0x0610
	SREG = oldSREG;
    20e8:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    20ea:	b9 01       	movw	r22, r18
    20ec:	ca 01       	movw	r24, r20
    20ee:	08 95       	ret

000020f0 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    20f0:	9b 01       	movw	r18, r22
    20f2:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    20f4:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    20f6:	f8 94       	cli
	m = timer0_overflow_count;
    20f8:	80 91 09 06 	lds	r24, 0x0609
    20fc:	90 91 0a 06 	lds	r25, 0x060A
    2100:	a0 91 0b 06 	lds	r26, 0x060B
    2104:	b0 91 0c 06 	lds	r27, 0x060C
#if defined(TCNT0)
	t = TCNT0;
    2108:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    210a:	a8 9b       	sbis	0x15, 0	; 21
    210c:	05 c0       	rjmp	.+10     	; 0x2118 <delay+0x28>
    210e:	6f 3f       	cpi	r22, 0xFF	; 255
    2110:	19 f0       	breq	.+6      	; 0x2118 <delay+0x28>
		m++;
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	a1 1d       	adc	r26, r1
    2116:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2118:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    211a:	ba 2f       	mov	r27, r26
    211c:	a9 2f       	mov	r26, r25
    211e:	98 2f       	mov	r25, r24
    2120:	88 27       	eor	r24, r24
    2122:	86 0f       	add	r24, r22
    2124:	91 1d       	adc	r25, r1
    2126:	a1 1d       	adc	r26, r1
    2128:	b1 1d       	adc	r27, r1
    212a:	62 e0       	ldi	r22, 0x02	; 2
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	aa 1f       	adc	r26, r26
    2132:	bb 1f       	adc	r27, r27
    2134:	6a 95       	dec	r22
    2136:	d1 f7       	brne	.-12     	; 0x212c <delay+0x3c>
    2138:	bc 01       	movw	r22, r24
    213a:	2d c0       	rjmp	.+90     	; 0x2196 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    213c:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    213e:	f8 94       	cli
	m = timer0_overflow_count;
    2140:	80 91 09 06 	lds	r24, 0x0609
    2144:	90 91 0a 06 	lds	r25, 0x060A
    2148:	a0 91 0b 06 	lds	r26, 0x060B
    214c:	b0 91 0c 06 	lds	r27, 0x060C
#if defined(TCNT0)
	t = TCNT0;
    2150:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2152:	a8 9b       	sbis	0x15, 0	; 21
    2154:	05 c0       	rjmp	.+10     	; 0x2160 <delay+0x70>
    2156:	ef 3f       	cpi	r30, 0xFF	; 255
    2158:	19 f0       	breq	.+6      	; 0x2160 <delay+0x70>
		m++;
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	a1 1d       	adc	r26, r1
    215e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2160:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    2162:	ba 2f       	mov	r27, r26
    2164:	a9 2f       	mov	r26, r25
    2166:	98 2f       	mov	r25, r24
    2168:	88 27       	eor	r24, r24
    216a:	8e 0f       	add	r24, r30
    216c:	91 1d       	adc	r25, r1
    216e:	a1 1d       	adc	r26, r1
    2170:	b1 1d       	adc	r27, r1
    2172:	e2 e0       	ldi	r30, 0x02	; 2
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	aa 1f       	adc	r26, r26
    217a:	bb 1f       	adc	r27, r27
    217c:	ea 95       	dec	r30
    217e:	d1 f7       	brne	.-12     	; 0x2174 <delay+0x84>
    2180:	86 1b       	sub	r24, r22
    2182:	97 0b       	sbc	r25, r23
    2184:	88 5e       	subi	r24, 0xE8	; 232
    2186:	93 40       	sbci	r25, 0x03	; 3
    2188:	c8 f2       	brcs	.-78     	; 0x213c <delay+0x4c>
			ms--;
    218a:	21 50       	subi	r18, 0x01	; 1
    218c:	30 40       	sbci	r19, 0x00	; 0
    218e:	40 40       	sbci	r20, 0x00	; 0
    2190:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    2192:	68 51       	subi	r22, 0x18	; 24
    2194:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2196:	21 15       	cp	r18, r1
    2198:	31 05       	cpc	r19, r1
    219a:	41 05       	cpc	r20, r1
    219c:	51 05       	cpc	r21, r1
    219e:	71 f6       	brne	.-100    	; 0x213c <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    21a0:	08 95       	ret

000021a2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    21a2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    21a4:	84 b5       	in	r24, 0x24	; 36
    21a6:	82 60       	ori	r24, 0x02	; 2
    21a8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    21aa:	84 b5       	in	r24, 0x24	; 36
    21ac:	81 60       	ori	r24, 0x01	; 1
    21ae:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    21b0:	85 b5       	in	r24, 0x25	; 37
    21b2:	82 60       	ori	r24, 0x02	; 2
    21b4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    21b6:	85 b5       	in	r24, 0x25	; 37
    21b8:	81 60       	ori	r24, 0x01	; 1
    21ba:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    21bc:	ee e6       	ldi	r30, 0x6E	; 110
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	81 60       	ori	r24, 0x01	; 1
    21c4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    21c6:	e1 e8       	ldi	r30, 0x81	; 129
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    21cc:	80 81       	ld	r24, Z
    21ce:	82 60       	ori	r24, 0x02	; 2
    21d0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    21d2:	80 81       	ld	r24, Z
    21d4:	81 60       	ori	r24, 0x01	; 1
    21d6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    21d8:	e0 e8       	ldi	r30, 0x80	; 128
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	81 60       	ori	r24, 0x01	; 1
    21e0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    21e2:	e1 eb       	ldi	r30, 0xB1	; 177
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	84 60       	ori	r24, 0x04	; 4
    21ea:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    21ec:	e0 eb       	ldi	r30, 0xB0	; 176
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	81 60       	ori	r24, 0x01	; 1
    21f4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    21f6:	ea e7       	ldi	r30, 0x7A	; 122
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	84 60       	ori	r24, 0x04	; 4
    21fe:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2200:	80 81       	ld	r24, Z
    2202:	82 60       	ori	r24, 0x02	; 2
    2204:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2206:	80 81       	ld	r24, Z
    2208:	81 60       	ori	r24, 0x01	; 1
    220a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    220c:	80 81       	ld	r24, Z
    220e:	80 68       	ori	r24, 0x80	; 128
    2210:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2212:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2216:	08 95       	ret

00002218 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2218:	1f 93       	push	r17
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	18 2f       	mov	r17, r24
    2220:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2222:	61 e0       	ldi	r22, 0x01	; 1
    2224:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <pinMode>
	if (val == 0)
    2228:	20 97       	sbiw	r28, 0x00	; 0
    222a:	09 f4       	brne	.+2      	; 0x222e <analogWrite+0x16>
    222c:	4a c0       	rjmp	.+148    	; 0x22c2 <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    222e:	cf 3f       	cpi	r28, 0xFF	; 255
    2230:	d1 05       	cpc	r29, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <analogWrite+0x1e>
    2234:	49 c0       	rjmp	.+146    	; 0x22c8 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2236:	e1 2f       	mov	r30, r17
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	e4 52       	subi	r30, 0x24	; 36
    223c:	fc 4f       	sbci	r31, 0xFC	; 252
    223e:	84 91       	lpm	r24, Z+
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	c1 f0       	breq	.+48     	; 0x2274 <analogWrite+0x5c>
    2244:	84 30       	cpi	r24, 0x04	; 4
    2246:	28 f4       	brcc	.+10     	; 0x2252 <analogWrite+0x3a>
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	51 f0       	breq	.+20     	; 0x2260 <analogWrite+0x48>
    224c:	82 30       	cpi	r24, 0x02	; 2
    224e:	b1 f5       	brne	.+108    	; 0x22bc <analogWrite+0xa4>
    2250:	0c c0       	rjmp	.+24     	; 0x226a <analogWrite+0x52>
    2252:	86 30       	cpi	r24, 0x06	; 6
    2254:	19 f1       	breq	.+70     	; 0x229c <analogWrite+0x84>
    2256:	87 30       	cpi	r24, 0x07	; 7
    2258:	49 f1       	breq	.+82     	; 0x22ac <analogWrite+0x94>
    225a:	84 30       	cpi	r24, 0x04	; 4
    225c:	79 f5       	brne	.+94     	; 0x22bc <analogWrite+0xa4>
    225e:	14 c0       	rjmp	.+40     	; 0x2288 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2260:	84 b5       	in	r24, 0x24	; 36
    2262:	80 68       	ori	r24, 0x80	; 128
    2264:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2266:	c7 bd       	out	0x27, r28	; 39
    2268:	33 c0       	rjmp	.+102    	; 0x22d0 <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    226a:	84 b5       	in	r24, 0x24	; 36
    226c:	80 62       	ori	r24, 0x20	; 32
    226e:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2270:	c8 bd       	out	0x28, r28	; 40
    2272:	2e c0       	rjmp	.+92     	; 0x22d0 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2274:	80 91 80 00 	lds	r24, 0x0080
    2278:	80 68       	ori	r24, 0x80	; 128
    227a:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    227e:	d0 93 89 00 	sts	0x0089, r29
    2282:	c0 93 88 00 	sts	0x0088, r28
    2286:	24 c0       	rjmp	.+72     	; 0x22d0 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2288:	80 91 80 00 	lds	r24, 0x0080
    228c:	80 62       	ori	r24, 0x20	; 32
    228e:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    2292:	d0 93 8b 00 	sts	0x008B, r29
    2296:	c0 93 8a 00 	sts	0x008A, r28
    229a:	1a c0       	rjmp	.+52     	; 0x22d0 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    229c:	80 91 b0 00 	lds	r24, 0x00B0
    22a0:	80 68       	ori	r24, 0x80	; 128
    22a2:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    22a6:	c0 93 b3 00 	sts	0x00B3, r28
    22aa:	12 c0       	rjmp	.+36     	; 0x22d0 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    22ac:	80 91 b0 00 	lds	r24, 0x00B0
    22b0:	80 62       	ori	r24, 0x20	; 32
    22b2:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    22b6:	c0 93 b4 00 	sts	0x00B4, r28
    22ba:	0a c0       	rjmp	.+20     	; 0x22d0 <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    22bc:	c0 38       	cpi	r28, 0x80	; 128
    22be:	d1 05       	cpc	r29, r1
    22c0:	1c f4       	brge	.+6      	; 0x22c8 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    22c2:	81 2f       	mov	r24, r17
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    22c8:	81 2f       	mov	r24, r17
    22ca:	61 e0       	ldi	r22, 0x01	; 1
    22cc:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
				}
		}
	}
}
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	1f 91       	pop	r17
    22d6:	08 95       	ret

000022d8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    22dc:	48 2f       	mov	r20, r24
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	ca 01       	movw	r24, r20
    22e2:	88 53       	subi	r24, 0x38	; 56
    22e4:	9c 4f       	sbci	r25, 0xFC	; 252
    22e6:	fc 01       	movw	r30, r24
    22e8:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    22ea:	4c 54       	subi	r20, 0x4C	; 76
    22ec:	5c 4f       	sbci	r21, 0xFC	; 252
    22ee:	fa 01       	movw	r30, r20
    22f0:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    22f2:	88 23       	and	r24, r24
    22f4:	69 f1       	breq	.+90     	; 0x2350 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	fc 01       	movw	r30, r24
    22fe:	ea 56       	subi	r30, 0x6A	; 106
    2300:	fc 4f       	sbci	r31, 0xFC	; 252
    2302:	a5 91       	lpm	r26, Z+
    2304:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    2306:	fc 01       	movw	r30, r24
    2308:	e0 56       	subi	r30, 0x60	; 96
    230a:	fc 4f       	sbci	r31, 0xFC	; 252
    230c:	c5 91       	lpm	r28, Z+
    230e:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    2310:	66 23       	and	r22, r22
    2312:	51 f4       	brne	.+20     	; 0x2328 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    2314:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2316:	f8 94       	cli
		*reg &= ~bit;
    2318:	8c 91       	ld	r24, X
    231a:	93 2f       	mov	r25, r19
    231c:	90 95       	com	r25
    231e:	89 23       	and	r24, r25
    2320:	8c 93       	st	X, r24
		*out &= ~bit;
    2322:	88 81       	ld	r24, Y
    2324:	89 23       	and	r24, r25
    2326:	0b c0       	rjmp	.+22     	; 0x233e <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2328:	62 30       	cpi	r22, 0x02	; 2
    232a:	61 f4       	brne	.+24     	; 0x2344 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    232c:	2f b7       	in	r18, 0x3f	; 63
                cli();
    232e:	f8 94       	cli
		*reg &= ~bit;
    2330:	8c 91       	ld	r24, X
    2332:	93 2f       	mov	r25, r19
    2334:	90 95       	com	r25
    2336:	89 23       	and	r24, r25
    2338:	8c 93       	st	X, r24
		*out |= bit;
    233a:	88 81       	ld	r24, Y
    233c:	83 2b       	or	r24, r19
    233e:	88 83       	st	Y, r24
		SREG = oldSREG;
    2340:	2f bf       	out	0x3f, r18	; 63
    2342:	06 c0       	rjmp	.+12     	; 0x2350 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2344:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2346:	f8 94       	cli
		*reg |= bit;
    2348:	8c 91       	ld	r24, X
    234a:	83 2b       	or	r24, r19
    234c:	8c 93       	st	X, r24
		SREG = oldSREG;
    234e:	9f bf       	out	0x3f, r25	; 63
	}
}
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	08 95       	ret

00002356 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    2356:	48 2f       	mov	r20, r24
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	ca 01       	movw	r24, r20
    235c:	84 52       	subi	r24, 0x24	; 36
    235e:	9c 4f       	sbci	r25, 0xFC	; 252
    2360:	fc 01       	movw	r30, r24
    2362:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2364:	ca 01       	movw	r24, r20
    2366:	88 53       	subi	r24, 0x38	; 56
    2368:	9c 4f       	sbci	r25, 0xFC	; 252
    236a:	fc 01       	movw	r30, r24
    236c:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    236e:	4c 54       	subi	r20, 0x4C	; 76
    2370:	5c 4f       	sbci	r21, 0xFC	; 252
    2372:	fa 01       	movw	r30, r20
    2374:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2376:	33 23       	and	r19, r19
    2378:	09 f4       	brne	.+2      	; 0x237c <digitalWrite+0x26>
    237a:	40 c0       	rjmp	.+128    	; 0x23fc <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    237c:	22 23       	and	r18, r18
    237e:	51 f1       	breq	.+84     	; 0x23d4 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2380:	23 30       	cpi	r18, 0x03	; 3
    2382:	71 f0       	breq	.+28     	; 0x23a0 <digitalWrite+0x4a>
    2384:	24 30       	cpi	r18, 0x04	; 4
    2386:	28 f4       	brcc	.+10     	; 0x2392 <digitalWrite+0x3c>
    2388:	21 30       	cpi	r18, 0x01	; 1
    238a:	a1 f0       	breq	.+40     	; 0x23b4 <digitalWrite+0x5e>
    238c:	22 30       	cpi	r18, 0x02	; 2
    238e:	11 f5       	brne	.+68     	; 0x23d4 <digitalWrite+0x7e>
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <digitalWrite+0x64>
    2392:	26 30       	cpi	r18, 0x06	; 6
    2394:	b1 f0       	breq	.+44     	; 0x23c2 <digitalWrite+0x6c>
    2396:	27 30       	cpi	r18, 0x07	; 7
    2398:	c1 f0       	breq	.+48     	; 0x23ca <digitalWrite+0x74>
    239a:	24 30       	cpi	r18, 0x04	; 4
    239c:	d9 f4       	brne	.+54     	; 0x23d4 <digitalWrite+0x7e>
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    23a0:	80 91 80 00 	lds	r24, 0x0080
    23a4:	8f 77       	andi	r24, 0x7F	; 127
    23a6:	03 c0       	rjmp	.+6      	; 0x23ae <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    23a8:	80 91 80 00 	lds	r24, 0x0080
    23ac:	8f 7d       	andi	r24, 0xDF	; 223
    23ae:	80 93 80 00 	sts	0x0080, r24
    23b2:	10 c0       	rjmp	.+32     	; 0x23d4 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    23b4:	84 b5       	in	r24, 0x24	; 36
    23b6:	8f 77       	andi	r24, 0x7F	; 127
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    23ba:	84 b5       	in	r24, 0x24	; 36
    23bc:	8f 7d       	andi	r24, 0xDF	; 223
    23be:	84 bd       	out	0x24, r24	; 36
    23c0:	09 c0       	rjmp	.+18     	; 0x23d4 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    23c2:	80 91 b0 00 	lds	r24, 0x00B0
    23c6:	8f 77       	andi	r24, 0x7F	; 127
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    23ca:	80 91 b0 00 	lds	r24, 0x00B0
    23ce:	8f 7d       	andi	r24, 0xDF	; 223
    23d0:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    23d4:	e3 2f       	mov	r30, r19
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31
    23dc:	e0 56       	subi	r30, 0x60	; 96
    23de:	fc 4f       	sbci	r31, 0xFC	; 252
    23e0:	a5 91       	lpm	r26, Z+
    23e2:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    23e4:	2f b7       	in	r18, 0x3f	; 63
	cli();
    23e6:	f8 94       	cli

	if (val == LOW) {
    23e8:	66 23       	and	r22, r22
    23ea:	21 f4       	brne	.+8      	; 0x23f4 <digitalWrite+0x9e>
		*out &= ~bit;
    23ec:	8c 91       	ld	r24, X
    23ee:	90 95       	com	r25
    23f0:	89 23       	and	r24, r25
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    23f4:	8c 91       	ld	r24, X
    23f6:	89 2b       	or	r24, r25
    23f8:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    23fa:	2f bf       	out	0x3f, r18	; 63
    23fc:	08 95       	ret

000023fe <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    23fe:	68 2f       	mov	r22, r24
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	cb 01       	movw	r24, r22
    2404:	84 52       	subi	r24, 0x24	; 36
    2406:	9c 4f       	sbci	r25, 0xFC	; 252
    2408:	fc 01       	movw	r30, r24
    240a:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    240c:	cb 01       	movw	r24, r22
    240e:	88 53       	subi	r24, 0x38	; 56
    2410:	9c 4f       	sbci	r25, 0xFC	; 252
    2412:	fc 01       	movw	r30, r24
    2414:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    2416:	6c 54       	subi	r22, 0x4C	; 76
    2418:	7c 4f       	sbci	r23, 0xFC	; 252
    241a:	fb 01       	movw	r30, r22
    241c:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    241e:	99 23       	and	r25, r25
    2420:	19 f4       	brne	.+6      	; 0x2428 <digitalRead+0x2a>
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	3c c0       	rjmp	.+120    	; 0x24a0 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2428:	22 23       	and	r18, r18
    242a:	51 f1       	breq	.+84     	; 0x2480 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    242c:	23 30       	cpi	r18, 0x03	; 3
    242e:	71 f0       	breq	.+28     	; 0x244c <digitalRead+0x4e>
    2430:	24 30       	cpi	r18, 0x04	; 4
    2432:	28 f4       	brcc	.+10     	; 0x243e <digitalRead+0x40>
    2434:	21 30       	cpi	r18, 0x01	; 1
    2436:	a1 f0       	breq	.+40     	; 0x2460 <digitalRead+0x62>
    2438:	22 30       	cpi	r18, 0x02	; 2
    243a:	11 f5       	brne	.+68     	; 0x2480 <digitalRead+0x82>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <digitalRead+0x68>
    243e:	26 30       	cpi	r18, 0x06	; 6
    2440:	b1 f0       	breq	.+44     	; 0x246e <digitalRead+0x70>
    2442:	27 30       	cpi	r18, 0x07	; 7
    2444:	c1 f0       	breq	.+48     	; 0x2476 <digitalRead+0x78>
    2446:	24 30       	cpi	r18, 0x04	; 4
    2448:	d9 f4       	brne	.+54     	; 0x2480 <digitalRead+0x82>
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    244c:	80 91 80 00 	lds	r24, 0x0080
    2450:	8f 77       	andi	r24, 0x7F	; 127
    2452:	03 c0       	rjmp	.+6      	; 0x245a <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2454:	80 91 80 00 	lds	r24, 0x0080
    2458:	8f 7d       	andi	r24, 0xDF	; 223
    245a:	80 93 80 00 	sts	0x0080, r24
    245e:	10 c0       	rjmp	.+32     	; 0x2480 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2460:	84 b5       	in	r24, 0x24	; 36
    2462:	8f 77       	andi	r24, 0x7F	; 127
    2464:	02 c0       	rjmp	.+4      	; 0x246a <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2466:	84 b5       	in	r24, 0x24	; 36
    2468:	8f 7d       	andi	r24, 0xDF	; 223
    246a:	84 bd       	out	0x24, r24	; 36
    246c:	09 c0       	rjmp	.+18     	; 0x2480 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    246e:	80 91 b0 00 	lds	r24, 0x00B0
    2472:	8f 77       	andi	r24, 0x7F	; 127
    2474:	03 c0       	rjmp	.+6      	; 0x247c <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2476:	80 91 b0 00 	lds	r24, 0x00B0
    247a:	8f 7d       	andi	r24, 0xDF	; 223
    247c:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    2480:	89 2f       	mov	r24, r25
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	86 55       	subi	r24, 0x56	; 86
    248a:	9c 4f       	sbci	r25, 0xFC	; 252
    248c:	fc 01       	movw	r30, r24
    248e:	a5 91       	lpm	r26, Z+
    2490:	b4 91       	lpm	r27, Z+
    2492:	8c 91       	ld	r24, X
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	84 23       	and	r24, r20
    249a:	11 f0       	breq	.+4      	; 0x24a0 <digitalRead+0xa2>
    249c:	21 e0       	ldi	r18, 0x01	; 1
    249e:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    24a0:	c9 01       	movw	r24, r18
    24a2:	08 95       	ret

000024a4 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    24a4:	bf 92       	push	r11
    24a6:	cf 92       	push	r12
    24a8:	df 92       	push	r13
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	e8 2e       	mov	r14, r24
    24b8:	f6 2e       	mov	r15, r22
    24ba:	b4 2e       	mov	r11, r20
    24bc:	c7 e0       	ldi	r28, 0x07	; 7
    24be:	d0 e0       	ldi	r29, 0x00	; 0
    24c0:	02 2f       	mov	r16, r18
    24c2:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    24c4:	87 e0       	ldi	r24, 0x07	; 7
    24c6:	c8 2e       	mov	r12, r24
    24c8:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    24ca:	bb 20       	and	r11, r11
    24cc:	59 f4       	brne	.+22     	; 0x24e4 <shiftOut+0x40>
			digitalWrite(dataPin, !!(val & (1 << i)));
    24ce:	b6 01       	movw	r22, r12
    24d0:	6c 1b       	sub	r22, r28
    24d2:	7d 0b       	sbc	r23, r29
    24d4:	c8 01       	movw	r24, r16
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <shiftOut+0x38>
    24d8:	95 95       	asr	r25
    24da:	87 95       	ror	r24
    24dc:	6a 95       	dec	r22
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <shiftOut+0x34>
    24e0:	bc 01       	movw	r22, r24
    24e2:	07 c0       	rjmp	.+14     	; 0x24f2 <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    24e4:	b8 01       	movw	r22, r16
    24e6:	0c 2e       	mov	r0, r28
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <shiftOut+0x4a>
    24ea:	75 95       	asr	r23
    24ec:	67 95       	ror	r22
    24ee:	0a 94       	dec	r0
    24f0:	e2 f7       	brpl	.-8      	; 0x24ea <shiftOut+0x46>
    24f2:	61 70       	andi	r22, 0x01	; 1
    24f4:	8e 2d       	mov	r24, r14
    24f6:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    24fa:	8f 2d       	mov	r24, r15
    24fc:	61 e0       	ldi	r22, 0x01	; 1
    24fe:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
		digitalWrite(clockPin, LOW);		
    2502:	8f 2d       	mov	r24, r15
    2504:	60 e0       	ldi	r22, 0x00	; 0
    2506:	0e 94 ab 11 	call	0x2356	; 0x2356 <digitalWrite>
    250a:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    250c:	9f ef       	ldi	r25, 0xFF	; 255
    250e:	cf 3f       	cpi	r28, 0xFF	; 255
    2510:	d9 07       	cpc	r29, r25
    2512:	d9 f6       	brne	.-74     	; 0x24ca <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	1f 91       	pop	r17
    251a:	0f 91       	pop	r16
    251c:	ff 90       	pop	r15
    251e:	ef 90       	pop	r14
    2520:	df 90       	pop	r13
    2522:	cf 90       	pop	r12
    2524:	bf 90       	pop	r11
    2526:	08 95       	ret

00002528 <ceil>:
    2528:	81 d1       	rcall	.+770    	; 0x282c <__fp_trunc>
    252a:	80 f0       	brcs	.+32     	; 0x254c <ceil+0x24>
    252c:	9f 37       	cpi	r25, 0x7F	; 127
    252e:	40 f4       	brcc	.+16     	; 0x2540 <ceil+0x18>
    2530:	91 11       	cpse	r25, r1
    2532:	0e f4       	brtc	.+2      	; 0x2536 <ceil+0xe>
    2534:	93 c1       	rjmp	.+806    	; 0x285c <__fp_szero>
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	80 e8       	ldi	r24, 0x80	; 128
    253c:	9f e3       	ldi	r25, 0x3F	; 63
    253e:	08 95       	ret
    2540:	26 f0       	brts	.+8      	; 0x254a <ceil+0x22>
    2542:	1b 16       	cp	r1, r27
    2544:	61 1d       	adc	r22, r1
    2546:	71 1d       	adc	r23, r1
    2548:	81 1d       	adc	r24, r1
    254a:	01 c1       	rjmp	.+514    	; 0x274e <__fp_mintl>
    254c:	1b c1       	rjmp	.+566    	; 0x2784 <__fp_mpack>

0000254e <__divsf3>:
    254e:	0c d0       	rcall	.+24     	; 0x2568 <__divsf3x>
    2550:	3a c1       	rjmp	.+628    	; 0x27c6 <__fp_round>
    2552:	32 d1       	rcall	.+612    	; 0x27b8 <__fp_pscB>
    2554:	40 f0       	brcs	.+16     	; 0x2566 <__divsf3+0x18>
    2556:	29 d1       	rcall	.+594    	; 0x27aa <__fp_pscA>
    2558:	30 f0       	brcs	.+12     	; 0x2566 <__divsf3+0x18>
    255a:	21 f4       	brne	.+8      	; 0x2564 <__divsf3+0x16>
    255c:	5f 3f       	cpi	r21, 0xFF	; 255
    255e:	19 f0       	breq	.+6      	; 0x2566 <__divsf3+0x18>
    2560:	f0 c0       	rjmp	.+480    	; 0x2742 <__fp_inf>
    2562:	51 11       	cpse	r21, r1
    2564:	7b c1       	rjmp	.+758    	; 0x285c <__fp_szero>
    2566:	1e c1       	rjmp	.+572    	; 0x27a4 <__fp_nan>

00002568 <__divsf3x>:
    2568:	3f d1       	rcall	.+638    	; 0x27e8 <__fp_split3>
    256a:	98 f3       	brcs	.-26     	; 0x2552 <__divsf3+0x4>

0000256c <__divsf3_pse>:
    256c:	99 23       	and	r25, r25
    256e:	c9 f3       	breq	.-14     	; 0x2562 <__divsf3+0x14>
    2570:	55 23       	and	r21, r21
    2572:	b1 f3       	breq	.-20     	; 0x2560 <__divsf3+0x12>
    2574:	95 1b       	sub	r25, r21
    2576:	55 0b       	sbc	r21, r21
    2578:	bb 27       	eor	r27, r27
    257a:	aa 27       	eor	r26, r26
    257c:	62 17       	cp	r22, r18
    257e:	73 07       	cpc	r23, r19
    2580:	84 07       	cpc	r24, r20
    2582:	38 f0       	brcs	.+14     	; 0x2592 <__divsf3_pse+0x26>
    2584:	9f 5f       	subi	r25, 0xFF	; 255
    2586:	5f 4f       	sbci	r21, 0xFF	; 255
    2588:	22 0f       	add	r18, r18
    258a:	33 1f       	adc	r19, r19
    258c:	44 1f       	adc	r20, r20
    258e:	aa 1f       	adc	r26, r26
    2590:	a9 f3       	breq	.-22     	; 0x257c <__divsf3_pse+0x10>
    2592:	33 d0       	rcall	.+102    	; 0x25fa <__divsf3_pse+0x8e>
    2594:	0e 2e       	mov	r0, r30
    2596:	3a f0       	brmi	.+14     	; 0x25a6 <__divsf3_pse+0x3a>
    2598:	e0 e8       	ldi	r30, 0x80	; 128
    259a:	30 d0       	rcall	.+96     	; 0x25fc <__divsf3_pse+0x90>
    259c:	91 50       	subi	r25, 0x01	; 1
    259e:	50 40       	sbci	r21, 0x00	; 0
    25a0:	e6 95       	lsr	r30
    25a2:	00 1c       	adc	r0, r0
    25a4:	ca f7       	brpl	.-14     	; 0x2598 <__divsf3_pse+0x2c>
    25a6:	29 d0       	rcall	.+82     	; 0x25fa <__divsf3_pse+0x8e>
    25a8:	fe 2f       	mov	r31, r30
    25aa:	27 d0       	rcall	.+78     	; 0x25fa <__divsf3_pse+0x8e>
    25ac:	66 0f       	add	r22, r22
    25ae:	77 1f       	adc	r23, r23
    25b0:	88 1f       	adc	r24, r24
    25b2:	bb 1f       	adc	r27, r27
    25b4:	26 17       	cp	r18, r22
    25b6:	37 07       	cpc	r19, r23
    25b8:	48 07       	cpc	r20, r24
    25ba:	ab 07       	cpc	r26, r27
    25bc:	b0 e8       	ldi	r27, 0x80	; 128
    25be:	09 f0       	breq	.+2      	; 0x25c2 <__divsf3_pse+0x56>
    25c0:	bb 0b       	sbc	r27, r27
    25c2:	80 2d       	mov	r24, r0
    25c4:	bf 01       	movw	r22, r30
    25c6:	ff 27       	eor	r31, r31
    25c8:	93 58       	subi	r25, 0x83	; 131
    25ca:	5f 4f       	sbci	r21, 0xFF	; 255
    25cc:	2a f0       	brmi	.+10     	; 0x25d8 <__divsf3_pse+0x6c>
    25ce:	9e 3f       	cpi	r25, 0xFE	; 254
    25d0:	51 05       	cpc	r21, r1
    25d2:	68 f0       	brcs	.+26     	; 0x25ee <__divsf3_pse+0x82>
    25d4:	b6 c0       	rjmp	.+364    	; 0x2742 <__fp_inf>
    25d6:	42 c1       	rjmp	.+644    	; 0x285c <__fp_szero>
    25d8:	5f 3f       	cpi	r21, 0xFF	; 255
    25da:	ec f3       	brlt	.-6      	; 0x25d6 <__divsf3_pse+0x6a>
    25dc:	98 3e       	cpi	r25, 0xE8	; 232
    25de:	dc f3       	brlt	.-10     	; 0x25d6 <__divsf3_pse+0x6a>
    25e0:	86 95       	lsr	r24
    25e2:	77 95       	ror	r23
    25e4:	67 95       	ror	r22
    25e6:	b7 95       	ror	r27
    25e8:	f7 95       	ror	r31
    25ea:	9f 5f       	subi	r25, 0xFF	; 255
    25ec:	c9 f7       	brne	.-14     	; 0x25e0 <__divsf3_pse+0x74>
    25ee:	88 0f       	add	r24, r24
    25f0:	91 1d       	adc	r25, r1
    25f2:	96 95       	lsr	r25
    25f4:	87 95       	ror	r24
    25f6:	97 f9       	bld	r25, 7
    25f8:	08 95       	ret
    25fa:	e1 e0       	ldi	r30, 0x01	; 1
    25fc:	66 0f       	add	r22, r22
    25fe:	77 1f       	adc	r23, r23
    2600:	88 1f       	adc	r24, r24
    2602:	bb 1f       	adc	r27, r27
    2604:	62 17       	cp	r22, r18
    2606:	73 07       	cpc	r23, r19
    2608:	84 07       	cpc	r24, r20
    260a:	ba 07       	cpc	r27, r26
    260c:	20 f0       	brcs	.+8      	; 0x2616 <__divsf3_pse+0xaa>
    260e:	62 1b       	sub	r22, r18
    2610:	73 0b       	sbc	r23, r19
    2612:	84 0b       	sbc	r24, r20
    2614:	ba 0b       	sbc	r27, r26
    2616:	ee 1f       	adc	r30, r30
    2618:	88 f7       	brcc	.-30     	; 0x25fc <__divsf3_pse+0x90>
    261a:	e0 95       	com	r30
    261c:	08 95       	ret

0000261e <__fixsfsi>:
    261e:	04 d0       	rcall	.+8      	; 0x2628 <__fixunssfsi>
    2620:	68 94       	set
    2622:	b1 11       	cpse	r27, r1
    2624:	1b c1       	rjmp	.+566    	; 0x285c <__fp_szero>
    2626:	08 95       	ret

00002628 <__fixunssfsi>:
    2628:	e7 d0       	rcall	.+462    	; 0x27f8 <__fp_splitA>
    262a:	88 f0       	brcs	.+34     	; 0x264e <__fixunssfsi+0x26>
    262c:	9f 57       	subi	r25, 0x7F	; 127
    262e:	90 f0       	brcs	.+36     	; 0x2654 <__fixunssfsi+0x2c>
    2630:	b9 2f       	mov	r27, r25
    2632:	99 27       	eor	r25, r25
    2634:	b7 51       	subi	r27, 0x17	; 23
    2636:	a0 f0       	brcs	.+40     	; 0x2660 <__fixunssfsi+0x38>
    2638:	d1 f0       	breq	.+52     	; 0x266e <__fixunssfsi+0x46>
    263a:	66 0f       	add	r22, r22
    263c:	77 1f       	adc	r23, r23
    263e:	88 1f       	adc	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	1a f0       	brmi	.+6      	; 0x264a <__fixunssfsi+0x22>
    2644:	ba 95       	dec	r27
    2646:	c9 f7       	brne	.-14     	; 0x263a <__fixunssfsi+0x12>
    2648:	12 c0       	rjmp	.+36     	; 0x266e <__fixunssfsi+0x46>
    264a:	b1 30       	cpi	r27, 0x01	; 1
    264c:	81 f0       	breq	.+32     	; 0x266e <__fixunssfsi+0x46>
    264e:	05 d1       	rcall	.+522    	; 0x285a <__fp_zero>
    2650:	b1 e0       	ldi	r27, 0x01	; 1
    2652:	08 95       	ret
    2654:	02 c1       	rjmp	.+516    	; 0x285a <__fp_zero>
    2656:	67 2f       	mov	r22, r23
    2658:	78 2f       	mov	r23, r24
    265a:	88 27       	eor	r24, r24
    265c:	b8 5f       	subi	r27, 0xF8	; 248
    265e:	39 f0       	breq	.+14     	; 0x266e <__fixunssfsi+0x46>
    2660:	b9 3f       	cpi	r27, 0xF9	; 249
    2662:	cc f3       	brlt	.-14     	; 0x2656 <__fixunssfsi+0x2e>
    2664:	86 95       	lsr	r24
    2666:	77 95       	ror	r23
    2668:	67 95       	ror	r22
    266a:	b3 95       	inc	r27
    266c:	d9 f7       	brne	.-10     	; 0x2664 <__fixunssfsi+0x3c>
    266e:	3e f4       	brtc	.+14     	; 0x267e <__fixunssfsi+0x56>
    2670:	90 95       	com	r25
    2672:	80 95       	com	r24
    2674:	70 95       	com	r23
    2676:	61 95       	neg	r22
    2678:	7f 4f       	sbci	r23, 0xFF	; 255
    267a:	8f 4f       	sbci	r24, 0xFF	; 255
    267c:	9f 4f       	sbci	r25, 0xFF	; 255
    267e:	08 95       	ret

00002680 <__floatunsisf>:
    2680:	e8 94       	clt
    2682:	09 c0       	rjmp	.+18     	; 0x2696 <__floatsisf+0x12>

00002684 <__floatsisf>:
    2684:	97 fb       	bst	r25, 7
    2686:	3e f4       	brtc	.+14     	; 0x2696 <__floatsisf+0x12>
    2688:	90 95       	com	r25
    268a:	80 95       	com	r24
    268c:	70 95       	com	r23
    268e:	61 95       	neg	r22
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	8f 4f       	sbci	r24, 0xFF	; 255
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	99 23       	and	r25, r25
    2698:	a9 f0       	breq	.+42     	; 0x26c4 <__floatsisf+0x40>
    269a:	f9 2f       	mov	r31, r25
    269c:	96 e9       	ldi	r25, 0x96	; 150
    269e:	bb 27       	eor	r27, r27
    26a0:	93 95       	inc	r25
    26a2:	f6 95       	lsr	r31
    26a4:	87 95       	ror	r24
    26a6:	77 95       	ror	r23
    26a8:	67 95       	ror	r22
    26aa:	b7 95       	ror	r27
    26ac:	f1 11       	cpse	r31, r1
    26ae:	f8 cf       	rjmp	.-16     	; 0x26a0 <__floatsisf+0x1c>
    26b0:	fa f4       	brpl	.+62     	; 0x26f0 <__floatsisf+0x6c>
    26b2:	bb 0f       	add	r27, r27
    26b4:	11 f4       	brne	.+4      	; 0x26ba <__floatsisf+0x36>
    26b6:	60 ff       	sbrs	r22, 0
    26b8:	1b c0       	rjmp	.+54     	; 0x26f0 <__floatsisf+0x6c>
    26ba:	6f 5f       	subi	r22, 0xFF	; 255
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	8f 4f       	sbci	r24, 0xFF	; 255
    26c0:	9f 4f       	sbci	r25, 0xFF	; 255
    26c2:	16 c0       	rjmp	.+44     	; 0x26f0 <__floatsisf+0x6c>
    26c4:	88 23       	and	r24, r24
    26c6:	11 f0       	breq	.+4      	; 0x26cc <__floatsisf+0x48>
    26c8:	96 e9       	ldi	r25, 0x96	; 150
    26ca:	11 c0       	rjmp	.+34     	; 0x26ee <__floatsisf+0x6a>
    26cc:	77 23       	and	r23, r23
    26ce:	21 f0       	breq	.+8      	; 0x26d8 <__floatsisf+0x54>
    26d0:	9e e8       	ldi	r25, 0x8E	; 142
    26d2:	87 2f       	mov	r24, r23
    26d4:	76 2f       	mov	r23, r22
    26d6:	05 c0       	rjmp	.+10     	; 0x26e2 <__floatsisf+0x5e>
    26d8:	66 23       	and	r22, r22
    26da:	71 f0       	breq	.+28     	; 0x26f8 <__floatsisf+0x74>
    26dc:	96 e8       	ldi	r25, 0x86	; 134
    26de:	86 2f       	mov	r24, r22
    26e0:	70 e0       	ldi	r23, 0x00	; 0
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	2a f0       	brmi	.+10     	; 0x26f0 <__floatsisf+0x6c>
    26e6:	9a 95       	dec	r25
    26e8:	66 0f       	add	r22, r22
    26ea:	77 1f       	adc	r23, r23
    26ec:	88 1f       	adc	r24, r24
    26ee:	da f7       	brpl	.-10     	; 0x26e6 <__floatsisf+0x62>
    26f0:	88 0f       	add	r24, r24
    26f2:	96 95       	lsr	r25
    26f4:	87 95       	ror	r24
    26f6:	97 f9       	bld	r25, 7
    26f8:	08 95       	ret

000026fa <__fp_cmp>:
    26fa:	99 0f       	add	r25, r25
    26fc:	00 08       	sbc	r0, r0
    26fe:	55 0f       	add	r21, r21
    2700:	aa 0b       	sbc	r26, r26
    2702:	e0 e8       	ldi	r30, 0x80	; 128
    2704:	fe ef       	ldi	r31, 0xFE	; 254
    2706:	16 16       	cp	r1, r22
    2708:	17 06       	cpc	r1, r23
    270a:	e8 07       	cpc	r30, r24
    270c:	f9 07       	cpc	r31, r25
    270e:	c0 f0       	brcs	.+48     	; 0x2740 <__fp_cmp+0x46>
    2710:	12 16       	cp	r1, r18
    2712:	13 06       	cpc	r1, r19
    2714:	e4 07       	cpc	r30, r20
    2716:	f5 07       	cpc	r31, r21
    2718:	98 f0       	brcs	.+38     	; 0x2740 <__fp_cmp+0x46>
    271a:	62 1b       	sub	r22, r18
    271c:	73 0b       	sbc	r23, r19
    271e:	84 0b       	sbc	r24, r20
    2720:	95 0b       	sbc	r25, r21
    2722:	39 f4       	brne	.+14     	; 0x2732 <__fp_cmp+0x38>
    2724:	0a 26       	eor	r0, r26
    2726:	61 f0       	breq	.+24     	; 0x2740 <__fp_cmp+0x46>
    2728:	23 2b       	or	r18, r19
    272a:	24 2b       	or	r18, r20
    272c:	25 2b       	or	r18, r21
    272e:	21 f4       	brne	.+8      	; 0x2738 <__fp_cmp+0x3e>
    2730:	08 95       	ret
    2732:	0a 26       	eor	r0, r26
    2734:	09 f4       	brne	.+2      	; 0x2738 <__fp_cmp+0x3e>
    2736:	a1 40       	sbci	r26, 0x01	; 1
    2738:	a6 95       	lsr	r26
    273a:	8f ef       	ldi	r24, 0xFF	; 255
    273c:	81 1d       	adc	r24, r1
    273e:	81 1d       	adc	r24, r1
    2740:	08 95       	ret

00002742 <__fp_inf>:
    2742:	97 f9       	bld	r25, 7
    2744:	9f 67       	ori	r25, 0x7F	; 127
    2746:	80 e8       	ldi	r24, 0x80	; 128
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	08 95       	ret

0000274e <__fp_mintl>:
    274e:	88 23       	and	r24, r24
    2750:	71 f4       	brne	.+28     	; 0x276e <__fp_mintl+0x20>
    2752:	77 23       	and	r23, r23
    2754:	21 f0       	breq	.+8      	; 0x275e <__fp_mintl+0x10>
    2756:	98 50       	subi	r25, 0x08	; 8
    2758:	87 2b       	or	r24, r23
    275a:	76 2f       	mov	r23, r22
    275c:	07 c0       	rjmp	.+14     	; 0x276c <__fp_mintl+0x1e>
    275e:	66 23       	and	r22, r22
    2760:	11 f4       	brne	.+4      	; 0x2766 <__fp_mintl+0x18>
    2762:	99 27       	eor	r25, r25
    2764:	0d c0       	rjmp	.+26     	; 0x2780 <__fp_mintl+0x32>
    2766:	90 51       	subi	r25, 0x10	; 16
    2768:	86 2b       	or	r24, r22
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	60 e0       	ldi	r22, 0x00	; 0
    276e:	2a f0       	brmi	.+10     	; 0x277a <__fp_mintl+0x2c>
    2770:	9a 95       	dec	r25
    2772:	66 0f       	add	r22, r22
    2774:	77 1f       	adc	r23, r23
    2776:	88 1f       	adc	r24, r24
    2778:	da f7       	brpl	.-10     	; 0x2770 <__fp_mintl+0x22>
    277a:	88 0f       	add	r24, r24
    277c:	96 95       	lsr	r25
    277e:	87 95       	ror	r24
    2780:	97 f9       	bld	r25, 7
    2782:	08 95       	ret

00002784 <__fp_mpack>:
    2784:	9f 3f       	cpi	r25, 0xFF	; 255
    2786:	49 f0       	breq	.+18     	; 0x279a <__fp_mpack+0x16>
    2788:	91 50       	subi	r25, 0x01	; 1
    278a:	28 f4       	brcc	.+10     	; 0x2796 <__fp_mpack+0x12>
    278c:	86 95       	lsr	r24
    278e:	77 95       	ror	r23
    2790:	67 95       	ror	r22
    2792:	b7 95       	ror	r27
    2794:	9f 5f       	subi	r25, 0xFF	; 255
    2796:	80 38       	cpi	r24, 0x80	; 128
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	88 0f       	add	r24, r24
    279c:	96 95       	lsr	r25
    279e:	87 95       	ror	r24
    27a0:	97 f9       	bld	r25, 7
    27a2:	08 95       	ret

000027a4 <__fp_nan>:
    27a4:	9f ef       	ldi	r25, 0xFF	; 255
    27a6:	80 ec       	ldi	r24, 0xC0	; 192
    27a8:	08 95       	ret

000027aa <__fp_pscA>:
    27aa:	00 24       	eor	r0, r0
    27ac:	0a 94       	dec	r0
    27ae:	16 16       	cp	r1, r22
    27b0:	17 06       	cpc	r1, r23
    27b2:	18 06       	cpc	r1, r24
    27b4:	09 06       	cpc	r0, r25
    27b6:	08 95       	ret

000027b8 <__fp_pscB>:
    27b8:	00 24       	eor	r0, r0
    27ba:	0a 94       	dec	r0
    27bc:	12 16       	cp	r1, r18
    27be:	13 06       	cpc	r1, r19
    27c0:	14 06       	cpc	r1, r20
    27c2:	05 06       	cpc	r0, r21
    27c4:	08 95       	ret

000027c6 <__fp_round>:
    27c6:	09 2e       	mov	r0, r25
    27c8:	03 94       	inc	r0
    27ca:	00 0c       	add	r0, r0
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <__fp_round+0xc>
    27ce:	88 23       	and	r24, r24
    27d0:	52 f0       	brmi	.+20     	; 0x27e6 <__fp_round+0x20>
    27d2:	bb 0f       	add	r27, r27
    27d4:	40 f4       	brcc	.+16     	; 0x27e6 <__fp_round+0x20>
    27d6:	bf 2b       	or	r27, r31
    27d8:	11 f4       	brne	.+4      	; 0x27de <__fp_round+0x18>
    27da:	60 ff       	sbrs	r22, 0
    27dc:	04 c0       	rjmp	.+8      	; 0x27e6 <__fp_round+0x20>
    27de:	6f 5f       	subi	r22, 0xFF	; 255
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	8f 4f       	sbci	r24, 0xFF	; 255
    27e4:	9f 4f       	sbci	r25, 0xFF	; 255
    27e6:	08 95       	ret

000027e8 <__fp_split3>:
    27e8:	57 fd       	sbrc	r21, 7
    27ea:	90 58       	subi	r25, 0x80	; 128
    27ec:	44 0f       	add	r20, r20
    27ee:	55 1f       	adc	r21, r21
    27f0:	59 f0       	breq	.+22     	; 0x2808 <__fp_splitA+0x10>
    27f2:	5f 3f       	cpi	r21, 0xFF	; 255
    27f4:	71 f0       	breq	.+28     	; 0x2812 <__fp_splitA+0x1a>
    27f6:	47 95       	ror	r20

000027f8 <__fp_splitA>:
    27f8:	88 0f       	add	r24, r24
    27fa:	97 fb       	bst	r25, 7
    27fc:	99 1f       	adc	r25, r25
    27fe:	61 f0       	breq	.+24     	; 0x2818 <__fp_splitA+0x20>
    2800:	9f 3f       	cpi	r25, 0xFF	; 255
    2802:	79 f0       	breq	.+30     	; 0x2822 <__fp_splitA+0x2a>
    2804:	87 95       	ror	r24
    2806:	08 95       	ret
    2808:	12 16       	cp	r1, r18
    280a:	13 06       	cpc	r1, r19
    280c:	14 06       	cpc	r1, r20
    280e:	55 1f       	adc	r21, r21
    2810:	f2 cf       	rjmp	.-28     	; 0x27f6 <__fp_split3+0xe>
    2812:	46 95       	lsr	r20
    2814:	f1 df       	rcall	.-30     	; 0x27f8 <__fp_splitA>
    2816:	08 c0       	rjmp	.+16     	; 0x2828 <__fp_splitA+0x30>
    2818:	16 16       	cp	r1, r22
    281a:	17 06       	cpc	r1, r23
    281c:	18 06       	cpc	r1, r24
    281e:	99 1f       	adc	r25, r25
    2820:	f1 cf       	rjmp	.-30     	; 0x2804 <__fp_splitA+0xc>
    2822:	86 95       	lsr	r24
    2824:	71 05       	cpc	r23, r1
    2826:	61 05       	cpc	r22, r1
    2828:	08 94       	sec
    282a:	08 95       	ret

0000282c <__fp_trunc>:
    282c:	e5 df       	rcall	.-54     	; 0x27f8 <__fp_splitA>
    282e:	a0 f0       	brcs	.+40     	; 0x2858 <__fp_trunc+0x2c>
    2830:	be e7       	ldi	r27, 0x7E	; 126
    2832:	b9 17       	cp	r27, r25
    2834:	88 f4       	brcc	.+34     	; 0x2858 <__fp_trunc+0x2c>
    2836:	bb 27       	eor	r27, r27
    2838:	9f 38       	cpi	r25, 0x8F	; 143
    283a:	60 f4       	brcc	.+24     	; 0x2854 <__fp_trunc+0x28>
    283c:	16 16       	cp	r1, r22
    283e:	b1 1d       	adc	r27, r1
    2840:	67 2f       	mov	r22, r23
    2842:	78 2f       	mov	r23, r24
    2844:	88 27       	eor	r24, r24
    2846:	98 5f       	subi	r25, 0xF8	; 248
    2848:	f7 cf       	rjmp	.-18     	; 0x2838 <__fp_trunc+0xc>
    284a:	86 95       	lsr	r24
    284c:	77 95       	ror	r23
    284e:	67 95       	ror	r22
    2850:	b1 1d       	adc	r27, r1
    2852:	93 95       	inc	r25
    2854:	96 39       	cpi	r25, 0x96	; 150
    2856:	c8 f3       	brcs	.-14     	; 0x284a <__fp_trunc+0x1e>
    2858:	08 95       	ret

0000285a <__fp_zero>:
    285a:	e8 94       	clt

0000285c <__fp_szero>:
    285c:	bb 27       	eor	r27, r27
    285e:	66 27       	eor	r22, r22
    2860:	77 27       	eor	r23, r23
    2862:	cb 01       	movw	r24, r22
    2864:	97 f9       	bld	r25, 7
    2866:	08 95       	ret

00002868 <__gesf2>:
    2868:	48 df       	rcall	.-368    	; 0x26fa <__fp_cmp>
    286a:	08 f4       	brcc	.+2      	; 0x286e <__gesf2+0x6>
    286c:	8f ef       	ldi	r24, 0xFF	; 255
    286e:	08 95       	ret

00002870 <__mulsf3>:
    2870:	0b d0       	rcall	.+22     	; 0x2888 <__mulsf3x>
    2872:	a9 cf       	rjmp	.-174    	; 0x27c6 <__fp_round>
    2874:	9a df       	rcall	.-204    	; 0x27aa <__fp_pscA>
    2876:	28 f0       	brcs	.+10     	; 0x2882 <__mulsf3+0x12>
    2878:	9f df       	rcall	.-194    	; 0x27b8 <__fp_pscB>
    287a:	18 f0       	brcs	.+6      	; 0x2882 <__mulsf3+0x12>
    287c:	95 23       	and	r25, r21
    287e:	09 f0       	breq	.+2      	; 0x2882 <__mulsf3+0x12>
    2880:	60 cf       	rjmp	.-320    	; 0x2742 <__fp_inf>
    2882:	90 cf       	rjmp	.-224    	; 0x27a4 <__fp_nan>
    2884:	11 24       	eor	r1, r1
    2886:	ea cf       	rjmp	.-44     	; 0x285c <__fp_szero>

00002888 <__mulsf3x>:
    2888:	af df       	rcall	.-162    	; 0x27e8 <__fp_split3>
    288a:	a0 f3       	brcs	.-24     	; 0x2874 <__mulsf3+0x4>

0000288c <__mulsf3_pse>:
    288c:	95 9f       	mul	r25, r21
    288e:	d1 f3       	breq	.-12     	; 0x2884 <__mulsf3+0x14>
    2890:	95 0f       	add	r25, r21
    2892:	50 e0       	ldi	r21, 0x00	; 0
    2894:	55 1f       	adc	r21, r21
    2896:	62 9f       	mul	r22, r18
    2898:	f0 01       	movw	r30, r0
    289a:	72 9f       	mul	r23, r18
    289c:	bb 27       	eor	r27, r27
    289e:	f0 0d       	add	r31, r0
    28a0:	b1 1d       	adc	r27, r1
    28a2:	63 9f       	mul	r22, r19
    28a4:	aa 27       	eor	r26, r26
    28a6:	f0 0d       	add	r31, r0
    28a8:	b1 1d       	adc	r27, r1
    28aa:	aa 1f       	adc	r26, r26
    28ac:	64 9f       	mul	r22, r20
    28ae:	66 27       	eor	r22, r22
    28b0:	b0 0d       	add	r27, r0
    28b2:	a1 1d       	adc	r26, r1
    28b4:	66 1f       	adc	r22, r22
    28b6:	82 9f       	mul	r24, r18
    28b8:	22 27       	eor	r18, r18
    28ba:	b0 0d       	add	r27, r0
    28bc:	a1 1d       	adc	r26, r1
    28be:	62 1f       	adc	r22, r18
    28c0:	73 9f       	mul	r23, r19
    28c2:	b0 0d       	add	r27, r0
    28c4:	a1 1d       	adc	r26, r1
    28c6:	62 1f       	adc	r22, r18
    28c8:	83 9f       	mul	r24, r19
    28ca:	a0 0d       	add	r26, r0
    28cc:	61 1d       	adc	r22, r1
    28ce:	22 1f       	adc	r18, r18
    28d0:	74 9f       	mul	r23, r20
    28d2:	33 27       	eor	r19, r19
    28d4:	a0 0d       	add	r26, r0
    28d6:	61 1d       	adc	r22, r1
    28d8:	23 1f       	adc	r18, r19
    28da:	84 9f       	mul	r24, r20
    28dc:	60 0d       	add	r22, r0
    28de:	21 1d       	adc	r18, r1
    28e0:	82 2f       	mov	r24, r18
    28e2:	76 2f       	mov	r23, r22
    28e4:	6a 2f       	mov	r22, r26
    28e6:	11 24       	eor	r1, r1
    28e8:	9f 57       	subi	r25, 0x7F	; 127
    28ea:	50 40       	sbci	r21, 0x00	; 0
    28ec:	8a f0       	brmi	.+34     	; 0x2910 <__mulsf3_pse+0x84>
    28ee:	e1 f0       	breq	.+56     	; 0x2928 <__mulsf3_pse+0x9c>
    28f0:	88 23       	and	r24, r24
    28f2:	4a f0       	brmi	.+18     	; 0x2906 <__mulsf3_pse+0x7a>
    28f4:	ee 0f       	add	r30, r30
    28f6:	ff 1f       	adc	r31, r31
    28f8:	bb 1f       	adc	r27, r27
    28fa:	66 1f       	adc	r22, r22
    28fc:	77 1f       	adc	r23, r23
    28fe:	88 1f       	adc	r24, r24
    2900:	91 50       	subi	r25, 0x01	; 1
    2902:	50 40       	sbci	r21, 0x00	; 0
    2904:	a9 f7       	brne	.-22     	; 0x28f0 <__mulsf3_pse+0x64>
    2906:	9e 3f       	cpi	r25, 0xFE	; 254
    2908:	51 05       	cpc	r21, r1
    290a:	70 f0       	brcs	.+28     	; 0x2928 <__mulsf3_pse+0x9c>
    290c:	1a cf       	rjmp	.-460    	; 0x2742 <__fp_inf>
    290e:	a6 cf       	rjmp	.-180    	; 0x285c <__fp_szero>
    2910:	5f 3f       	cpi	r21, 0xFF	; 255
    2912:	ec f3       	brlt	.-6      	; 0x290e <__mulsf3_pse+0x82>
    2914:	98 3e       	cpi	r25, 0xE8	; 232
    2916:	dc f3       	brlt	.-10     	; 0x290e <__mulsf3_pse+0x82>
    2918:	86 95       	lsr	r24
    291a:	77 95       	ror	r23
    291c:	67 95       	ror	r22
    291e:	b7 95       	ror	r27
    2920:	f7 95       	ror	r31
    2922:	e7 95       	ror	r30
    2924:	9f 5f       	subi	r25, 0xFF	; 255
    2926:	c1 f7       	brne	.-16     	; 0x2918 <__mulsf3_pse+0x8c>
    2928:	fe 2b       	or	r31, r30
    292a:	88 0f       	add	r24, r24
    292c:	91 1d       	adc	r25, r1
    292e:	96 95       	lsr	r25
    2930:	87 95       	ror	r24
    2932:	97 f9       	bld	r25, 7
    2934:	08 95       	ret

00002936 <__mulsi3>:
    2936:	62 9f       	mul	r22, r18
    2938:	d0 01       	movw	r26, r0
    293a:	73 9f       	mul	r23, r19
    293c:	f0 01       	movw	r30, r0
    293e:	82 9f       	mul	r24, r18
    2940:	e0 0d       	add	r30, r0
    2942:	f1 1d       	adc	r31, r1
    2944:	64 9f       	mul	r22, r20
    2946:	e0 0d       	add	r30, r0
    2948:	f1 1d       	adc	r31, r1
    294a:	92 9f       	mul	r25, r18
    294c:	f0 0d       	add	r31, r0
    294e:	83 9f       	mul	r24, r19
    2950:	f0 0d       	add	r31, r0
    2952:	74 9f       	mul	r23, r20
    2954:	f0 0d       	add	r31, r0
    2956:	65 9f       	mul	r22, r21
    2958:	f0 0d       	add	r31, r0
    295a:	99 27       	eor	r25, r25
    295c:	72 9f       	mul	r23, r18
    295e:	b0 0d       	add	r27, r0
    2960:	e1 1d       	adc	r30, r1
    2962:	f9 1f       	adc	r31, r25
    2964:	63 9f       	mul	r22, r19
    2966:	b0 0d       	add	r27, r0
    2968:	e1 1d       	adc	r30, r1
    296a:	f9 1f       	adc	r31, r25
    296c:	bd 01       	movw	r22, r26
    296e:	cf 01       	movw	r24, r30
    2970:	11 24       	eor	r1, r1
    2972:	08 95       	ret

00002974 <__divmodhi4>:
    2974:	97 fb       	bst	r25, 7
    2976:	09 2e       	mov	r0, r25
    2978:	07 26       	eor	r0, r23
    297a:	0a d0       	rcall	.+20     	; 0x2990 <__divmodhi4_neg1>
    297c:	77 fd       	sbrc	r23, 7
    297e:	04 d0       	rcall	.+8      	; 0x2988 <__divmodhi4_neg2>
    2980:	49 d0       	rcall	.+146    	; 0x2a14 <__udivmodhi4>
    2982:	06 d0       	rcall	.+12     	; 0x2990 <__divmodhi4_neg1>
    2984:	00 20       	and	r0, r0
    2986:	1a f4       	brpl	.+6      	; 0x298e <__divmodhi4_exit>

00002988 <__divmodhi4_neg2>:
    2988:	70 95       	com	r23
    298a:	61 95       	neg	r22
    298c:	7f 4f       	sbci	r23, 0xFF	; 255

0000298e <__divmodhi4_exit>:
    298e:	08 95       	ret

00002990 <__divmodhi4_neg1>:
    2990:	f6 f7       	brtc	.-4      	; 0x298e <__divmodhi4_exit>
    2992:	90 95       	com	r25
    2994:	81 95       	neg	r24
    2996:	9f 4f       	sbci	r25, 0xFF	; 255
    2998:	08 95       	ret

0000299a <__udivmodsi4>:
    299a:	a1 e2       	ldi	r26, 0x21	; 33
    299c:	1a 2e       	mov	r1, r26
    299e:	aa 1b       	sub	r26, r26
    29a0:	bb 1b       	sub	r27, r27
    29a2:	fd 01       	movw	r30, r26
    29a4:	0d c0       	rjmp	.+26     	; 0x29c0 <__udivmodsi4_ep>

000029a6 <__udivmodsi4_loop>:
    29a6:	aa 1f       	adc	r26, r26
    29a8:	bb 1f       	adc	r27, r27
    29aa:	ee 1f       	adc	r30, r30
    29ac:	ff 1f       	adc	r31, r31
    29ae:	a2 17       	cp	r26, r18
    29b0:	b3 07       	cpc	r27, r19
    29b2:	e4 07       	cpc	r30, r20
    29b4:	f5 07       	cpc	r31, r21
    29b6:	20 f0       	brcs	.+8      	; 0x29c0 <__udivmodsi4_ep>
    29b8:	a2 1b       	sub	r26, r18
    29ba:	b3 0b       	sbc	r27, r19
    29bc:	e4 0b       	sbc	r30, r20
    29be:	f5 0b       	sbc	r31, r21

000029c0 <__udivmodsi4_ep>:
    29c0:	66 1f       	adc	r22, r22
    29c2:	77 1f       	adc	r23, r23
    29c4:	88 1f       	adc	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	1a 94       	dec	r1
    29ca:	69 f7       	brne	.-38     	; 0x29a6 <__udivmodsi4_loop>
    29cc:	60 95       	com	r22
    29ce:	70 95       	com	r23
    29d0:	80 95       	com	r24
    29d2:	90 95       	com	r25
    29d4:	9b 01       	movw	r18, r22
    29d6:	ac 01       	movw	r20, r24
    29d8:	bd 01       	movw	r22, r26
    29da:	cf 01       	movw	r24, r30
    29dc:	08 95       	ret

000029de <__divmodsi4>:
    29de:	97 fb       	bst	r25, 7
    29e0:	09 2e       	mov	r0, r25
    29e2:	05 26       	eor	r0, r21
    29e4:	0e d0       	rcall	.+28     	; 0x2a02 <__divmodsi4_neg1>
    29e6:	57 fd       	sbrc	r21, 7
    29e8:	04 d0       	rcall	.+8      	; 0x29f2 <__divmodsi4_neg2>
    29ea:	d7 df       	rcall	.-82     	; 0x299a <__udivmodsi4>
    29ec:	0a d0       	rcall	.+20     	; 0x2a02 <__divmodsi4_neg1>
    29ee:	00 1c       	adc	r0, r0
    29f0:	38 f4       	brcc	.+14     	; 0x2a00 <__divmodsi4_exit>

000029f2 <__divmodsi4_neg2>:
    29f2:	50 95       	com	r21
    29f4:	40 95       	com	r20
    29f6:	30 95       	com	r19
    29f8:	21 95       	neg	r18
    29fa:	3f 4f       	sbci	r19, 0xFF	; 255
    29fc:	4f 4f       	sbci	r20, 0xFF	; 255
    29fe:	5f 4f       	sbci	r21, 0xFF	; 255

00002a00 <__divmodsi4_exit>:
    2a00:	08 95       	ret

00002a02 <__divmodsi4_neg1>:
    2a02:	f6 f7       	brtc	.-4      	; 0x2a00 <__divmodsi4_exit>
    2a04:	90 95       	com	r25
    2a06:	80 95       	com	r24
    2a08:	70 95       	com	r23
    2a0a:	61 95       	neg	r22
    2a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a10:	9f 4f       	sbci	r25, 0xFF	; 255
    2a12:	08 95       	ret

00002a14 <__udivmodhi4>:
    2a14:	aa 1b       	sub	r26, r26
    2a16:	bb 1b       	sub	r27, r27
    2a18:	51 e1       	ldi	r21, 0x11	; 17
    2a1a:	07 c0       	rjmp	.+14     	; 0x2a2a <__udivmodhi4_ep>

00002a1c <__udivmodhi4_loop>:
    2a1c:	aa 1f       	adc	r26, r26
    2a1e:	bb 1f       	adc	r27, r27
    2a20:	a6 17       	cp	r26, r22
    2a22:	b7 07       	cpc	r27, r23
    2a24:	10 f0       	brcs	.+4      	; 0x2a2a <__udivmodhi4_ep>
    2a26:	a6 1b       	sub	r26, r22
    2a28:	b7 0b       	sbc	r27, r23

00002a2a <__udivmodhi4_ep>:
    2a2a:	88 1f       	adc	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	5a 95       	dec	r21
    2a30:	a9 f7       	brne	.-22     	; 0x2a1c <__udivmodhi4_loop>
    2a32:	80 95       	com	r24
    2a34:	90 95       	com	r25
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	08 95       	ret

00002a3c <__tablejump2__>:
    2a3c:	ee 0f       	add	r30, r30
    2a3e:	ff 1f       	adc	r31, r31

00002a40 <__tablejump__>:
    2a40:	05 90       	lpm	r0, Z+
    2a42:	f4 91       	lpm	r31, Z+
    2a44:	e0 2d       	mov	r30, r0
    2a46:	09 94       	ijmp

00002a48 <__prologue_saves__>:
    2a48:	2f 92       	push	r2
    2a4a:	3f 92       	push	r3
    2a4c:	4f 92       	push	r4
    2a4e:	5f 92       	push	r5
    2a50:	6f 92       	push	r6
    2a52:	7f 92       	push	r7
    2a54:	8f 92       	push	r8
    2a56:	9f 92       	push	r9
    2a58:	af 92       	push	r10
    2a5a:	bf 92       	push	r11
    2a5c:	cf 92       	push	r12
    2a5e:	df 92       	push	r13
    2a60:	ef 92       	push	r14
    2a62:	ff 92       	push	r15
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	ca 1b       	sub	r28, r26
    2a72:	db 0b       	sbc	r29, r27
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	09 94       	ijmp

00002a80 <__epilogue_restores__>:
    2a80:	2a 88       	ldd	r2, Y+18	; 0x12
    2a82:	39 88       	ldd	r3, Y+17	; 0x11
    2a84:	48 88       	ldd	r4, Y+16	; 0x10
    2a86:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a88:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a90:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a92:	b9 84       	ldd	r11, Y+9	; 0x09
    2a94:	c8 84       	ldd	r12, Y+8	; 0x08
    2a96:	df 80       	ldd	r13, Y+7	; 0x07
    2a98:	ee 80       	ldd	r14, Y+6	; 0x06
    2a9a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a9c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a9e:	1b 81       	ldd	r17, Y+3	; 0x03
    2aa0:	aa 81       	ldd	r26, Y+2	; 0x02
    2aa2:	b9 81       	ldd	r27, Y+1	; 0x01
    2aa4:	ce 0f       	add	r28, r30
    2aa6:	d1 1d       	adc	r29, r1
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	ed 01       	movw	r28, r26
    2ab4:	08 95       	ret

00002ab6 <__do_global_dtors>:
    2ab6:	13 e0       	ldi	r17, 0x03	; 3
    2ab8:	c2 ef       	ldi	r28, 0xF2	; 242
    2aba:	d3 e0       	ldi	r29, 0x03	; 3
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <.do_global_dtors_start>

00002abe <.do_global_dtors_loop>:
    2abe:	fe 01       	movw	r30, r28
    2ac0:	0e 94 20 15 	call	0x2a40	; 0x2a40 <__tablejump__>
    2ac4:	22 96       	adiw	r28, 0x02	; 2

00002ac6 <.do_global_dtors_start>:
    2ac6:	c4 3f       	cpi	r28, 0xF4	; 244
    2ac8:	d1 07       	cpc	r29, r17
    2aca:	c9 f7       	brne	.-14     	; 0x2abe <.do_global_dtors_loop>
    2acc:	f8 94       	cli

00002ace <__stop_program>:
    2ace:	ff cf       	rjmp	.-2      	; 0x2ace <__stop_program>
